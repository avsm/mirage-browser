{ "module": 
  { "name": "Callback",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/callback.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/callback.mli|0" },
    "info": 
      { "description": "Registering Caml values with the C runtime.<br></br> This module allows Caml values to be registered with the C runtime under a symbolic name, so that C code can later call back registered Caml functions, or raise registered Caml exceptions." },
    "type": "sig  end",
    "module_structure": [ 
      { "value": 
          { "name": "Callback.register",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/callback.mli|1201" },
            "info": 
              { "description": "<span class=\"code\" >Callback.register n v</span> registers the value <span class=\"code\" >v</span> under the name <span class=\"code\" >n</span>. C code can later retrieve a handle to <span class=\"code\" >v</span> by calling <span class=\"code\" >caml_named_value(n)</span>." },
            "type": "string -> 'a -> unit",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Callback.register_exception",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/callback.mli|1395" },
            "info": 
              { "description": "<span class=\"code\" >Callback.register_exception n exn</span> registers the exception contained in the exception value <span class=\"code\" >exn</span> under the name <span class=\"code\" >n</span>. C code can later retrieve a handle to the exception by calling <span class=\"code\" >caml_named_value(n)</span>. The exception value thus obtained is suitable for passign as first argument to <span class=\"code\" >raise_constant</span> or <span class=\"code\" >raise_with_arg</span>." },
            "type": "string -> exn -> unit",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "exn" } ] } } ],
    "dependencies": 
      { "uses": [  ],
        "used_by": [  ] } } }