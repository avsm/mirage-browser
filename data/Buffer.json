{ "module": 
  { "name": "Buffer",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|0" },
    "info": 
      { "description": "Extensible string buffers.<br></br> This module implements string buffers that automatically expand as necessary.  It provides accumulative concatenation of strings in quasi-linear time (instead of quadratic time when strings are concatenated pairwise)." },
    "type": "sig  end",
    "module_structure": [ 
      { "type": 
          { "name": "Buffer.t",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|1220" },
            "info": 
              { "description": "The abstract type of buffers." },
            "params": [  ],
            "kind": 
              { "type": "abstract" } } }, 
      { "value": 
          { "name": "Buffer.create",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|1260" },
            "info": 
              { "description": "<span class=\"code\" >create n</span> returns a fresh buffer, initially empty. The <span class=\"code\" >n</span> parameter is the initial size of the internal string that holds the buffer contents. That string is automatically reallocated when more than <span class=\"code\" >n</span> characters are stored in the buffer, but shrinks back to <span class=\"code\" >n</span> characters when <span class=\"code\" >reset</span> is called. For best performance, <span class=\"code\" >n</span> should be of the same order of magnitude as the number of characters that are expected to be stored in the buffer (for instance, 80 for a buffer that holds one output line).  Nothing bad will happen if the buffer grows beyond that limit, however. In doubt, take <span class=\"code\" >n = 16</span> for instance. If <span class=\"code\" >n</span> is not between 1 and <a href=\"{value|Sys.max_string_length}\" ><span class=\"code\" >Sys.max_string_length</span></a>, it will be clipped to that interval." },
            "type": "int -> Buffer.t",
            "params": [ 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Buffer.contents",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|2026" },
            "info": 
              { "description": "Return a copy of the current contents of the buffer. The buffer itself is unchanged." },
            "type": "Buffer.t -> string",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" } ] } }, 
      { "value": 
          { "name": "Buffer.sub",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|2149" },
            "info": 
              { "description": "<span class=\"code\" >Buffer.sub b off len</span> returns (a copy of) the substring of the current contents of the buffer <span class=\"code\" >b</span> starting at offset <span class=\"code\" >off</span> of length <span class=\"code\" >len</span> bytes. May raise <span class=\"code\" >Invalid_argument</span> if out of bounds request. The buffer itself is unaffected." },
            "type": "Buffer.t -> int -> int -> string",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Buffer.blit",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|2428" },
            "info": 
              { "description": "<span class=\"code\" >Buffer.blit src srcoff dst dstoff len</span> copies <span class=\"code\" >len</span> characters from the current contents of the buffer <span class=\"code\" >src</span>, starting at offset <span class=\"code\" >srcoff</span> to string <span class=\"code\" >dst</span>, starting at character <span class=\"code\" >dstoff</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >srcoff</span> and <span class=\"code\" >len</span> do not designate a valid substring of <span class=\"code\" >src</span>, or if <span class=\"code\" >dstoff</span> and <span class=\"code\" >len</span> do not designate a valid substring of <span class=\"code\" >dst</span>.",
                "since": "3.11.2" },
            "type": "Buffer.t -> int -> string -> int -> int -> unit",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Buffer.nth",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|2871" },
            "info": 
              { "description": "get the n-th character of the buffer. Raise <span class=\"code\" >Invalid_argument</span> if index out of bounds" },
            "type": "Buffer.t -> int -> char",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Buffer.length",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|2992" },
            "info": 
              { "description": "Return the number of characters currently contained in the buffer." },
            "type": "Buffer.t -> int",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" } ] } }, 
      { "value": 
          { "name": "Buffer.clear",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|3089" },
            "info": 
              { "description": "Empty the buffer." },
            "type": "Buffer.t -> unit",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" } ] } }, 
      { "value": 
          { "name": "Buffer.reset",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|3137" },
            "info": 
              { "description": "Empty the buffer and deallocate the internal string holding the buffer contents, replacing it with the initial internal string of length <span class=\"code\" >n</span> that was allocated by <a href=\"{value|Buffer.create}\" ><span class=\"code\" >Buffer.create</span></a> <span class=\"code\" >n</span>. For long-lived buffers that may have grown a lot, <span class=\"code\" >reset</span> allows faster reclamation of the space used by the buffer." },
            "type": "Buffer.t -> unit",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" } ] } }, 
      { "value": 
          { "name": "Buffer.add_char",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|3481" },
            "info": 
              { "description": "<span class=\"code\" >add_char b c</span> appends the character <span class=\"code\" >c</span> at the end of the buffer <span class=\"code\" >b</span>." },
            "type": "Buffer.t -> char -> unit",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "Buffer.add_string",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|3593" },
            "info": 
              { "description": "<span class=\"code\" >add_string b s</span> appends the string <span class=\"code\" >s</span> at the end of the buffer <span class=\"code\" >b</span>." },
            "type": "Buffer.t -> string -> unit",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Buffer.add_substring",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|3708" },
            "info": 
              { "description": "<span class=\"code\" >add_substring b s ofs len</span> takes <span class=\"code\" >len</span> characters from offset <span class=\"code\" >ofs</span> in string <span class=\"code\" >s</span> and appends them at the end of the buffer <span class=\"code\" >b</span>." },
            "type": "Buffer.t -> string -> int -> int -> unit",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Buffer.add_substitute",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|3903" },
            "info": 
              { "description": "<span class=\"code\" >add_substitute b f s</span> appends the string pattern <span class=\"code\" >s</span> at the end of the buffer <span class=\"code\" >b</span> with substitution. The substitution process looks for variables into the pattern and substitutes each variable name by its value, as obtained by applying the mapping <span class=\"code\" >f</span> to the variable name. Inside the string pattern, a variable name immediately follows a non-escaped <span class=\"code\" >$</span> character and is one of the following:<ul><li>a non empty sequence of alphanumeric or <span class=\"code\" >_</span> characters,</li><li>an arbitrary sequence of characters enclosed by a pair of matching parentheses or curly brackets. An escaped <span class=\"code\" >$</span> character is a <span class=\"code\" >$</span> that immediately follows a backslash character; it then stands for a plain <span class=\"code\" >$</span>. Raise <span class=\"code\" >Not_found</span> if the closing character of a parenthesized variable cannot be found.</li></ul>" },
            "type": "Buffer.t -> (string -> string) -> string -> unit",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "string -> string" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Buffer.add_buffer",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/buffer.mli|4768" },
            "info": 
              { "description": "<span class=\"code\" >add_buffer b1 b2</span> appends the current contents of buffer <span class=\"code\" >b2</span> at the end of buffer <span class=\"code\" >b1</span>.  <span class=\"code\" >b2</span> is not modified." },
            "type": "Buffer.t -> Buffer.t -> unit",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "Buffer.t" } ] } } ],
    "dependencies": 
      { "uses": [  ],
        "used_by": [ "Format", "Printf", "Utf8", "Utf16", "Cow" ] } } }