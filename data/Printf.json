{ "module": 
  { "name": "Printf",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|0" },
    "info": 
      { "description": "Formatted output functions." },
    "type": "sig  end",
    "module_structure": [ 
      { "comment": "Formatted output functions." }, 
      { "value": 
          { "name": "Printf.fprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|1001" },
            "info": 
              { "description": "<span class=\"code\" >fprintf outchan format arg1 ... argN</span> formats the arguments <span class=\"code\" >arg1</span> to <span class=\"code\" >argN</span> according to the format string <span class=\"code\" >format</span>, and outputs the resulting string on the channel <span class=\"code\" >outchan</span>.<br></br> The format is a character string which contains two types of objects: plain characters, which are simply copied to the output channel, and conversion specifications, each of which causes conversion and printing of arguments.<br></br> Conversion specifications have the following form:<br></br> <span class=\"code\" >% [flags] [width] [.precision] type</span><br></br> In short, a conversion specification consists in the <span class=\"code\" >%</span> character, followed by optional modifiers and a type which is made of one or two characters. The types and their meanings are:<br></br><ul><li><span class=\"code\" >d</span>, <span class=\"code\" >i</span>, <span class=\"code\" >n</span>, <span class=\"code\" >l</span>, <span class=\"code\" >L</span>, or <span class=\"code\" >N</span>: convert an integer argument to signed decimal.</li><li><span class=\"code\" >u</span>: convert an integer argument to unsigned decimal.</li><li><span class=\"code\" >x</span>: convert an integer argument to unsigned hexadecimal, using lowercase letters.</li><li><span class=\"code\" >X</span>: convert an integer argument to unsigned hexadecimal, using uppercase letters.</li><li><span class=\"code\" >o</span>: convert an integer argument to unsigned octal.</li><li><span class=\"code\" >s</span>: insert a string argument.</li><li><span class=\"code\" >S</span>: insert a string argument in Caml syntax (double quotes, escapes).</li><li><span class=\"code\" >c</span>: insert a character argument.</li><li><span class=\"code\" >C</span>: insert a character argument in Caml syntax (single quotes, escapes).</li><li><span class=\"code\" >f</span>: convert a floating-point argument to decimal notation, in the style <span class=\"code\" >dddd.ddd</span>.</li><li><span class=\"code\" >F</span>: convert a floating-point argument to Caml syntax (<span class=\"code\" >dddd.</span> or <span class=\"code\" >dddd.ddd</span> or <span class=\"code\" >d.ddd e+-dd</span>).</li><li><span class=\"code\" >e</span> or <span class=\"code\" >E</span>: convert a floating-point argument to decimal notation, in the style <span class=\"code\" >d.ddd e+-dd</span> (mantissa and exponent).</li><li><span class=\"code\" >g</span> or <span class=\"code\" >G</span>: convert a floating-point argument to decimal notation, in style <span class=\"code\" >f</span> or <span class=\"code\" >e</span>, <span class=\"code\" >E</span> (whichever is more compact).</li><li><span class=\"code\" >B</span>: convert a boolean argument to the string <span class=\"code\" >true</span> or <span class=\"code\" >false</span></li><li><span class=\"code\" >b</span>: convert a boolean argument (for backward compatibility; do not use in new programs).</li><li><span class=\"code\" >ld</span>, <span class=\"code\" >li</span>, <span class=\"code\" >lu</span>, <span class=\"code\" >lx</span>, <span class=\"code\" >lX</span>, <span class=\"code\" >lo</span>: convert an <span class=\"code\" >int32</span> argument to the format specified by the second letter (decimal, hexadecimal, etc).</li><li><span class=\"code\" >nd</span>, <span class=\"code\" >ni</span>, <span class=\"code\" >nu</span>, <span class=\"code\" >nx</span>, <span class=\"code\" >nX</span>, <span class=\"code\" >no</span>: convert a <span class=\"code\" >nativeint</span> argument to the format specified by the second letter.</li><li><span class=\"code\" >Ld</span>, <span class=\"code\" >Li</span>, <span class=\"code\" >Lu</span>, <span class=\"code\" >Lx</span>, <span class=\"code\" >LX</span>, <span class=\"code\" >Lo</span>: convert an <span class=\"code\" >int64</span> argument to the format specified by the second letter.</li><li><span class=\"code\" >a</span>: user-defined printer. Takes two arguments and applies the first one to <span class=\"code\" >outchan</span> (the current output channel) and to the second argument. The first argument must therefore have type <span class=\"code\" >out_channel -&gt; 'b -&gt; unit</span> and the second <span class=\"code\" >'b</span>. The output produced by the function is inserted in the output of <span class=\"code\" >fprintf</span> at the current point.</li><li><span class=\"code\" >t</span>: same as <span class=\"code\" >%a</span>, but takes only one argument (with type <span class=\"code\" >out_channel -&gt; unit</span>) and apply it to <span class=\"code\" >outchan</span>.</li><li><span class=\"code\" >{ fmt %}</span>: convert a format string argument. The argument must have the same type as the internal format string <span class=\"code\" >fmt</span>.</li><li><span class=\"code\" >( fmt %)</span>: format string substitution. Takes a format string argument and substitutes it to the internal format string <span class=\"code\" >fmt</span> to print following arguments. The argument must have the same type as <span class=\"code\" >fmt</span>.</li><li><span class=\"code\" >!</span>: take no argument and flush the output.</li><li><span class=\"code\" >%</span>: take no argument and output one <span class=\"code\" >%</span> character.</li><li><span class=\"code\" >,</span>: the no-op delimiter for conversion specifications.</li></ul> The optional <span class=\"code\" >flags</span> are:<ul><li><span class=\"code\" >-</span>: left-justify the output (default is right justification).</li><li><span class=\"code\" >0</span>: for numerical conversions, pad with zeroes instead of spaces.</li><li><span class=\"code\" >+</span>: for numerical conversions, prefix number with a <span class=\"code\" >+</span> sign if positive.</li><li>space: for numerical conversions, prefix number with a space if positive.</li><li><span class=\"code\" >#</span>: request an alternate formatting style for numbers.</li></ul> The optional <span class=\"code\" >width</span> is an integer indicating the minimal width of the result. For instance, <span class=\"code\" >%6d</span> prints an integer, prefixing it with spaces to fill at least 6 characters.<br></br> The optional <span class=\"code\" >precision</span> is a dot <span class=\"code\" >.</span> followed by an integer indicating how many digits follow the decimal point in the <span class=\"code\" >%f</span>, <span class=\"code\" >%e</span>, and <span class=\"code\" >%E</span> conversions. For instance, <span class=\"code\" >%.4f</span> prints a <span class=\"code\" >float</span> with 4 fractional digits.<br></br> The integer in a <span class=\"code\" >width</span> or <span class=\"code\" >precision</span> can also be specified as <span class=\"code\" ></span>, in which case an extra integer argument is taken to specify the corresponding <span class=\"code\" >width</span> or <span class=\"code\" >precision</span>. This integer argument precedes immediately the argument to print. For instance, <span class=\"code\" >%.*f</span> prints a <span class=\"code\" >float</span> with as many fractional digits as the value of the argument given before the float." },
            "type": "Pervasives.out_channel ->\n  ('a, Pervasives.out_channel, unit) Pervasives.format -> 'a",
            "params": [ 
              { "name": "",
                "type": "Pervasives.out_channel" }, 
              { "name": "",
                "type": "('a, Pervasives.out_channel, unit) Pervasives.format" } ] } }, 
      { "value": 
          { "name": "Printf.printf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|5625" },
            "info": 
              { "description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf</span></a>, but output on <span class=\"code\" >stdout</span>." },
            "type": "('a, Pervasives.out_channel, unit) Pervasives.format -> 'a",
            "params": [ 
              { "name": "",
                "type": "('a, Pervasives.out_channel, unit) Pervasives.format" } ] } }, 
      { "value": 
          { "name": "Printf.eprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|5734" },
            "info": 
              { "description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf</span></a>, but output on <span class=\"code\" >stderr</span>." },
            "type": "('a, Pervasives.out_channel, unit) Pervasives.format -> 'a",
            "params": [ 
              { "name": "",
                "type": "('a, Pervasives.out_channel, unit) Pervasives.format" } ] } }, 
      { "value": 
          { "name": "Printf.ifprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|5844" },
            "info": 
              { "description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf</span></a>, but does not print anything. Useful to ignore some material when conditionally printing.",
                "since": "3.10.0" },
            "type": "'a -> ('b, 'a, unit) Pervasives.format -> 'b",
            "params": [ 
              { "name": "",
                "type": "'a" }, 
              { "name": "",
                "type": "('a, 'b, unit) Pervasives.format" } ] } }, 
      { "value": 
          { "name": "Printf.sprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|6039" },
            "info": 
              { "description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf</span></a>, but instead of printing on an output channel, return a string containing the result of formatting the arguments." },
            "type": "('a, unit, string) Pervasives.format -> 'a",
            "params": [ 
              { "name": "",
                "type": "('a, unit, string) Pervasives.format" } ] } }, 
      { "value": 
          { "name": "Printf.bprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|6236" },
            "info": 
              { "description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf</span></a>, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module <a href=\"{module|Buffer}\" ><span class=\"code\" >Buffer</span></a>)." },
            "type": "Buffer.t -> ('a, Buffer.t, unit) Pervasives.format -> 'a",
            "params": [ 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "('a, Buffer.t, unit) Pervasives.format" } ] } }, 
      { "comment": "Formatted output functions with continuations." }, 
      { "value": 
          { "name": "Printf.kfprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|6524" },
            "info": 
              { "description": "Same as <span class=\"code\" >fprintf</span>, but instead of returning immediately, passes the out channel to its first argument at the end of printing.",
                "since": "3.09.0" },
            "type": "(Pervasives.out_channel -> 'a) ->\n  Pervasives.out_channel ->\n  ('b, Pervasives.out_channel, unit, 'a) Pervasives.format4 -> 'b",
            "params": [ 
              { "name": "",
                "type": "Pervasives.out_channel -> 'a" }, 
              { "name": "",
                "type": "Pervasives.out_channel" }, 
              { "name": "",
                "type": "('a, Pervasives.out_channel, unit, 'b) Pervasives.format4" } ] } }, 
      { "value": 
          { "name": "Printf.ksprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|6789" },
            "info": 
              { "description": "Same as <span class=\"code\" >sprintf</span> above, but instead of returning the string, passes it to the first argument.",
                "since": "3.09.0" },
            "type": "(string -> 'a) -> ('b, unit, string, 'a) Pervasives.format4 -> 'b",
            "params": [ 
              { "name": "",
                "type": "string -> 'a" }, 
              { "name": "",
                "type": "('a, unit, string, 'b) Pervasives.format4" } ] } }, 
      { "value": 
          { "name": "Printf.kbprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|6984" },
            "info": 
              { "description": "Same as <span class=\"code\" >bprintf</span>, but instead of returning immediately, passes the buffer to its first argument at the end of printing.",
                "since": "3.10.0" },
            "type": "(Buffer.t -> 'a) ->\n  Buffer.t -> ('b, Buffer.t, unit, 'a) Pervasives.format4 -> 'b",
            "params": [ 
              { "name": "",
                "type": "Buffer.t -> 'a" }, 
              { "name": "",
                "type": "Buffer.t" }, 
              { "name": "",
                "type": "('a, Buffer.t, unit, 'b) Pervasives.format4" } ] } }, 
      { "value": 
          { "name": "Printf.kprintf",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/printf.mli|7235" },
            "info": 
              { "description": "A deprecated synonym for <span class=\"code\" >ksprintf</span>." },
            "type": "(string -> 'a) -> ('b, unit, string, 'a) Pervasives.format4 -> 'b",
            "params": [ 
              { "name": "",
                "type": "string -> 'a" }, 
              { "name": "",
                "type": "('a, unit, string, 'b) Pervasives.format4" } ] } } ],
    "dependencies": 
      { "uses": [ "Pervasives", "Obj", "Buffer" ],
        "used_by": [  ] } } }