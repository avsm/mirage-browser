{ "module": 
  { "name": "Hashtbl",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|0" },
    "info": 
      { "description": "Hash tables and hash functions.<br></br> Hash tables are hashed association tables, with in-place modification." },
    "type": "sig  end",
    "module_structure": [ 
      { "comment": "<h6>Generic interface</h6>" }, 
      { "type": 
          { "name": "Hashtbl.t",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|1101" },
            "info": 
              { "description": "The type of hash tables from type <span class=\"code\" >'a</span> to type <span class=\"code\" >'b</span>." },
            "params": [ 
              { "covariant": "true",
                "contravariant": "true",
                "type": "'a" }, 
              { "covariant": "true",
                "contravariant": "true",
                "type": "'b" } ],
            "kind": 
              { "type": "abstract" } } }, 
      { "value": 
          { "name": "Hashtbl.create",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|1173" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.create n</span> creates a new, empty hash table, with initial size <span class=\"code\" >n</span>.  For best results, <span class=\"code\" >n</span> should be on the order of the expected number of elements that will be in the table.  The table grows as needed, so <span class=\"code\" >n</span> is just an initial guess." },
            "type": "int -> ('a, 'b) Hashtbl.t",
            "params": [ 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Hashtbl.clear",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|1468" },
            "info": 
              { "description": "Empty a hash table." },
            "type": "('a, 'b) Hashtbl.t -> unit",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" } ] } }, 
      { "value": 
          { "name": "Hashtbl.add",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|1528" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.add tbl x y</span> adds a binding of <span class=\"code\" >x</span> to <span class=\"code\" >y</span> in table <span class=\"code\" >tbl</span>. Previous bindings for <span class=\"code\" >x</span> are not removed, but simply hidden. That is, after performing <a href=\"{value|Hashtbl.remove}\" ><span class=\"code\" >Hashtbl.remove</span></a><span class=\"code\" > tbl x</span>, the previous binding for <span class=\"code\" >x</span>, if any, is restored. (Same behavior as with association lists.)" },
            "type": "('a, 'b) Hashtbl.t -> 'a -> 'b -> unit",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" }, 
              { "name": "",
                "type": "'a" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Hashtbl.copy",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|1865" },
            "info": 
              { "description": "Return a copy of the given hashtable." },
            "type": "('a, 'b) Hashtbl.t -> ('a, 'b) Hashtbl.t",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" } ] } }, 
      { "value": 
          { "name": "Hashtbl.find",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|1947" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.find tbl x</span> returns the current binding of <span class=\"code\" >x</span> in <span class=\"code\" >tbl</span>, or raises <span class=\"code\" >Not_found</span> if no such binding exists." },
            "type": "('a, 'b) Hashtbl.t -> 'a -> 'b",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Hashtbl.find_all",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|2107" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.find_all tbl x</span> returns the list of all data associated with <span class=\"code\" >x</span> in <span class=\"code\" >tbl</span>. The current binding is returned first, then the previous bindings, in reverse order of introduction in the table." },
            "type": "('a, 'b) Hashtbl.t -> 'a -> 'b list",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Hashtbl.mem",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|2365" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.mem tbl x</span> checks if <span class=\"code\" >x</span> is bound in <span class=\"code\" >tbl</span>." },
            "type": "('a, 'b) Hashtbl.t -> 'a -> bool",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Hashtbl.remove",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|2461" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.remove tbl x</span> removes the current binding of <span class=\"code\" >x</span> in <span class=\"code\" >tbl</span>, restoring the previous binding if it exists. It does nothing if <span class=\"code\" >x</span> is not bound in <span class=\"code\" >tbl</span>." },
            "type": "('a, 'b) Hashtbl.t -> 'a -> unit",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Hashtbl.replace",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|2672" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.replace tbl x y</span> replaces the current binding of <span class=\"code\" >x</span> in <span class=\"code\" >tbl</span> by a binding of <span class=\"code\" >x</span> to <span class=\"code\" >y</span>.  If <span class=\"code\" >x</span> is unbound in <span class=\"code\" >tbl</span>, a binding of <span class=\"code\" >x</span> to <span class=\"code\" >y</span> is added to <span class=\"code\" >tbl</span>. This is functionally equivalent to <a href=\"{value|Hashtbl.remove}\" ><span class=\"code\" >Hashtbl.remove</span></a><span class=\"code\" > tbl x</span> followed by <a href=\"{value|Hashtbl.add}\" ><span class=\"code\" >Hashtbl.add</span></a><span class=\"code\" > tbl x y</span>." },
            "type": "('a, 'b) Hashtbl.t -> 'a -> 'b -> unit",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" }, 
              { "name": "",
                "type": "'a" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Hashtbl.iter",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|3007" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.iter f tbl</span> applies <span class=\"code\" >f</span> to all bindings in table <span class=\"code\" >tbl</span>. <span class=\"code\" >f</span> receives the key as first argument, and the associated value as second argument. Each binding is presented exactly once to <span class=\"code\" >f</span>. The order in which the bindings are passed to <span class=\"code\" >f</span> is unspecified. However, if the table contains several bindings for the same key, they are passed to <span class=\"code\" >f</span> in reverse order of introduction, that is, the most recent binding is passed first." },
            "type": "('a -> 'b -> unit) -> ('a, 'b) Hashtbl.t -> unit",
            "params": [ 
              { "name": "",
                "type": "'a -> 'b -> unit" }, 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" } ] } }, 
      { "value": 
          { "name": "Hashtbl.fold",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|3521" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.fold f tbl init</span> computes <span class=\"code\" >(f kN dN ... (f k1 d1 init)...)</span>, where <span class=\"code\" >k1 ... kN</span> are the keys of all bindings in <span class=\"code\" >tbl</span>, and <span class=\"code\" >d1 ... dN</span> are the associated values. Each binding is presented exactly once to <span class=\"code\" >f</span>. The order in which the bindings are passed to <span class=\"code\" >f</span> is unspecified. However, if the table contains several bindings for the same key, they are passed to <span class=\"code\" >f</span> in reverse order of introduction, that is, the most recent binding is passed first." },
            "type": "('a -> 'b -> 'c -> 'c) -> ('a, 'b) Hashtbl.t -> 'c -> 'c",
            "params": [ 
              { "name": "",
                "type": "'a -> 'b -> 'c -> 'c" }, 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Hashtbl.length",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|4070" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.length tbl</span> returns the number of bindings in <span class=\"code\" >tbl</span>. Multiple bindings are counted multiply, so <span class=\"code\" >Hashtbl.length</span> gives the number of times <span class=\"code\" >Hashtbl.iter</span> calls its first argument." },
            "type": "('a, 'b) Hashtbl.t -> int",
            "params": [ 
              { "name": "",
                "type": "('a, 'b) Hashtbl.t" } ] } }, 
      { "comment": "<h6>Functorial interface</h6>" }, 
      { "module_type": 
          { "name": "Hashtbl.HashedType",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|4339" },
            "info": 
              { "description": "The input signature of the functor <a href=\"{module|Hashtbl.Make}\" ><span class=\"code\" >Hashtbl.Make</span></a>." },
            "type": "sig  end",
            "kind": "" } }, 
      { "module_type": 
          { "name": "Hashtbl.S",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|5224" },
            "info": 
              { "description": "The output signature of the functor <a href=\"{module|Hashtbl.Make}\" ><span class=\"code\" >Hashtbl.Make</span></a>." },
            "type": "sig  end",
            "kind": "" } }, 
      { "module": 
          { "name": "Hashtbl.Make",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|5795" },
            "info": 
              { "description": "Functor building an implementation of the hashtable structure. The functor <span class=\"code\" >Hashtbl.Make</span> returns a structure containing a type <span class=\"code\" >key</span> of keys and a type <span class=\"code\" >'a t</span> of hash tables associating data of type <span class=\"code\" >'a</span> to keys of type <span class=\"code\" >key</span>. The operations perform similarly to those of the generic interface, but use the hashing and equality functions specified in the functor argument <span class=\"code\" >H</span> instead of generic equality and hashing." },
            "type": "functor (H : HashedType) -> sig  end",
            "module_functor": 
              { "parameter": 
                  { "name": "H" },
                "module_with": "unavailable" },
            "dependencies": 
              { "uses": [  ] } } }, 
      { "comment": "<h6>The polymorphic hash primitive</h6>" }, 
      { "value": 
          { "name": "Hashtbl.hash",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|6347" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.hash x</span> associates a positive integer to any value of any type. It is guaranteed that if <span class=\"code\" >x = y</span> or <span class=\"code\" >Pervasives.compare x y = 0</span>, then <span class=\"code\" >hash x = hash y</span>. Moreover, <span class=\"code\" >hash</span> always terminates, even on cyclic structures." },
            "type": "'a -> int",
            "params": [ 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Hashtbl.hash_param",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/hashtbl.mli|6614" },
            "info": 
              { "description": "<span class=\"code\" >Hashtbl.hash_param n m x</span> computes a hash value for <span class=\"code\" >x</span>, with the same properties as for <span class=\"code\" >hash</span>. The two extra parameters <span class=\"code\" >n</span> and <span class=\"code\" >m</span> give more precise control over hashing. Hashing performs a depth-first, right-to-left traversal of the structure <span class=\"code\" >x</span>, stopping after <span class=\"code\" >n</span> meaningful nodes were encountered, or <span class=\"code\" >m</span> nodes, meaningful or not, were encountered. Meaningful nodes are: integers; floating-point numbers; strings; characters; booleans; and constant constructors. Larger values of <span class=\"code\" >m</span> and <span class=\"code\" >n</span> means that more nodes are taken into account to compute the final hash value, and therefore collisions are less likely to happen. However, hashing takes longer. The parameters <span class=\"code\" >m</span> and <span class=\"code\" >n</span> govern the tradeoff between accuracy and speed." },
            "type": "int -> int -> 'a -> int",
            "params": [ 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "'a" } ] } } ],
    "dependencies": 
      { "uses": [  ],
        "used_by": [ "Weak", "Dns", "Http" ] } } }