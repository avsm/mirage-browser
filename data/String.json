{ "module": 
  { "name": "String",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|0" },
    "info": 
      { "description": "String operations. Given a string <span class=\"code\" >s</span> of length <span class=\"code\" >l</span>, we call character number in <span class=\"code\" >s</span> the index of a character in <span class=\"code\" >s</span>.  Indexes start at <span class=\"code\" >0</span>, and we will call a character number valid in <span class=\"code\" >s</span> if it falls within the range <span class=\"code\" >[0...l-1]</span>. A position is the point between two characters or at the beginning or end of the string.  We call a position valid in <span class=\"code\" >s</span> if it falls within the range <span class=\"code\" >[0...l]</span>. Note that character number <span class=\"code\" >n</span> is between positions <span class=\"code\" >n</span> and <span class=\"code\" >n+1</span>.<br></br> Two parameters <span class=\"code\" >start</span> and <span class=\"code\" >len</span> are said to designate a valid substring of <span class=\"code\" >s</span> if <span class=\"code\" >len &gt;= 0</span> and <span class=\"code\" >start</span> and <span class=\"code\" >start+len</span> are valid positions in <span class=\"code\" >s</span>." },
    "type": "sig  end",
    "module_structure": [ 
      { "value": 
          { "name": "String.length",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|1589" },
            "info": 
              { "description": "Return the length (number of characters) of the given string." },
            "type": "string -> int",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "String.get",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|1710" },
            "info": 
              { "description": "<span class=\"code\" >String.get s n</span> returns character number <span class=\"code\" >n</span> in string <span class=\"code\" >s</span>. You can also write <span class=\"code\" >s.[n]</span> instead of <span class=\"code\" >String.get s n</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >n</span> not a valid character number in <span class=\"code\" >s</span>." },
            "type": "string -> int -> char",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "String.set",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|1970" },
            "info": 
              { "description": "<span class=\"code\" >String.set s n c</span> modifies string <span class=\"code\" >s</span> in place, replacing the character number <span class=\"code\" >n</span> by <span class=\"code\" >c</span>. You can also write <span class=\"code\" >s.[n] &lt;- c</span> instead of <span class=\"code\" >String.set s n c</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >n</span> is not a valid character number in <span class=\"code\" >s</span>." },
            "type": "string -> int -> char -> unit",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.create",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|2281" },
            "info": 
              { "description": "<span class=\"code\" >String.create n</span> returns a fresh string of length <span class=\"code\" >n</span>. The string initially contains arbitrary characters.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >n &lt; 0</span> or <span class=\"code\" >n &gt; </span><a href=\"{value|Sys.max_string_length}\" ><span class=\"code\" >Sys.max_string_length</span></a>." },
            "type": "int -> string",
            "params": [ 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "String.make",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|2530" },
            "info": 
              { "description": "<span class=\"code\" >String.make n c</span> returns a fresh string of length <span class=\"code\" >n</span>, filled with the character <span class=\"code\" >c</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >n &lt; 0</span> or <span class=\"code\" >n &gt; </span><a href=\"{value|Sys.max_string_length}\" ><span class=\"code\" >Sys.max_string_length</span></a>." },
            "type": "int -> char -> string",
            "params": [ 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.copy",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|2735" },
            "info": 
              { "description": "Return a copy of the given string." },
            "type": "string -> string",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "String.sub",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|2806" },
            "info": 
              { "description": "<span class=\"code\" >String.sub s start len</span> returns a fresh string of length <span class=\"code\" >len</span>, containing the substring of <span class=\"code\" >s</span> that starts at position <span class=\"code\" >start</span> and has length <span class=\"code\" >len</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >start</span> and <span class=\"code\" >len</span> do not designate a valid substring of <span class=\"code\" >s</span>." },
            "type": "string -> int -> int -> string",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "String.fill",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|3108" },
            "info": 
              { "description": "<span class=\"code\" >String.fill s start len c</span> modifies string <span class=\"code\" >s</span> in place, replacing <span class=\"code\" >len</span> characters by <span class=\"code\" >c</span>, starting at <span class=\"code\" >start</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >start</span> and <span class=\"code\" >len</span> do not designate a valid substring of <span class=\"code\" >s</span>." },
            "type": "string -> int -> int -> char -> unit",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.blit",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|3377" },
            "info": 
              { "description": "<span class=\"code\" >String.blit src srcoff dst dstoff len</span> copies <span class=\"code\" >len</span> characters from string <span class=\"code\" >src</span>, starting at character number <span class=\"code\" >srcoff</span>, to string <span class=\"code\" >dst</span>, starting at character number <span class=\"code\" >dstoff</span>. It works correctly even if <span class=\"code\" >src</span> and <span class=\"code\" >dst</span> are the same string, and the source and destination intervals overlap.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >srcoff</span> and <span class=\"code\" >len</span> do not designate a valid substring of <span class=\"code\" >src</span>, or if <span class=\"code\" >dstoff</span> and <span class=\"code\" >len</span> do not designate a valid substring of <span class=\"code\" >dst</span>." },
            "type": "string -> int -> string -> int -> int -> unit",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "String.concat",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|3918" },
            "info": 
              { "description": "<span class=\"code\" >String.concat sep sl</span> concatenates the list of strings <span class=\"code\" >sl</span>, inserting the separator string <span class=\"code\" >sep</span> between each." },
            "type": "string -> string list -> string",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "string list" } ] } }, 
      { "value": 
          { "name": "String.iter",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|4087" },
            "info": 
              { "description": "<span class=\"code\" >String.iter f s</span> applies function <span class=\"code\" >f</span> in turn to all the characters of <span class=\"code\" >s</span>.  It is equivalent to <span class=\"code\" >f s.[0]; f s.[1]; ...; f s.[String.length s - 1]; ()</span>." },
            "type": "(char -> unit) -> string -> unit",
            "params": [ 
              { "name": "",
                "type": "char -> unit" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "String.escaped",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|4299" },
            "info": 
              { "description": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of Objective Caml.  If there is no special character in the argument, return the original string itself, not a copy." },
            "type": "string -> string",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "String.index",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|4589" },
            "info": 
              { "description": "<span class=\"code\" >String.index s c</span> returns the character number of the first occurrence of character <span class=\"code\" >c</span> in string <span class=\"code\" >s</span>.<br></br> Raise <span class=\"code\" >Not_found</span> if <span class=\"code\" >c</span> does not occur in <span class=\"code\" >s</span>." },
            "type": "string -> char -> int",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.rindex",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|4790" },
            "info": 
              { "description": "<span class=\"code\" >String.rindex s c</span> returns the character number of the last occurrence of character <span class=\"code\" >c</span> in string <span class=\"code\" >s</span>.<br></br> Raise <span class=\"code\" >Not_found</span> if <span class=\"code\" >c</span> does not occur in <span class=\"code\" >s</span>." },
            "type": "string -> char -> int",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.index_from",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|4992" },
            "info": 
              { "description": "<span class=\"code\" >String.index_from s i c</span> returns the character number of the first occurrence of character <span class=\"code\" >c</span> in string <span class=\"code\" >s</span> after position <span class=\"code\" >i</span>. <span class=\"code\" >String.index s c</span> is equivalent to <span class=\"code\" >String.index_from s 0 c</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >i</span> is not a valid position in <span class=\"code\" >s</span>. Raise <span class=\"code\" >Not_found</span> if <span class=\"code\" >c</span> does not occur in <span class=\"code\" >s</span> after position <span class=\"code\" >i</span>." },
            "type": "string -> int -> char -> int",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.rindex_from",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|5383" },
            "info": 
              { "description": "<span class=\"code\" >String.rindex_from s i c</span> returns the character number of the last occurrence of character <span class=\"code\" >c</span> in string <span class=\"code\" >s</span> before position <span class=\"code\" >i+1</span>. <span class=\"code\" >String.rindex s c</span> is equivalent to <span class=\"code\" >String.rindex_from s (String.length s - 1) c</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >i+1</span> is not a valid position in <span class=\"code\" >s</span>. Raise <span class=\"code\" >Not_found</span> if <span class=\"code\" >c</span> does not occur in <span class=\"code\" >s</span> before position <span class=\"code\" >i+1</span>." },
            "type": "string -> int -> char -> int",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.contains",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|5808" },
            "info": 
              { "description": "<span class=\"code\" >String.contains s c</span> tests if character <span class=\"code\" >c</span> appears in the string <span class=\"code\" >s</span>." },
            "type": "string -> char -> bool",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.contains_from",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|5929" },
            "info": 
              { "description": "<span class=\"code\" >String.contains_from s start c</span> tests if character <span class=\"code\" >c</span> appears in <span class=\"code\" >s</span> after position <span class=\"code\" >start</span>. <span class=\"code\" >String.contains s c</span> is equivalent to <span class=\"code\" >String.contains_from s 0 c</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >start</span> is not a valid position in <span class=\"code\" >s</span>." },
            "type": "string -> int -> char -> bool",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.rcontains_from",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|6232" },
            "info": 
              { "description": "<span class=\"code\" >String.rcontains_from s stop c</span> tests if character <span class=\"code\" >c</span> appears in <span class=\"code\" >s</span> before position <span class=\"code\" >stop+1</span>.<br></br> Raise <span class=\"code\" >Invalid_argument</span> if <span class=\"code\" >stop &lt; 0</span> or <span class=\"code\" >stop+1</span> is not a valid position in <span class=\"code\" >s</span>." },
            "type": "string -> int -> char -> bool",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "char" } ] } }, 
      { "value": 
          { "name": "String.uppercase",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|6481" },
            "info": 
              { "description": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set." },
            "type": "string -> string",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "String.lowercase",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|6681" },
            "info": 
              { "description": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set." },
            "type": "string -> string",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "String.capitalize",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|6881" },
            "info": 
              { "description": "Return a copy of the argument, with the first character set to uppercase." },
            "type": "string -> string",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "String.uncapitalize",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|6997" },
            "info": 
              { "description": "Return a copy of the argument, with the first character set to lowercase." },
            "type": "string -> string",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "type": 
          { "name": "String.t",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|7120" },
            "info": 
              { "description": "An alias for the type of strings." },
            "params": [  ],
            "kind": 
              { "type": "abstract" },
            "manifest": "string" } }, 
      { "value": 
          { "name": "String.compare",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/string.mli|7173" },
            "info": 
              { "description": "The comparison function for strings, with the same specification as <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare</span></a>.  Along with the type <span class=\"code\" >t</span>, this function <span class=\"code\" >compare</span> allows the module <span class=\"code\" >String</span> to be passed as argument to the functors <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make</span></a> and <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make</span></a>." },
            "type": "String.t -> String.t -> int",
            "params": [ 
              { "name": "",
                "type": "String.t" }, 
              { "name": "",
                "type": "String.t" } ] } } ],
    "dependencies": 
      { "uses": [  ],
        "used_by": [  ] } } }