{ "module": 
  { "name": "Cow",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|0" },
    "info": 
      { "description": "Streaming XML IO.  <br></br> A well-formed sequence of <a href=\"#TYPEsignal\" >signals</a> represents an <a href=\"http://www.w3.org/TR/REC-xml\" >XML</a> document tree traversal in depth first order (this has nothing to do with XML well-formedness). Input pulls a well-formed sequence of signals from a data source and output pushes a well-formed sequence of signals to a data destination. Functions are provided to easily  transform sequences of signals to/from arborescent data structures.<br></br> Consult the <a href=\"#io\" >features and limitations</a> and <a href=\"#ex\" >examples</a>  of use.<br></br> <em>Version 1.0.2 - daniel.buenzl i@erratique.ch </em><br></br> <b>References.</b><br></br> Tim Bray.  <em><a href=\"http://www.xml.com/axml/axml.html\" >The annotated XML Specification</a></em>,  1998. <br></br> Tim Bray et al.  <em><a href=\"http://www.w3.org/TR/xml-names11\" >Namespaces in XML 1.1 (2nd ed.)</a></em>, 2006.<br></br> <h1>Basic types and values</h1>" },
    "type": "sig  end",
    "module_structure": [ 
      { "module": 
          { "name": "Cow.Xml",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|0" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "comment": "Streaming XML IO.  <br></br> A well-formed sequence of <a href=\"#TYPEsignal\" >signals</a> represents an <a href=\"http://www.w3.org/TR/REC-xml\" >XML</a> document tree traversal in depth first order (this has nothing to do with XML well-formedness). Input pulls a well-formed sequence of signals from a data source and output pushes a well-formed sequence of signals to a data destination. Functions are provided to easily  transform sequences of signals to/from arborescent data structures.<br></br> Consult the <a href=\"#io\" >features and limitations</a> and <a href=\"#ex\" >examples</a>  of use.<br></br> <em>Version 1.0.2 - daniel.buenzl i@erratique.ch </em><br></br> <b>References.</b><br></br> Tim Bray.  <em><a href=\"http://www.xml.com/axml/axml.html\" >The annotated XML Specification</a></em>,  1998. <br></br> Tim Bray et al.  <em><a href=\"http://www.w3.org/TR/xml-names11\" >Namespaces in XML 1.1 (2nd ed.)</a></em>, 2006.<br></br> <h1>Basic types and values</h1>" }, 
              { "type": 
                  { "name": "Cow.Xml.encoding",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|1090" },
                    "info": 
                      { "description": "The type for character encodings. For <span class=\"code\" >`UTF_16</span>, endianness is determined from the  <a href=\"http://www.unicode.org/unicode/faq/utf_bom.html#BOM\" >BOM</a>." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "[ `ISO_8859_1 | `US_ASCII | `UTF_16 | `UTF_16BE | `UTF_16LE | `UTF_8 ]" } }, 
              { "type": 
                  { "name": "Cow.Xml.dtd",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|1313" },
                    "info": 
                      { "description": "The type for the optional <a href=\"http://www.w3.org/TR/REC-xml/#dt-doctype\" >DTD</a>." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "string option" } }, 
              { "type": 
                  { "name": "Cow.Xml.name",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|1426" },
                    "info": 
                      { "description": "The type for attribute and element's <a href=\"http://www.w3.org/TR/xml-names11/#dt-expname\" >expanded names</a>  <span class=\"code\" >(uri,local)</span>. An empty <span class=\"code\" >uri</span> represents a name without a namespace name, i.e. an unprefixed name  that is not under the scope of a default namespace." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "string * string" } }, 
              { "type": 
                  { "name": "Cow.Xml.attribute",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|1732" },
                    "info": 
                      { "description": "The type for attributes. Name and attribute data." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "Cow.Xml.name * string" } }, 
              { "type": 
                  { "name": "Cow.Xml.tag",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|1821" },
                    "info": 
                      { "description": "The type for an element tag. Tag name and attribute list." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "Cow.Xml.name * Cow.Xml.attribute list" } }, 
              { "type": 
                  { "name": "Cow.Xml.signal",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|1920" },
                    "info": 
                      { "description": "The type for signals. A <em>well-formed</em> sequence of signals belongs to the language of the <span class=\"code\" >doc</span> grammar : <span class=\"codepre\" >doc ::= `Dtd tree tree ::= `El_start child `El_end child ::= `Data | tree | epsilon </span> Input and output deal only with well-formed sequences or exceptions are raised." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "[ `Data of string\n  | `Dtd of Cow.Xml.dtd\n  | `El_end\n  | `El_start of Cow.Xml.tag\n  | `Raw of string ]" } }, 
              { "value": 
                  { "name": "Cow.Xml.ns_xml",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|2311" },
                    "info": 
                      { "description": "Namespace name <a href=\"http://www.w3.org/XML/1998/namespace\" >value</a> bound to the  reserved <span class=\"code\" >\"xml\"</span> prefix." },
                    "type": "string",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Cow.Xml.ns_xmlns",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|2445" },
                    "info": 
                      { "description": "Namespace name <a href=\"http://www.w3.org/2000/xmlns/\" >value</a> bound to the  reserved <span class=\"code\" >\"xmlns\"</span> prefix." },
                    "type": "string",
                    "params": [  ] } }, 
              { "comment": "<h1>Input</h1>" }, 
              { "type": 
                  { "name": "Cow.Xml.pos",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|2598" },
                    "info": 
                      { "description": "The type for input positions. Line and column number, both start with 1." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "int * int" } }, 
              { "type": 
                  { "name": "Cow.Xml.error",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|2739" },
                    "info": 
                      { "description": "The type for input errors." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "[ `Expected_char_seqs of string list * string\n  | `Expected_root_element\n  | `Illegal_char_ref of string\n  | `Illegal_char_seq of string\n  | `Malformed_char_stream\n  | `Max_buffer_size\n  | `Unexpected_eoi\n  | `Unknown_encoding of string\n  | `Unknown_entity_ref of string\n  | `Unknown_ns_prefix of string ]" } }, 
              { "value": 
                  { "name": "Cow.Xml.error_message",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|3555" },
                    "info": 
                      { "description": "Converts the error to an english error message." },
                    "type": "Cow.Xml.error -> string",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Xml.error" } ] } }, 
              { "exception": 
                  { "name": "Cow.Xml.Error",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|3647" },
                    "info": 
                      { "description": "Raised on input errors." },
                    "exception_args": [ "Cow.Xml.pos", "Cow.Xml.error" ] } }, 
              { "type": 
                  { "name": "Cow.Xml.source",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|3715" },
                    "info": 
                      { "description": "The type for input sources. For <span class=\"code\" >`String</span> starts reading at the given integer position. For <span class=\"code\" >`Fun</span> the function must return the next <em>byte</em> as an <span class=\"code\" >int</span> and raise <span class=\"code\" >End_of_file</span> if there is no such byte." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "[ `Fun of unit -> int | `String of int * string ]" } }, 
              { "type": 
                  { "name": "Cow.Xml.input",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|4008" },
                    "info": 
                      { "description": "The type for input abstractions." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" } } }, 
              { "value": 
                  { "name": "Cow.Xml.make_input",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|4055" },
                    "info": 
                      { "description": "Returns a new input abstraction reading from the given source. <ul><li><span class=\"code\" >enc</span>, character encoding of the document, <a href=\"#inenc\" > details</a>.  Defaults to <span class=\"code\" >None</span>.</li><li><span class=\"code\" >strip</span>, strips whitespace in character data, <a href=\"#inwspace\" > details</a>. Defaults to <span class=\"code\" >false</span>.</li><li><span class=\"code\" >ns</span> is called to bind undeclared namespace prefixes, <a href=\"#inns\" > details</a>. Default returns always <span class=\"code\" >None</span>.</li><li><span class=\"code\" >entity</span> is called to resolve non predefined entity references, <a href=\"#inentity\" > details</a>. Default returns always <span class=\"code\" >None</span>.</li></ul>" },
                    "type": "?templates:bool ->\n  ?enc:Cow.Xml.encoding option ->\n  ?strip:bool ->\n  ?ns:(string -> string option) ->\n  ?entity:(string -> string option) -> Cow.Xml.source -> Cow.Xml.input",
                    "params": [ 
                      { "name": "templates",
                        "type": "bool option" }, 
                      { "name": "enc",
                        "type": "Cow.Xml.encoding option option" }, 
                      { "name": "strip",
                        "type": "bool option" }, 
                      { "name": "ns",
                        "type": "(string -> string option) option" }, 
                      { "name": "entity",
                        "type": "(string -> string option) option" }, 
                      { "name": "",
                        "type": "Cow.Xml.source" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.input",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|4768" },
                    "info": 
                      { "description": "Inputs a signal. Repeated invocation of the function with the same input abstraction will generate a <a href=\"#TYPEsignal\" >well-formed</a> sequence of signals or an <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error</span></a> is raised. Furthermore there will be no two consecutive <span class=\"code\" >`Data</span> signals in the sequence and their string is always non empty. After a well-formed sequence was input another may  be input, see <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi</span></a> and <a href=\"#iseq\" >details</a>.<br></br> <b>Raises</b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error</span></a> on input errors." },
                    "type": "Cow.Xml.input -> Cow.Xml.signal",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Xml.input" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.input_tree",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|5252" },
                    "info": 
                      { "description": "If the next signal is a : <ul><li><span class=\"code\" >`Data</span> signal, inputs it and invokes <span class=\"code\" >data</span> with the character data.</li><li><span class=\"code\" >`El_start</span> signal, inputs the sequence of signals until its  matching <span class=\"code\" >`El_end</span> and invokes <span class=\"code\" >el</span> and <span class=\"code\" >data</span> as follows <ul><li><span class=\"code\" >el</span>, is called on each <span class=\"code\" >`El_end</span> signals with the corresponding  <span class=\"code\" >`El_start</span> tag and the result of the callback invocation for the  element's children.</li><li><span class=\"code\" >data</span>, is called on each <span class=\"code\" >`Data</span> signals with the character data.  This function won't be called twice consecutively or with the empty  string.</li></ul></li><li>Other signals, raises <span class=\"code\" >Invalid_argument</span>.</li></ul><br></br> <b>Raises</b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error</span></a> on input errors and <span class=\"code\" >Invalid_argument</span> if the next signal is not <span class=\"code\" >`El_start</span> or <span class=\"code\" >`Data</span>." },
                    "type": "el:(Cow.Xml.tag -> 'a list -> 'a) ->\n  data:(string -> 'a) -> Cow.Xml.input -> 'a",
                    "params": [ 
                      { "name": "el",
                        "type": "Cow.Xml.tag -> 'a list -> 'a" }, 
                      { "name": "data",
                        "type": "string -> 'a" }, 
                      { "name": "",
                        "type": "Cow.Xml.input" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.input_doc_tree",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|6125" },
                    "info": 
                      { "description": "Same as <a href=\"{value|Cow.Xml.input_tree}\" ><span class=\"code\" >Cow.Xml.input_tree</span></a> but reads a complete <a href=\"#TYPEsignal\" >well-formed</a>   sequence of signals. <br></br> <b>Raises</b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error</span></a> on input errors and <span class=\"code\" >Invalid_argument</span> if the next signal is not <span class=\"code\" >`Dtd</span>." },
                    "type": "el:(Cow.Xml.tag -> 'a list -> 'a) ->\n  data:(string -> 'a) -> Cow.Xml.input -> Cow.Xml.dtd * 'a",
                    "params": [ 
                      { "name": "el",
                        "type": "Cow.Xml.tag -> 'a list -> 'a" }, 
                      { "name": "data",
                        "type": "string -> 'a" }, 
                      { "name": "",
                        "type": "Cow.Xml.input" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.peek",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|6454" },
                    "info": 
                      { "description": "Same as <a href=\"{value|Cow.Xml.input}\" ><span class=\"code\" >Cow.Xml.input</span></a> but doesn't remove the signal from the sequence. <br></br> <b>Raises</b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error</span></a> on input errors." },
                    "type": "Cow.Xml.input -> Cow.Xml.signal",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Xml.input" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.eoi",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|6598" },
                    "info": 
                      { "description": "Returns <span class=\"code\" >true</span> if the end of input is reached. See <a href=\"#iseq\" >details</a>.<br></br> <b>Raises</b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error</span></a> on input errors." },
                    "type": "Cow.Xml.input -> bool",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Xml.input" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.pos",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|6743" },
                    "info": 
                      { "description": "Current position in the input abstraction." },
                    "type": "Cow.Xml.input -> Cow.Xml.pos",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Xml.input" } ] } }, 
              { "comment": "<h1>Output</h1>" }, 
              { "type": 
                  { "name": "Cow.Xml.frag",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|6841" },
                    "info": 
                      { "description": "The type for deconstructing data structures of type <span class=\"code\" >'a</span>." },
                    "params": [ 
                      { "covariant": "true",
                        "contravariant": "false",
                        "type": "'a" } ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "[ `Data of string | `El of Cow.Xml.tag * 'a list ]" } }, 
              { "type": 
                  { "name": "Cow.Xml.t",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|6966" },
                    "info": 
                      { "description": "The type for XML fragments" },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "('a Cow.Xml.frag as 'a) Cow.Xml.frag list" } }, 
              { "type": 
                  { "name": "Cow.Xml.dest",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|7038" },
                    "info": 
                      { "description": "The type for output destinations. For <span class=\"code\" >`Buffer</span>, the buffer won't be cleared. For <span class=\"code\" >`Fun</span> the function is called with the output <em>    bytes</em> as <span class=\"code\" >int</span>s." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "[ `Buffer of Buffer.t | `Fun of int -> unit ]" } }, 
              { "type": 
                  { "name": "Cow.Xml.output",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|7278" },
                    "info": 
                      { "description": "The type for output abstractions." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" } } }, 
              { "value": 
                  { "name": "Cow.Xml.make_output",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|7327" },
                    "info": 
                      { "description": "Returns a new output abstraction writing to the given destination. <ul><li><span class=\"code\" >nl</span>, if <span class=\"code\" >true</span> a newline is output when the root's element <span class=\"code\" >`El_end</span>  signal is output. Defaults to <span class=\"code\" >false</span>.</li><li><span class=\"code\" >indent</span>, identation behaviour, see <a href=\"#outindent\" > details</a>. Defaults to <span class=\"code\" >None</span>.</li><li><span class=\"code\" >ns_prefix</span>, undeclared namespace prefix bindings,  see <a href=\"#outns\" >details</a>. Default returns always <span class=\"code\" >None</span>.</li></ul>" },
                    "type": "?nl:bool ->\n  ?indent:int option ->\n  ?ns_prefix:(string -> string option) -> Cow.Xml.dest -> Cow.Xml.output",
                    "params": [ 
                      { "name": "nl",
                        "type": "bool option" }, 
                      { "name": "indent",
                        "type": "int option option" }, 
                      { "name": "ns_prefix",
                        "type": "(string -> string option) option" }, 
                      { "name": "",
                        "type": "Cow.Xml.dest" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.output",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|7883" },
                    "info": 
                      { "description": "Outputs a signal. After a well-formed sequence of signals was  output a new well-formed sequence can be output.<br></br> <b>Raises</b> <span class=\"code\" >Invalid_argument</span> if the resulting signal sequence on the output abstraction is not <a href=\"#TYPEsignal\" >well-formed</a> or if a namespace name could not be bound to a prefix." },
                    "type": "Cow.Xml.output -> Cow.Xml.signal -> unit",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Xml.output" }, 
                      { "name": "",
                        "type": "Cow.Xml.signal" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.output_tree",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|8237" },
                    "info": 
                      { "description": "Outputs signals corresponding to a value by recursively applying the given value deconstructor.<br></br> <b>Raises</b> see <a href=\"{value|Cow.Xml.output}\" ><span class=\"code\" >Cow.Xml.output</span></a>." },
                    "type": "('a -> 'a Cow.Xml.frag) -> Cow.Xml.output -> 'a -> unit",
                    "params": [ 
                      { "name": "",
                        "type": "'a -> 'a Cow.Xml.frag" }, 
                      { "name": "",
                        "type": "Cow.Xml.output" }, 
                      { "name": "",
                        "type": "'a" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.output_doc_tree",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|8434" },
                    "info": 
                      { "description": "Same as <a href=\"{value|Cow.Xml.output_tree}\" ><span class=\"code\" >Cow.Xml.output_tree</span></a> but outputs a complete <a href=\"#TYPEsignal\" >well-formed</a>  sequence of signals.<br></br> <b>Raises</b> see <a href=\"{value|Cow.Xml.output}\" ><span class=\"code\" >Cow.Xml.output</span></a>." },
                    "type": "('a -> 'a Cow.Xml.frag) -> Cow.Xml.output -> Cow.Xml.dtd * 'a -> unit",
                    "params": [ 
                      { "name": "",
                        "type": "'a -> 'a Cow.Xml.frag" }, 
                      { "name": "",
                        "type": "Cow.Xml.output" }, 
                      { "tuple": 
                          { "type": "Cow.Xml.dtd * 'a",
                            "contents": [ 
                              { "name": "",
                                "type": "Cow.Xml.dtd" }, 
                              { "name": "",
                                "type": "'a" } ] } } ] } }, 
              { "comment": "<h1>Functorial interface</h1> <br></br> <a href=\"{module|Cow.Xml.Make}\" ><span class=\"code\" >Cow.Xml.Make</span></a> allows client to specify types for strings and internal buffers. Among other things this can be used to perform hash-consing or to process the character stream, e.g. to normalize unicode characters or to convert to a custom encoding." }, 
              { "type": 
                  { "name": "Cow.Xml.std_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|8948" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "string" } }, 
              { "type": 
                  { "name": "Cow.Xml.std_buffer",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|8973" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "Buffer.t" } }, 
              { "module_type": 
                  { "name": "Cow.Xml.XMLString",
                    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|9032" },
                    "info": 
                      { "description": "Input signature for strings." },
                    "type": "sig  end",
                    "kind": "" } }, 
              { "module_type": 
                  { "name": "Cow.Xml.XMLBuffer",
                    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|10071" },
                    "info": 
                      { "description": "Input signature for internal buffers." },
                    "type": "sig  end",
                    "kind": "" } }, 
              { "module_type": 
                  { "name": "Cow.Xml.S",
                    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|10811" },
                    "info": 
                      { "description": "Output signature of <a href=\"{module|Cow.Xml.Make}\" ><span class=\"code\" >Cow.Xml.Make</span></a>." },
                    "type": "sig  end",
                    "kind": "" } }, 
              { "module": 
                  { "name": "Cow.Xml.Make",
                    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|12952" },
                    "info": 
                      { "description": "Functor building streaming XML IO with the given strings and buffers." },
                    "type": "functor (String : XMLString) -> functor (Buffer : sig  end) -> sig  end",
                    "module_functor": 
                      { "parameter": 
                          { "name": "String" },
                        "module_functor": 
                          { "parameter": 
                              { "name": "Buffer" },
                            "module_with": "unavailable" } },
                    "dependencies": 
                      { "uses": [  ] } } }, 
              { "comment": "<h1>Features and limitations</h1><br></br> The module assumes strings are immutable, thus strings the client gives or receives <em>during</em> the input and output process  must not be modified. <h2>Input</h2> <h3>Encoding</h3>    <br></br> The parser supports ASCII, US-ASCII,  <a href=\"http://www.faqs.org/rfcs/rfc3629.html\" > UTF-8</a>, <a href=\"http://www.faqs.org/rfcs/rfc2781.html\" > UTF-16</a>, <a href=\"http://www.faqs.org/rfcs/rfc2781.html\" > UTF-16LE</a>, <a href=\"http://www.faqs.org/rfcs/rfc2781.html\" > UTF-16BE</a> and <a href=\"http://anubis.dkuug.dk/JTC1/SC2/WG3/docs/n411.pdf\" >ISO-8559-1</a>  (Latin-1) encoded documents. But strings returned by the library are <b>always</b> UTF-8 encoded (unless you use the functor). <br></br> The encoding can be specified explicitly using the optional argument <span class=\"code\" >enc</span>. Otherwise the parser uses UTF-16 or UTF-8 if there is a <a href=\"http://www.unicode.org/unicode/faq/utf_bom.html#BOM\" >BOM</a> at the beginning of the document. If there is no BOM it uses the encoding specified in the <a href=\"http://www.w3.org/TR/REC-xml/#NT-XMLDecl\" > XML declaration</a>. Finally, if there is no XML declaration UTF-8 is assumed. <h3>White space handling</h3><br></br> The parser performs <a href=\"http://www.w3.org/TR/REC-xml/#AVNormalize\" >attribute data normalization</a> on <em>every</em> attribute data.  This means that attribute data does not have leading and trailling white space and that  any white space is collapsed and transformed to a single space  character (<span class=\"code\" >U+0020</span>).<br></br> White space handling of character data depends on the <span class=\"code\" >strip</span> argument. If <span class=\"code\" >strip</span> is <span class=\"code\" >true</span>, character data is treated like attribute data, white space before and after elements is removed and any white space is collapsed and transformed to a single space character (<span class=\"code\" >U+0020</span>), except if the data is under the scope of a <em>    xml:space</em> attribute whose value is <em>preserve</em>.  If <span class=\"code\" >strip</span> is <span class=\"code\" >false</span> all white space data is preserved as present in the document (however all kinds of <a href=\"http://www.w3.org/TR/REC-xml/#sec-line-ends\" >line ends</a> are translated to the newline character (<span class=\"code\" >U+000A</span>).  <h3>Namespaces</h3><br></br> Xmlm's <a href=\"#TYPEname\" >names</a> are <a href=\"http://www.w3.org/TR/xml-names11/#dt-expname\" >expanded names</a>. The parser automatically handles the document's namespace declarations.  Undeclared namespace prefixes can be bound via the callback <span class=\"code\" >ns</span>, which must return a namespace name. If <span class=\"code\" >ns</span> returns <span class=\"code\" >None</span> an <span class=\"code\" >`Unknown_ns_prefix</span> error is raised.<br></br> Attributes used for namespace declarations are preserved by the parser. They are in the <a href=\"{value|Cow.Xml.ns_xmlns}\" ><span class=\"code\" >Cow.Xml.ns_xmlns</span></a> namespace. Default namespace declarations made with <i>xmlns</i> have the attribute name <span class=\"code\" >(Xmlm.ns_xmlns, \"xmlns\")</span>. Prefix declarations have the prefix as the local name, for example <i>xmlns:ex</i> results in the attribute name <span class=\"code\" >(Xmlm.ns_xmlns, \"ex\")</span>.<br></br> Regarding constraints on the usage of the <i>xml</i> and <i>xmlns</i> prefixes by documents, the parser does not report errors on violations  of the <i>must</i> constraints listed in <a href=\"http://www.w3.org/TR/xml-names11/#xmlReserved\" >this paragraph</a>.  <h3>Character and entity references</h3><br></br> <a href=\"http://www.w3.org/TR/REC-xml/#dt-charref\" >Character references</a> and <a href=\"http://www.w3.org/TR/REC-xml/#sec-predefined-ent\" >predefined entities</a> are automatically resolved. Other entity references can be resolved by the callback <span class=\"code\" >entity</span>, which must return an UTF-8 (unless you use the functor) string corresponding to the replacement character data.  The replacement data is <em>not</em> analysed for further references, it is added to the data as such modulo white space stripping. If <span class=\"code\" >entity</span> returns <span class=\"code\" >None</span> the error <span class=\"code\" >`Unknown_entity_ref</span> is returned.     <h3>Sequences of documents</h3><br></br> When a well-formed sequence of signals is input, no data is consumed beyond the closing <span class=\"code\" >'&gt;'</span> of the document's root element. <br></br> If you want to parse a document as <a href=\"http://www.w3.org/TR/REC-xml/#NT-document\" >defined</a> in the XML specification, call <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi</span></a> after a well-formed sequence of signals, it must return <span class=\"code\" >true</span>. If you expect another document on the same input abstraction a new well-formed sequence of signals can be <a href=\"{value|Cow.Xml.input}\" ><span class=\"code\" >Cow.Xml.input</span></a>. Use <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi</span></a> to check if a document follows (this may consume data).<br></br> Invoking <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi</span></a> after a well-formed sequence of signals skips whitespaces, comments and processing instructions until it gets to either an <a href=\"http://www.w3.org/TR/REC-xml/#NT-XMLDecl\" > XML declaration</a> or a <a href=\"http://www.w3.org/TR/REC-xml/#dt-doctype\" >DTD</a> or the start of a new element or the end of input (in which case <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi</span></a> returns <span class=\"code\" >true</span>).  If there is a new document but there is no XML declaration or the declaration specifies UTF-16, the same encoding as for the previous document is used.<br></br> <h3>Miscellaneous</h3> <ul><li>Parses the more liberal and simpler XML 1.1  <a href=\"http://www.w3.org/TR/xml11/#NT-Name\" >Name</a> definition (minus <span class=\"code\" >':'</span> because of namespaces).</li><li>The <a href=\"http://www.w3.org/TR/REC-xml/#dt-doctype\" >DTD</a> is parsed roughly (no guarantee it is well formed) and its information is ignored.</li><li>The parser drops  <a href=\"http://www.w3.org/TR/REC-xml/#dt-comment\" >comments</a>,  <a href=\"http://www.w3.org/TR/REC-xml/#dt-pi\" >processing instructions</a>, and  <a href=\"http://www.w3.org/TR/REC-xml/#sec-rmd\" >standalone declaration</a>.</li><li>Element attributes are not checked for uniqueness.</li><li>Attribute and character data chunks are limited by  <span class=\"code\" >Sys.max_string_length</span> (unless you use the functor).  The error <span class=\"code\" >`Max_buffer_size</span> is raised if the limit is hit.</li><li>Tail recursive.</li><li>Non validating.</li></ul><br></br> <h2>Output</h2>  <h3>Encoding</h3> <br></br> Outputs only <a href=\"http://www.faqs.org/rfcs/rfc3629.html\" > UTF-8</a> encoded documents (even if you use the functor).  Strings given to output functions <b>must be</b> UTF-8 encoded (unless you use the functor, but you need to provide a translation), no checks are performed.  <h3>Namespaces</h3><br></br> Xmlm's <a href=\"#TYPEname\" >names</a> are <a href=\"http://www.w3.org/TR/xml-names11/#dt-expname\" >expanded names</a>. Expanded names are automatically converted to <a href=\"http://www.w3.org/TR/xml-names11/#dt-qualname\" >qualified names</a> by the output abstraction. There is no particular api to specify  prefixes and default namespaces,  the actual result depends solely on the output of attributes belonging to the <a href=\"{value|Cow.Xml.ns_xmlns}\" ><span class=\"code\" >Cow.Xml.ns_xmlns</span></a> namespace. For example to set  the default namespace of an element to <i>http://example.org/myns</i>,  use the following attribute : <span class=\"codepre\" >(* xmlns='http://example.org/myns' *) let default_ns = (Xmlm.ns_xmlns, \"xmlns\"), \"http://example.org/myns\"</span> To bind the prefix <span class=\"code\" >\"ex\"</span> to <i>http://example.org/ex</i>, use the  following attribute : <span class=\"codepre\" >(* xmlns:ex='http://example.org/ex' *) let ex_ns = (Xmlm.ns_xmlns, \"ex\"), \"http://example.org/ex\"</span> Note that outputing input signals without touching namespace declaration attributes will preserve existing prefixes and bindings provided the same namespace name is not bound to different prefixes in a given context.<br></br> The callback <span class=\"code\" >ns_prefix</span> of an output abstraction can be used to give a prefix to a namespace name lacking a prefix binding in the current output scope. Given a namespace name the function must return  the prefix to use. Note that this will <b>not</b> add any namespace declaration attribute to the output.  If the function returns <span class=\"code\" >None</span>, <a href=\"{value|Cow.Xml.output}\" ><span class=\"code\" >Cow.Xml.output</span></a> will raise <span class=\"code\" >Invalid_argument</span>.  The default function returns always <span class=\"code\" >None</span>. <h3>Indentation</h3><br></br> Output can be indented by specifying the <span class=\"code\" >indent</span> argument when an output abstraction is created. If <span class=\"code\" >indent</span> is <span class=\"code\" >None</span> (default) signal output does not introduce any extra white space.  If <span class=\"code\" >ident</span> is <span class=\"code\" >Some c</span>, each <a href=\"{type|Cow.Xml.signal}\" ><span class=\"code\" >Cow.Xml.signal</span></a> is output on its own line (for empty elements <span class=\"code\" >`El_start</span> and <span class=\"code\" >`El_end</span> are collapsed on a single line) and nested elements are indented with <span class=\"code\" >c</span> space characters. <h3>Sequences of documents</h3> <br></br> After a well-formed sequence of signals was output, the output abstraction can be reused to output a new well-formed sequence of signals.<br></br> <h3>Miscellaneous</h3> <ul><li>In attribute and character data you provide, markup  delimiters <span class=\"code\" >'&lt;'</span>,<span class=\"code\" >'&gt;'</span>,<span class=\"code\" >'&amp;'</span>, and <span class=\"code\" >'\\\"'</span> are  automatically escaped to  <a href=\"http://www.w3.org/TR/REC-xml/#sec-predefined-ent\" >predefined entities</a>.</li><li>No checks are peformed on the prefix and local part of output names to verify they are <a href=\"http://www.w3.org/TR/xml-names11/#NT-NCName\" >NCName</a>s. For example using the tag name <span class=\"code\" >(\"\",\"dip d\")</span> will produce  a non well-formed document because of the space character.</li><li>Tail recursive.</li></ul><br></br> <h2>Tips</h2>  <ul><li>The best options to do an input/output round trip and preserve as much information as possible is to  input with <span class=\"code\" >strip = false</span> and output with <span class=\"code\" >indent = None</span>.</li><li>Complete whitespace control on output is achieved  with <span class=\"code\" >indent = None</span> and suitable <span class=\"code\" >`Data</span> signals</li></ul>" }, 
              { "comment": "<h1>Examples</h1> <br></br> <h2>Sequential processing</h2>    <br></br> Sequential processing has the advantage that you don't need to get the whole document tree in memory to process it.<br></br> The following function reads a <em>single</em> document on an input channel and outputs it. <span class=\"codepre\" >let id ic oc =  let i = Xmlm.make_input (`Channel ic) in  let o = Xmlm.make_output (`Channel oc) in  let rec pull i o depth =  Xmlm.output o (Xmlm.peek i); match Xmlm.input i with  | `El_start _ -&gt; pull i o (depth + 1) | `El_end -&gt; if depth = 1 then () else pull i o (depth - 1) | `Data _ -&gt; pull i o depth  | `Dtd _ -&gt; assert false in Xmlm.output o (Xmlm.input i); (* `Dtd *) pull i o 0; if not (Xmlm.eoi i) then invalid_arg \"document not well-formed\"</span> The following function reads a <em>sequence</em> of documents on an input channel and outputs it. <span class=\"codepre\" >let id_seq ic oc =  let i = Xmlm.make_input (`Channel ic) in  let o = Xmlm.make_output ~nl:true (`Channel oc) in  while not (Xmlm.eoi i) do Xmlm.output o (Xmlm.input i) done</span> The following function reads a <em>sequence</em> of documents on the  input channel. In each document's tree it prunes non root elements whose name belongs to <span class=\"code\" >prune_list</span>. <span class=\"codepre\" >let prune_docs prune_list ic oc =  let i = Xmlm.make_input (`Channel ic) in let o = Xmlm.make_output ~nl:true (`Channel oc) in let copy i o = Xmlm.output o (Xmlm.input i) in let prune (name, _) = List.mem name prune_list in let rec process i o d =  let rec skip i d = match Xmlm.input i with | `El_start _ -&gt; skip i (d + 1) | `El_end -&gt; if d = 1 then () else skip i (d - 1) | s -&gt; skip i d in match Xmlm.peek i with  | `El_start tag when prune tag -&gt; skip i 0; process i o d | `El_start _ -&gt; copy i o; process i o (d + 1) | `El_end -&gt; copy i o; if d = 0 then () else process i o (d - 1) | `Data _ -&gt; copy i o; process i o d | `Dtd _ -&gt; assert false in let rec docs i o =  copy i o; (* `Dtd *) copy i o; (* root start *) process i o 0; if Xmlm.eoi i then () else docs i o in docs i o</span><br></br> <h2>Tree processing</h2> <br></br> A document's sequence of signals can be easily converted to an arborescent data structure. Assume your trees are defined by : <span class=\"codepre\" >type tree = E of Xmlm.tag * tree list | D of string</span> The following functions input/output xml documents from/to abstractions  as value of type <span class=\"code\" >tree</span>. <span class=\"codepre\" >let in_tree i =  let el tag childs = E (tag, childs)  in let data d = D d in Xmlm.input_doc_tree ~el ~data i let out_tree o t =  let frag = function | E (tag, childs) -&gt; `El (tag, childs)  | D d -&gt; `Data d  in Xmlm.output_doc_tree frag o t</span> <br></br> <h2>Tabular data processing</h2><br></br> We show how to process XML data that represents tabular data (some people like do that).<br></br> The file we need to deal with represents nominal data about <a href=\"http://www.w3.org/\" >W3C bureaucrats</a>. There are no namespaces and attributes are ignored. The element structure of the document is : <ul><li>&lt;list&gt; <ul><li>&lt;bureaucrat&gt; represents a W3C bureaucrat (zero or more).<br></br> A bureaucrat contains the following elements, in order. <ul><li>&lt;name&gt; its name (mandatory, string).</li><li>&lt;surname&gt; its surname (mandatory, string).</li><li>&lt;honest&gt; present iff he implemented one of its spec  (optional, empty).</li><li>&lt;obfuscation_level&gt; its grade on the open scale of obfuscation (mandatory, float).</li><li>&lt;tr&gt; (zero or more, string), technical reports he worked on.</li></ul></li></ul></li></ul><br></br> In OCaml we represent a W3C bureaucrat by this type : <span class=\"codepre\" >type w3c_bureaucrat = {  name : string;  surname : string;  honest : bool;  obfuscation_level : float; trs : string list; }</span> The following functions input and output W3C bureaucrats as lists of values of type <span class=\"code\" >w3c_bureaucrat</span>. <span class=\"codepre\" >let in_w3c_bureaucrats src =  let i = Xmlm.make_input ~strip:true src in let tag n = (\"\", n), [] in let error () = invalid_arg \"parse error\" in let accept s i = if Xmlm.input i = s then () else error () in let rec i_seq el acc i = match Xmlm.peek i with  | `El_start _ -&gt; i_seq el ((el i) :: acc) i | `El_end -&gt; List.rev acc | _ -&gt; error () in let i_el n i =  accept (`El_start (tag n)) i; let d = match Xmlm.peek i with | `Data d -&gt; ignore (Xmlm.input i); d | `El_end -&gt; \"\" | _ -&gt; error () in accept (`El_end) i; d in let i_bureaucrat i =  try accept (`El_start (tag \"bureaucrat\")) i; let name = i_el \"name\" i in let surname = i_el \"surname\" i in let honest = match Xmlm.peek i with | `El_start ((\"\", \"honest\"), []) -&gt; ignore (i_el \"honest\" i); true | _ -&gt; false in let obf = float_of_string (i_el \"obfuscation_level\" i) in let trs = i_seq (i_el \"tr\") [] i in accept (`El_end) i; { name = name; surname = surname; honest = honest;  obfuscation_level = obf; trs = trs } with | Failure _ -&gt; error () (* float_of_string *) in accept (`Dtd None) i; accept (`El_start (tag \"list\")) i; let bl = i_seq i_bureaucrat [] i in accept (`El_end) i; if not (Xmlm.eoi i) then invalid_arg \"more than one document\"; bl let out_w3c_bureaucrats dst bl =  let tag n = (\"\", n), [] in let o = Xmlm.make_output ~nl:true ~indent:(Some 2) dst in let out = Xmlm.output o in let o_el n d =  out (`El_start (tag n));  if d &lt;&gt; \"\" then out (`Data d);  out `El_end  in let o_bureaucrat b =  out (`El_start (tag \"bureaucrat\")); o_el \"name\" b.name; o_el \"surname\" b.surname; if b.honest then o_el \"honest\" \"\"; o_el \"obfuscation_level\" (string_of_float b.obfuscation_level); List.iter (o_el \"tr\") b.trs; out `El_end in out (`Dtd None); out (`El_start (tag \"list\")); List.iter o_bureaucrat bl; out (`El_end)</span>" }, 
              { "value": 
                  { "name": "Cow.Xml.to_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|28319" },
                    "info": "",
                    "type": "Cow.Xml.t -> string",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Xml.t" } ] } }, 
              { "value": 
                  { "name": "Cow.Xml.of_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|28347" },
                    "info": "",
                    "type": "?entity:(string -> string option) ->\n  ?templates:(string * Cow.Xml.t) list ->\n  ?enc:Cow.Xml.encoding -> string -> Cow.Xml.t",
                    "params": [ 
                      { "name": "entity",
                        "type": "(string -> string option) option" }, 
                      { "name": "templates",
                        "type": "(string * Cow.Xml.t) list option" }, 
                      { "name": "enc",
                        "type": "Cow.Xml.encoding option" }, 
                      { "name": "",
                        "type": "string" } ] } } ],
            "dependencies": 
              { "uses": [  ] } } }, 
      { "module": 
          { "name": "Cow.Html",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30203" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "type": 
                  { "name": "Cow.Html.t",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30228" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "('a Cow.Xml.frag as 'a) Cow.Xml.frag list" } }, 
              { "value": 
                  { "name": "Cow.Html.to_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30269" },
                    "info": "",
                    "type": "Cow.Html.t -> string",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Html.t" } ] } }, 
              { "value": 
                  { "name": "Cow.Html.of_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30298" },
                    "info": "",
                    "type": "?templates:(string * Cow.Html.t) list ->\n  ?enc:Cow.Xml.encoding -> string -> Cow.Html.t",
                    "params": [ 
                      { "name": "templates",
                        "type": "(string * Cow.Html.t) list option" }, 
                      { "name": "enc",
                        "type": "Cow.Xml.encoding option" }, 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "comment": "<h2>HTML library</h2>" }, 
              { "type": 
                  { "name": "Cow.Html.link",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30420" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "record",
                        "private": "false",
                        "fields": [ 
                          { "name": "text",
                            "mutable": false,
                            "type": "string" }, 
                          { "name": "href",
                            "mutable": false,
                            "type": "string" } ] } } }, 
              { "value": 
                  { "name": "Cow.Html.html_of_link",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30465" },
                    "info": "",
                    "type": "Cow.Html.link -> Cow.Html.t",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Html.link" } ] } }, 
              { "value": 
                  { "name": "Cow.Html.interleave",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30495" },
                    "info": "",
                    "type": "string array -> Cow.Html.t list -> Cow.Html.t list",
                    "params": [ 
                      { "name": "",
                        "type": "string array" }, 
                      { "name": "",
                        "type": "Cow.Html.t list" } ] } }, 
              { "value": 
                  { "name": "Cow.Html.html_of_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30546" },
                    "info": "",
                    "type": "string -> Cow.Html.t",
                    "params": [ 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "value": 
                  { "name": "Cow.Html.html_of_int",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30579" },
                    "info": "",
                    "type": "int -> Cow.Html.t",
                    "params": [ 
                      { "name": "",
                        "type": "int" } ] } }, 
              { "value": 
                  { "name": "Cow.Html.html_of_float",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30606" },
                    "info": "",
                    "type": "float -> Cow.Html.t",
                    "params": [ 
                      { "name": "",
                        "type": "float" } ] } }, 
              { "type": 
                  { "name": "Cow.Html.table",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30643" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "Cow.Html.t array array" } }, 
              { "value": 
                  { "name": "Cow.Html.html_of_table",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30666" },
                    "info": "",
                    "type": "?headings:bool -> Cow.Html.table -> Cow.Html.t",
                    "params": [ 
                      { "name": "headings",
                        "type": "bool option" }, 
                      { "name": "",
                        "type": "Cow.Html.table" } ] } }, 
              { "value": 
                  { "name": "Cow.Html.nil",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30716" },
                    "info": "",
                    "type": "Cow.Html.t",
                    "params": [  ] } } ],
            "dependencies": 
              { "uses": [  ] } } }, 
      { "module": 
          { "name": "Cow.Css",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30732" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "type": 
                  { "name": "Cow.Css.elt",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30778" },
                    "info": 
                      { "description": "Single element" },
                    "params": [  ],
                    "kind": 
                      { "type": "variant",
                        "private": "false",
                        "constructors": [ 
                          { "name": "Str",
                            "type": [ "string" ] }, 
                          { "name": "Fun",
                            "type": [ "string", "Cow.Css.expr list" ] } ] } } }, 
              { "type": 
                  { "name": "Cow.Css.expr",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30889" },
                    "info": 
                      { "description": "Expression: `.body a:hover`. No commas here." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "Cow.Css.elt list" } }, 
              { "type": 
                  { "name": "Cow.Css.prop_decl",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|30947" },
                    "info": 
                      { "description": "We allow nested declarations" },
                    "params": [  ],
                    "kind": 
                      { "type": "variant",
                        "private": "false",
                        "constructors": [ 
                          { "name": "Prop",
                            "type": [ "string", "Cow.Css.expr list" ] }, 
                          { "name": "Decl",
                            "type": [ "Cow.Css.expr list", "Cow.Css.prop_decl list" ] } ] } } }, 
              { "type": 
                  { "name": "Cow.Css.t",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31124" },
                    "info": 
                      { "description": "The type of CSS fragment" },
                    "params": [  ],
                    "kind": 
                      { "type": "variant",
                        "private": "false",
                        "constructors": [ 
                          { "name": "Props",
                            "type": [ "Cow.Css.prop_decl list" ] }, 
                          { "name": "Exprs",
                            "type": [ "Cow.Css.expr list" ] } ] } } }, 
              { "value": 
                  { "name": "Cow.Css.to_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31180" },
                    "info": "",
                    "type": "Cow.Css.t -> string",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Css.t" } ] } }, 
              { "comment": "<h2>Getters</h2>" }, 
              { "value": 
                  { "name": "Cow.Css.expr",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31229" },
                    "info": "",
                    "type": "Cow.Css.t -> Cow.Css.expr",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Css.t" } ] } }, 
              { "value": 
                  { "name": "Cow.Css.exprs",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31250" },
                    "info": "",
                    "type": "Cow.Css.t -> Cow.Css.expr list",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Css.t" } ] } }, 
              { "value": 
                  { "name": "Cow.Css.props",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31277" },
                    "info": "",
                    "type": "Cow.Css.t -> Cow.Css.prop_decl list",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Css.t" } ] } }, 
              { "value": 
                  { "name": "Cow.Css.string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31309" },
                    "info": "",
                    "type": "Cow.Css.t -> string",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Css.t" } ] } }, 
              { "comment": "<h3>Helpers</h3>" }, 
              { "value": 
                  { "name": "Cow.Css.unroll",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31468" },
                    "info": 
                      { "description": "transform a fragment with nested declarations into an equivalent fragment with only root declarations" },
                    "type": "Cow.Css.t -> Cow.Css.t",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Css.t" } ] } }, 
              { "comment": "<h2>CSS library</h2>" }, 
              { "value": 
                  { "name": "Cow.Css.gradient",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31513" },
                    "info": "",
                    "type": "low:Cow.Css.t -> high:Cow.Css.t -> Cow.Css.t",
                    "params": [ 
                      { "name": "low",
                        "type": "Cow.Css.t" }, 
                      { "name": "high",
                        "type": "Cow.Css.t" } ] } }, 
              { "value": 
                  { "name": "Cow.Css.top_rounded",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31550" },
                    "info": "",
                    "type": "Cow.Css.t",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Cow.Css.bottom_rounded",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31570" },
                    "info": "",
                    "type": "Cow.Css.t",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Cow.Css.rounded",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31593" },
                    "info": "",
                    "type": "Cow.Css.t",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Cow.Css.box_shadow",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31610" },
                    "info": "",
                    "type": "Cow.Css.t",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Cow.Css.text_shadow",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31629" },
                    "info": "",
                    "type": "Cow.Css.t",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Cow.Css.no_padding",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31650" },
                    "info": "",
                    "type": "Cow.Css.t",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Cow.Css.reset_padding",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31669" },
                    "info": "",
                    "type": "Cow.Css.t",
                    "params": [  ] } } ],
            "dependencies": 
              { "uses": [  ] } } }, 
      { "module": 
          { "name": "Cow.Code",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31696" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "value": 
                  { "name": "Cow.Code.ocaml",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31825" },
                    "info": 
                      { "description": "Convert a string into an xHTML fragment, where keywords have been classified in different classes" },
                    "type": "string -> Cow.Html.t",
                    "params": [ 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "value": 
                  { "name": "Cow.Code.ocaml_css",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31926" },
                    "info": 
                      { "description": "CSS fragment to colorize the keywords, depending on their class" },
                    "type": "Cow.Css.t",
                    "params": [  ] } } ],
            "dependencies": 
              { "uses": [  ] } } }, 
      { "module": 
          { "name": "Cow.Atom",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31952" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "type": 
                  { "name": "Cow.Atom.author",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|31977" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "record",
                        "private": "false",
                        "fields": [ 
                          { "name": "name",
                            "mutable": false,
                            "type": "string" }, 
                          { "name": "uri",
                            "mutable": false,
                            "type": "string option" }, 
                          { "name": "email",
                            "mutable": false,
                            "type": "string option" } ] } } }, 
              { "type": 
                  { "name": "Cow.Atom.date",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32064" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "int * int * int * int * int" } }, 
              { "value": 
                  { "name": "Cow.Atom.compare",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32100" },
                    "info": "",
                    "type": "Cow.Atom.date -> Cow.Atom.date -> int",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Atom.date" }, 
                      { "name": "",
                        "type": "Cow.Atom.date" } ] } }, 
              { "type": 
                  { "name": "Cow.Atom.meta",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32140" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "record",
                        "private": "false",
                        "fields": [ 
                          { "name": "id",
                            "mutable": false,
                            "type": "string" }, 
                          { "name": "title",
                            "mutable": false,
                            "type": "string" }, 
                          { "name": "subtitle",
                            "mutable": false,
                            "type": "string option" }, 
                          { "name": "author",
                            "mutable": false,
                            "type": "Cow.Atom.author option" }, 
                          { "name": "rights",
                            "mutable": false,
                            "type": "string option" }, 
                          { "name": "updated",
                            "mutable": false,
                            "type": "Cow.Atom.date" } ] } } }, 
              { "type": 
                  { "name": "Cow.Atom.summary",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32326" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "string option" } }, 
              { "type": 
                  { "name": "Cow.Atom.entry",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32356" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "record",
                        "private": "false",
                        "fields": [ 
                          { "name": "entry",
                            "mutable": false,
                            "type": "Cow.Atom.meta" }, 
                          { "name": "summary",
                            "mutable": false,
                            "type": "Cow.Atom.summary" }, 
                          { "name": "content",
                            "mutable": false,
                            "type": "Cow.Xml.t" } ] } } }, 
              { "type": 
                  { "name": "Cow.Atom.feed",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32432" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "record",
                        "private": "false",
                        "fields": [ 
                          { "name": "feed",
                            "mutable": false,
                            "type": "Cow.Atom.meta" }, 
                          { "name": "entries",
                            "mutable": false,
                            "type": "Cow.Atom.entry list" } ] } } }, 
              { "value": 
                  { "name": "Cow.Atom.xml_of_feed",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32486" },
                    "info": "",
                    "type": "?self:string -> Cow.Atom.feed -> Cow.Xml.t",
                    "params": [ 
                      { "name": "self",
                        "type": "string option" }, 
                      { "name": "",
                        "type": "Cow.Atom.feed" } ] } } ],
            "dependencies": 
              { "uses": [  ] } } }, 
      { "module": 
          { "name": "Cow.Markdown",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32539" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "type": 
                  { "name": "Cow.Markdown.ref",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32568" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "record",
                        "private": "false",
                        "fields": [ 
                          { "name": "src",
                            "mutable": false,
                            "type": "string" }, 
                          { "name": "desc",
                            "mutable": false,
                            "type": "string" } ] } } }, 
              { "type": 
                  { "name": "Cow.Markdown.paragraph",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32612" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "variant",
                        "private": "false",
                        "constructors": [ 
                          { "name": "Normal",
                            "type": [ "Cow.Markdown.par_text" ] }, 
                          { "name": "Html",
                            "type": [ "Cow.Html.t" ] }, 
                          { "name": "Pre",
                            "type": [ "string", "string option" ] }, 
                          { "name": "Heading",
                            "type": [ "int", "Cow.Markdown.par_text" ] }, 
                          { "name": "Quote",
                            "type": [ "Cow.Markdown.paragraph list" ] }, 
                          { "name": "Ulist",
                            "type": [ "Cow.Markdown.paragraph list", "Cow.Markdown.paragraph list list" ] }, 
                          { "name": "Olist",
                            "type": [ "Cow.Markdown.paragraph list", "Cow.Markdown.paragraph list list" ] } ] } } }, 
              { "type": 
                  { "name": "Cow.Markdown.par_text",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32863" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "Cow.Markdown.text list" } }, 
              { "type": 
                  { "name": "Cow.Markdown.text",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|32889" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "variant",
                        "private": "false",
                        "constructors": [ 
                          { "name": "Text",
                            "type": [ "string" ] }, 
                          { "name": "Emph",
                            "type": [ "string" ] }, 
                          { "name": "Bold",
                            "type": [ "string" ] }, 
                          { "name": "Struck",
                            "type": [ "Cow.Markdown.par_text" ] }, 
                          { "name": "Code",
                            "type": [ "string" ] }, 
                          { "name": "Link",
                            "type": [ "Cow.Markdown.href" ] }, 
                          { "name": "Anchor",
                            "type": [ "string" ] }, 
                          { "name": "Image",
                            "type": [ "Cow.Markdown.img_ref" ] } ] } } }, 
              { "type": 
                  { "name": "Cow.Markdown.href",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33059" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "record",
                        "private": "false",
                        "fields": [ 
                          { "name": "href_target",
                            "mutable": false,
                            "type": "string" }, 
                          { "name": "href_desc",
                            "mutable": false,
                            "type": "string" } ] } } }, 
              { "type": 
                  { "name": "Cow.Markdown.img_ref",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33117" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "record",
                        "private": "false",
                        "fields": [ 
                          { "name": "img_src",
                            "mutable": false,
                            "type": "string" }, 
                          { "name": "img_alt",
                            "mutable": false,
                            "type": "string" } ] } } }, 
              { "type": 
                  { "name": "Cow.Markdown.t",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33172" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" },
                    "manifest": "Cow.Markdown.paragraph list" } }, 
              { "value": 
                  { "name": "Cow.Markdown.to_html",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33193" },
                    "info": "",
                    "type": "Cow.Markdown.t -> Cow.Html.t",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Markdown.t" } ] } }, 
              { "value": 
                  { "name": "Cow.Markdown.of_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33220" },
                    "info": "",
                    "type": "string -> Cow.Markdown.t",
                    "params": [ 
                      { "name": "",
                        "type": "string" } ] } } ],
            "dependencies": 
              { "uses": [  ] } } }, 
      { "module": 
          { "name": "Cow.Json",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33252" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "type": 
                  { "name": "Cow.Json.t",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33277" },
                    "info": "",
                    "params": [  ],
                    "kind": 
                      { "type": "variant",
                        "private": "false",
                        "constructors": [ 
                          { "name": "Int",
                            "type": [ "int64" ] }, 
                          { "name": "Bool",
                            "type": [ "bool" ] }, 
                          { "name": "Float",
                            "type": [ "float" ] }, 
                          { "name": "String",
                            "type": [ "string" ] }, 
                          { "name": "Array",
                            "type": [ "Cow.Json.t list" ] }, 
                          { "name": "Object",
                            "type": [ "(string * Cow.Json.t) list" ] }, 
                          { "name": "Null",
                            "type": [  ] } ] } } }, 
              { "value": 
                  { "name": "Cow.Json.to_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33417" },
                    "info": "",
                    "type": "Cow.Json.t -> string",
                    "params": [ 
                      { "name": "",
                        "type": "Cow.Json.t" } ] } }, 
              { "value": 
                  { "name": "Cow.Json.of_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33445" },
                    "info": "",
                    "type": "string -> Cow.Json.t",
                    "params": [ 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "exception": 
                  { "name": "Cow.Json.Runtime_error",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33474" },
                    "info": "",
                    "exception_args": [ "string", "Cow.Json.t" ] } } ],
            "dependencies": 
              { "uses": [  ] } } }, 
      { "module": 
          { "name": "Cow.Twitter",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33516" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "module": 
                  { "name": "Cow.Twitter.User",
                    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33539" },
                    "info": "",
                    "type": "sig  end",
                    "module_structure": [ 
                      { "type": 
                          { "name": "Cow.Twitter.User.t",
                            "location": 
                              { "implementation": "unknown",
                                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33567" },
                            "info": "",
                            "params": [  ],
                            "kind": 
                              { "type": "record",
                                "private": "false",
                                "fields": [ 
                                  { "name": "id_str",
                                    "mutable": false,
                                    "type": "string" }, 
                                  { "name": "screen_name",
                                    "mutable": false,
                                    "type": "string" } ] } } }, 
                      { "value": 
                          { "name": "Cow.Twitter.User.json_of_t",
                            "location": 
                              { "implementation": "unknown",
                                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33631" },
                            "info": "",
                            "type": "Cow.Twitter.User.t -> Cow.Json.t",
                            "params": [ 
                              { "name": "",
                                "type": "Cow.Twitter.User.t" } ] } }, 
                      { "value": 
                          { "name": "Cow.Twitter.User.t_of_json",
                            "location": 
                              { "implementation": "unknown",
                                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33661" },
                            "info": "",
                            "type": "Cow.Json.t -> Cow.Twitter.User.t",
                            "params": [ 
                              { "name": "",
                                "type": "Cow.Json.t" } ] } } ],
                    "dependencies": 
                      { "uses": [  ] } } }, 
              { "module": 
                  { "name": "Cow.Twitter.Status",
                    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33695" },
                    "info": "",
                    "type": "sig  end",
                    "module_structure": [ 
                      { "type": 
                          { "name": "Cow.Twitter.Status.t",
                            "location": 
                              { "implementation": "unknown",
                                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33723" },
                            "info": "",
                            "params": [  ],
                            "kind": 
                              { "type": "record",
                                "private": "false",
                                "fields": [ 
                                  { "name": "id",
                                    "mutable": false,
                                    "type": "int" }, 
                                  { "name": "user",
                                    "mutable": false,
                                    "type": "Cow.Twitter.User.t" }, 
                                  { "name": "text",
                                    "mutable": false,
                                    "type": "string" } ] } } }, 
                      { "value": 
                          { "name": "Cow.Twitter.Status.json_of_t",
                            "location": 
                              { "implementation": "unknown",
                                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33790" },
                            "info": "",
                            "type": "Cow.Twitter.Status.t -> Cow.Json.t",
                            "params": [ 
                              { "name": "",
                                "type": "Cow.Twitter.Status.t" } ] } }, 
                      { "value": 
                          { "name": "Cow.Twitter.Status.t_of_json",
                            "location": 
                              { "implementation": "unknown",
                                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33820" },
                            "info": "",
                            "type": "Cow.Json.t -> Cow.Twitter.Status.t",
                            "params": [ 
                              { "name": "",
                                "type": "Cow.Json.t" } ] } }, 
                      { "value": 
                          { "name": "Cow.Twitter.Status.json_of_t_list",
                            "location": 
                              { "implementation": "unknown",
                                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33851" },
                            "info": "",
                            "type": "Cow.Twitter.Status.t list -> Cow.Json.t",
                            "params": [ 
                              { "name": "",
                                "type": "Cow.Twitter.Status.t list" } ] } }, 
                      { "value": 
                          { "name": "Cow.Twitter.Status.t_list_of_json",
                            "location": 
                              { "implementation": "unknown",
                                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/cow.mli|33891" },
                            "info": "",
                            "type": "Cow.Json.t -> Cow.Twitter.Status.t list",
                            "params": [ 
                              { "name": "",
                                "type": "Cow.Json.t" } ] } } ],
                    "dependencies": 
                      { "uses": [  ] } } } ],
            "dependencies": 
              { "uses": [  ] } } } ],
    "dependencies": 
      { "uses": [ "Buffer", "*predef*" ],
        "used_by": [  ] } } }