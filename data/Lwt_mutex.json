{ "module": 
  { "name": "Lwt_mutex",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli|0" },
    "info": 
      { "description": "Cooperative locks for mutual exclusion" },
    "type": "sig  end",
    "module_structure": [ 
      { "type": 
          { "name": "Lwt_mutex.t",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli|1054" },
            "info": 
              { "description": "Type of Lwt mutexes" },
            "params": [  ],
            "kind": 
              { "type": "abstract" } } }, 
      { "value": 
          { "name": "Lwt_mutex.create",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli|1086" },
            "info": 
              { "description": "<span class=\"code\" >create ()</span> creates a new mutex, which is initially unlocked" },
            "type": "unit -> Lwt_mutex.t",
            "params": [ 
              { "name": "",
                "type": "unit" } ] } }, 
      { "value": 
          { "name": "Lwt_mutex.lock",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli|1180" },
            "info": 
              { "description": "<span class=\"code\" >lock mutex</span> lockcs the mutex, that is:<br></br><ul><li>if the mutex is unlocked, then it is marked as locked and <a href=\"{value|Lwt_mutex.lock}\" ><span class=\"code\" >Lwt_mutex.lock</span></a> returns immediatly</li></ul><ul><li>if it is locked, then <a href=\"{value|Lwt_mutex.lock}\" ><span class=\"code\" >Lwt_mutex.lock</span></a> waits for all threads waiting on the mutex to terminate, then it resumes when the last one unlocks the mutex</li></ul> Note: threads are wake up is the same order they try to lock the mutex" },
            "type": "Lwt_mutex.t -> unit Lwt.t",
            "params": [ 
              { "name": "",
                "type": "Lwt_mutex.t" } ] } }, 
      { "value": 
          { "name": "Lwt_mutex.unlock",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli|1607" },
            "info": 
              { "description": "<span class=\"code\" >unlock mutex</span> unlock the mutex if no threads is waiting on it. Otherwise it removes the first one and resumes it." },
            "type": "Lwt_mutex.t -> unit",
            "params": [ 
              { "name": "",
                "type": "Lwt_mutex.t" } ] } }, 
      { "value": 
          { "name": "Lwt_mutex.is_locked",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli|1761" },
            "info": 
              { "description": "<span class=\"code\" >locked mutex</span> returns whether <span class=\"code\" >mutex</span> is currently locked" },
            "type": "Lwt_mutex.t -> bool",
            "params": [ 
              { "name": "",
                "type": "Lwt_mutex.t" } ] } }, 
      { "value": 
          { "name": "Lwt_mutex.is_empty",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli|1856" },
            "info": 
              { "description": "<span class=\"code\" >is_empty mutex</span> returns <span class=\"code\" >true</span> if they are no thread waiting on the mutex, and <span class=\"code\" >false</span> otherwise" },
            "type": "Lwt_mutex.t -> bool",
            "params": [ 
              { "name": "",
                "type": "Lwt_mutex.t" } ] } }, 
      { "value": 
          { "name": "Lwt_mutex.with_lock",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_mutex.mli|1995" },
            "info": 
              { "description": "<span class=\"code\" >with_lock lock f</span> is used to lock a mutex within a block scope. The function <span class=\"code\" >f ()</span> is called with the mutex locked, and its result is returned from the call to <div class=\"with\" >_lock</div>. If an exception is raised from f, the mutex is also unlocked before the scope of <div class=\"with\" >_lock</div> is exited." },
            "type": "Lwt_mutex.t -> (unit -> 'a Lwt.t) -> 'a Lwt.t",
            "params": [ 
              { "name": "",
                "type": "Lwt_mutex.t" }, 
              { "name": "",
                "type": "unit -> 'a Lwt.t" } ] } } ],
    "dependencies": 
      { "uses": [ "Lwt" ],
        "used_by": [ "Lwt_condition" ] } } }