{ "module": 
  { "name": "Lwt_switch",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|0" },
    "info": 
      { "description": "Lwt switches" },
    "type": "sig  end",
    "module_structure": [ 
      { "comment": "Switch have two goals:<br></br><ul><li>being able to free multiple resources at the same time,</li><li>offer a better alternative than always returning an id to free some resource.</li></ul> For example, considers the following interface:<br></br> <span class=\"codepre\" > type id val free : id -&gt; unit Lwt.t val f : unit -&gt; id Lwt.t val g : unit -&gt; id Lwt.t val h : unit -&gt; id Lwt.t </span><br></br> Now you want to calls <span class=\"code\" >f</span>, <span class=\"code\" >g</span> and <span class=\"code\" >h</span> in parallel. You can simply do:<br></br> <span class=\"codepre\" > lwt idf = f () and idg = g () and idh = h () in ... </span><br></br> However, one may wants to handle possible failures of <span class=\"code\" >f ()</span>, <span class=\"code\" >g ()</span> and <span class=\"code\" >h ()</span>, and disable all allocated resources if one of these three threads fails. This may be hard since you have to remember which one failed and which one returned correctly.<br></br> Now we change a little bit the interface:<br></br> <span class=\"codepre\" > val f : ?switch : Lwt_switch.t -&gt; unit -&gt; id Lwt.t val g : ?switch : Lwt_switch.t -&gt; unit -&gt; id Lwt.t val h : ?switch : Lwt_switch.t -&gt; unit -&gt; id Lwt.t </span><br></br> and the code becomes:<br></br> <span class=\"codepre\" > let switch = Lwt_switch.create () in try_lwt lwt idf = f ~switch () and idg = g ~switch () and idh = h ~switch () in ... with exn -&gt; lwt () = Lwt_switch.turn_off switch in raise_lwt exn </span>" }, 
      { "type": 
          { "name": "Lwt_switch.t",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|2306" },
            "info": 
              { "description": "Type of switches." },
            "params": [  ],
            "kind": 
              { "type": "abstract" } } }, 
      { "value": 
          { "name": "Lwt_switch.create",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|2336" },
            "info": 
              { "description": "<span class=\"code\" >create ()</span> creates a new switch." },
            "type": "unit -> Lwt_switch.t",
            "params": [ 
              { "name": "",
                "type": "unit" } ] } }, 
      { "value": 
          { "name": "Lwt_switch.is_on",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|2403" },
            "info": 
              { "description": "<span class=\"code\" >is_on switch</span> returns <span class=\"code\" >true</span> if the switch is currently on, and <span class=\"code\" >false</span> otherwise." },
            "type": "Lwt_switch.t -> bool",
            "params": [ 
              { "name": "",
                "type": "Lwt_switch.t" } ] } }, 
      { "value": 
          { "name": "Lwt_switch.turn_off",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|2525" },
            "info": 
              { "description": "<span class=\"code\" >turn_off switch</span> turns off the switch. It calls all registered hooks, waits for all of them to terminates, and the returns. If one of the hook failed, then it will fail with one of the exception raised by hooks. If the switch is already off, then it does nothing." },
            "type": "Lwt_switch.t -> unit Lwt.t",
            "params": [ 
              { "name": "",
                "type": "Lwt_switch.t" } ] } }, 
      { "exception": 
          { "name": "Lwt_switch.Off",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|2855" },
            "info": 
              { "description": "Exception raised when trying to add a hook to a switch that is already off." } } }, 
      { "value": 
          { "name": "Lwt_switch.check",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|2961" },
            "info": 
              { "description": "<span class=\"code\" >check switch</span> does nothing if <span class=\"code\" >switch</span> is <span class=\"code\" >None</span> or contains an switch that is currently on, and raise <a href=\"{exception|Lwt_switch.Off}\" ><span class=\"code\" >Lwt_switch.Off</span></a> otherwise." },
            "type": "Lwt_switch.t option -> unit",
            "params": [ 
              { "name": "",
                "type": "Lwt_switch.t option" } ] } }, 
      { "value": 
          { "name": "Lwt_switch.add_hook",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|3128" },
            "info": 
              { "description": "<span class=\"code\" >add_hook switch f</span> registers <span class=\"code\" >f</span> so it will be called when <a href=\"{value|Lwt_switch.turn_off}\" ><span class=\"code\" >Lwt_switch.turn_off</span></a> is invoked. It does nothing if <span class=\"code\" >switch</span> is <span class=\"code\" >None</span>. If <span class=\"code\" >switch</span> contains an switch that is already off then <a href=\"{exception|Lwt_switch.Off}\" ><span class=\"code\" >Lwt_switch.Off</span></a> is raised." },
            "type": "Lwt_switch.t option -> (unit -> unit Lwt.t) -> unit",
            "params": [ 
              { "name": "",
                "type": "Lwt_switch.t option" }, 
              { "name": "",
                "type": "unit -> unit Lwt.t" } ] } }, 
      { "value": 
          { "name": "Lwt_switch.add_hook_or_exec",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_switch.mli|3409" },
            "info": 
              { "description": "<span class=\"code\" >add_hook_or_exec switch f</span> is the same as <a href=\"{value|Lwt_switch.add_hook}\" ><span class=\"code\" >Lwt_switch.add_hook</span></a> except that if the switch is already off, then <span class=\"code\" >f</span> is called immediatly." },
            "type": "Lwt_switch.t option -> (unit -> unit Lwt.t) -> unit Lwt.t",
            "params": [ 
              { "name": "",
                "type": "Lwt_switch.t option" }, 
              { "name": "",
                "type": "unit -> unit Lwt.t" } ] } } ],
    "dependencies": 
      { "uses": [ "Lwt" ],
        "used_by": [  ] } } }