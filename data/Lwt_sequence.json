{ "module": 
  { "name": "Lwt_sequence",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|0" },
    "info": 
      { "description": "Mutable sequence of elements" },
    "type": "sig  end",
    "module_structure": [ 
      { "comment": "A sequence is an object holding a list of elements which support the following operations:<br></br><ul><li>adding an element to the left or the right in time and space O(1)</li><li>taking an element from the left or the right in time and space O(1)</li><li>removing a previously added element from a sequence in time and space O(1)</li><li>removing an element while the sequence is being transversed.</li></ul>" }, 
      { "type": 
          { "name": "Lwt_sequence.t",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|1389" },
            "info": 
              { "description": "Type of a sequence holding values of type <span class=\"code\" >'a</span>" },
            "params": [ 
              { "covariant": "true",
                "contravariant": "true",
                "type": "'a" } ],
            "kind": 
              { "type": "abstract" } } }, 
      { "type": 
          { "name": "Lwt_sequence.node",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|1456" },
            "info": 
              { "description": "Type of a node holding one value of type <span class=\"code\" >'a</span> in a sequence" },
            "params": [ 
              { "covariant": "true",
                "contravariant": "true",
                "type": "'b" } ],
            "kind": 
              { "type": "abstract" } } }, 
      { "comment": "<h6>Operation on nodes</h6>" }, 
      { "value": 
          { "name": "Lwt_sequence.get",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|1566" },
            "info": 
              { "description": "Returns the contents of a node" },
            "type": "'a Lwt_sequence.node -> 'a",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.node" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.set",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|1631" },
            "info": 
              { "description": "Change the contents of a node" },
            "type": "'a Lwt_sequence.node -> 'a -> unit",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.node" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.remove",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|1703" },
            "info": 
              { "description": "Removes a node from the sequence it is part of. It does nothing if the node has already been removed." },
            "type": "'a Lwt_sequence.node -> unit",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.node" } ] } }, 
      { "comment": "<h6>Operations on sequence</h6>" }, 
      { "value": 
          { "name": "Lwt_sequence.create",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|1885" },
            "info": 
              { "description": "<span class=\"code\" >create ()</span> creates a new empty sequence" },
            "type": "unit -> 'a Lwt_sequence.t",
            "params": [ 
              { "name": "",
                "type": "unit" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.is_empty",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|1962" },
            "info": 
              { "description": "Returns <span class=\"code\" >true</span> iff the given sequence is empty" },
            "type": "'a Lwt_sequence.t -> bool",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.length",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|2047" },
            "info": 
              { "description": "Returns the number of elemenets in the given sequence. This is a O(n) operation where <span class=\"code\" >n</span> is the number of elements in the sequence." },
            "type": "'a Lwt_sequence.t -> int",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.add_l",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|2227" },
            "info": 
              { "description": "<span class=\"code\" >add_l x s</span> adds <span class=\"code\" >x</span> to the left of the sequence <span class=\"code\" >s</span>" },
            "type": "'a -> 'a Lwt_sequence.t -> 'a Lwt_sequence.node",
            "params": [ 
              { "name": "",
                "type": "'a" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.add_r",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|2324" },
            "info": 
              { "description": "<span class=\"code\" >add_l x s</span> adds <span class=\"code\" >x</span> to the right of the sequence <span class=\"code\" >s</span>" },
            "type": "'a -> 'a Lwt_sequence.t -> 'a Lwt_sequence.node",
            "params": [ 
              { "name": "",
                "type": "'a" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "exception": 
          { "name": "Lwt_sequence.Empty",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|2422" },
            "info": 
              { "description": "Exception raised by <span class=\"code\" >take_l</span> and <span class=\"code\" >tale_s</span> and when the sequence is empty" } } }, 
      { "value": 
          { "name": "Lwt_sequence.take_l",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|2527" },
            "info": 
              { "description": "<span class=\"code\" >take_l x s</span> remove and returns the leftmost element of <span class=\"code\" >s</span>",
                "raised_exceptions": [ 
                  { "raised_exception": "Empty",
                    "text": "if the sequence is empty" } ] },
            "type": "'a Lwt_sequence.t -> 'a",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.take_r",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|2666" },
            "info": 
              { "description": "<span class=\"code\" >take_l x s</span> remove and returns the rightmost element of <span class=\"code\" >s</span>",
                "raised_exceptions": [ 
                  { "raised_exception": "Empty",
                    "text": "if the sequence is empty" } ] },
            "type": "'a Lwt_sequence.t -> 'a",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.take_opt_l",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|2806" },
            "info": 
              { "description": "<span class=\"code\" >take_opt_l x s</span> remove and returns <span class=\"code\" >Some x</span> where <span class=\"code\" >x</span> is the leftmost element of <span class=\"code\" >s</span> or <span class=\"code\" >None</span> if <span class=\"code\" >s</span> is empty" },
            "type": "'a Lwt_sequence.t -> 'a option",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.take_opt_r",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|2969" },
            "info": 
              { "description": "<span class=\"code\" >take_opt_l x s</span> remove and returns <span class=\"code\" >Some x</span> where <span class=\"code\" >x</span> is the rightmost element of <span class=\"code\" >s</span> or <span class=\"code\" >None</span> if <span class=\"code\" >s</span> is empty" },
            "type": "'a Lwt_sequence.t -> 'a option",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.transfer_l",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|3133" },
            "info": 
              { "description": "<span class=\"code\" >transfer_l s1 s2</span> removes all elements of <span class=\"code\" >s1</span> and add them at the left of <span class=\"code\" >s2</span>. This operation runs in constant time and space." },
            "type": "'a Lwt_sequence.t -> 'a Lwt_sequence.t -> unit",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.t" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.transfer_r",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|3323" },
            "info": 
              { "description": "<span class=\"code\" >transfer_r s1 s2</span> removes all elements of <span class=\"code\" >s1</span> and add them at the right of <span class=\"code\" >s2</span>. This operation runs in constant time and space." },
            "type": "'a Lwt_sequence.t -> 'a Lwt_sequence.t -> unit",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.t" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "comment": "<h6>Sequence iterators</h6>" }, 
      { "comment": "Note: it is OK to remove a node while traversing a sequence" }, 
      { "value": 
          { "name": "Lwt_sequence.iter_l",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|3613" },
            "info": 
              { "description": "<span class=\"code\" >iter_l f s</span> applies <span class=\"code\" >f</span> on all elements of <span class=\"code\" >s</span> starting from the left" },
            "type": "('a -> unit) -> 'a Lwt_sequence.t -> unit",
            "params": [ 
              { "name": "",
                "type": "'a -> unit" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.iter_r",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|3742" },
            "info": 
              { "description": "<span class=\"code\" >iter_l f s</span> applies <span class=\"code\" >f</span> on all elements of <span class=\"code\" >s</span> starting from the right" },
            "type": "('a -> unit) -> 'a Lwt_sequence.t -> unit",
            "params": [ 
              { "name": "",
                "type": "'a -> unit" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.iter_node_l",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|3872" },
            "info": 
              { "description": "<span class=\"code\" >iter_l f s</span> applies <span class=\"code\" >f</span> on all nodes of <span class=\"code\" >s</span> starting from the left" },
            "type": "('a Lwt_sequence.node -> unit) -> 'a Lwt_sequence.t -> unit",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.node -> unit" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.iter_node_r",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|4008" },
            "info": 
              { "description": "<span class=\"code\" >iter_l f s</span> applies <span class=\"code\" >f</span> on all nodes of <span class=\"code\" >s</span> starting from the right" },
            "type": "('a Lwt_sequence.node -> unit) -> 'a Lwt_sequence.t -> unit",
            "params": [ 
              { "name": "",
                "type": "'a Lwt_sequence.node -> unit" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.fold_l",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|4145" },
            "info": 
              { "description": "<span class=\"code\" >fold_l f s</span> is: <span class=\"codepre\" > fold_l f s x = f en (... (f e2 (f e1 x))) </span> where <span class=\"code\" >e1</span>, <span class=\"code\" >e2</span>, ..., <span class=\"code\" >en</span> are the elements of <span class=\"code\" >s</span>" },
            "type": "('a -> 'b -> 'b) -> 'a Lwt_sequence.t -> 'b -> 'b",
            "params": [ 
              { "name": "",
                "type": "'a -> 'b -> 'b" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" }, 
              { "name": "",
                "type": "'a" } ] } }, 
      { "value": 
          { "name": "Lwt_sequence.fold_r",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/lwt_sequence.mli|4350" },
            "info": 
              { "description": "<span class=\"code\" >fold_r f s</span> is: <span class=\"codepre\" > fold_r f s x = f e1 (f e2 (... (f en x))) </span> where <span class=\"code\" >e1</span>, <span class=\"code\" >e2</span>, ..., <span class=\"code\" >en</span> are the elements of <span class=\"code\" >s</span>" },
            "type": "('a -> 'b -> 'b) -> 'a Lwt_sequence.t -> 'b -> 'b",
            "params": [ 
              { "name": "",
                "type": "'a -> 'b -> 'b" }, 
              { "name": "",
                "type": "'a Lwt_sequence.t" }, 
              { "name": "",
                "type": "'a" } ] } } ],
    "dependencies": 
      { "uses": [  ],
        "used_by": [  ] } } }