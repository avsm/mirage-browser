{ "module": 
  { "name": "Regexp",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|0" },
    "info": 
      { "description": "This module can be safely open for it only contains a module <span class=\"code\" >Re</span>." },
    "type": "sig  end",
    "module_structure": [ 
      { "module": 
          { "name": "Regexp.Re",
            "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|73" },
            "info": "",
            "type": "sig  end",
            "module_structure": [ 
              { "comment": "This module provides functions for creating and using Regular Expression.<br></br> It is in pure OCaml (unlike Pcre_Ocaml) and thus more portable. It is reentrant (unlike Str) but not thread-safe in case of preemptive schedulling." }, 
              { "comment": "# Basic regexps." }, 
              { "type": 
                  { "name": "Regexp.Re.regexp",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|387" },
                    "info": 
                      { "description": "The type of regexps." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" } } }, 
              { "comment": "## Regexp constructors." }, 
              { "comment": "### Functional constructors." }, 
              { "value": 
                  { "name": "Regexp.Re.empty",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|510" },
                    "info": 
                      { "description": "The regexp denoting the absence of word." },
                    "type": "Regexp.Re.regexp",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Regexp.Re.epsilon",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|572" },
                    "info": 
                      { "description": "The regexp denoting the empty word." },
                    "type": "Regexp.Re.regexp",
                    "params": [  ] } }, 
              { "value": 
                  { "name": "Regexp.Re.char",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|639" },
                    "info": 
                      { "description": "The regexp matching a given character." },
                    "type": "char -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "char" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.char_interv",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|747" },
                    "info": 
                      { "description": "The regexp matching any character in the given range. Bounds are included." },
                    "type": "char -> char -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "char" }, 
                      { "name": "",
                        "type": "char" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|839" },
                    "info": 
                      { "description": "The regexp matching the exact given string." },
                    "type": "string -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.star",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|945" },
                    "info": 
                      { "description": "The regexp matching 0 or more words recognized by the given regexp." },
                    "type": "Regexp.Re.regexp -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.regexp" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.alt",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|1050" },
                    "info": 
                      { "description": "The regexp matching words matched by either one of the given regexps." },
                    "type": "Regexp.Re.regexp -> Regexp.Re.regexp -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.regexp" }, 
                      { "name": "",
                        "type": "Regexp.Re.regexp" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.seq",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|1191" },
                    "info": 
                      { "description": "The regexp matching the concatenation of two words matched by each one of the given regexps." },
                    "type": "Regexp.Re.regexp -> Regexp.Re.regexp -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.regexp" }, 
                      { "name": "",
                        "type": "Regexp.Re.regexp" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.opt",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|1296" },
                    "info": 
                      { "description": "The regexp matching 0 or 1 word matched by the given regexp." },
                    "type": "Regexp.Re.regexp -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.regexp" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.some",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|1395" },
                    "info": 
                      { "description": "The regexp matching 1 or more words matched by the given regexp." },
                    "type": "Regexp.Re.regexp -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.regexp" } ] } }, 
              { "comment": "### Parsing constructor." }, 
              { "value": 
                  { "name": "Regexp.Re.from_string_raw",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|1620" },
                    "info": 
                      { "description": "<span class=\"code\" >from_string_raw s</span> parses the string <span class=\"code\" >s</span> and returns the associated regexp.<br></br> The following constructions can be used in the given string: TODO" },
                    "type": "string -> Regexp.Re.regexp",
                    "params": [ 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "comment": "# Regexp compilation." }, 
              { "comment": "In order to improve the efficiency of regexps, they are compiled to a different internal representation." }, 
              { "type": 
                  { "name": "Regexp.Re.compiled_regexp",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|1849" },
                    "info": 
                      { "description": "The type of compiled regexps." },
                    "params": [  ],
                    "kind": 
                      { "type": "abstract" } } }, 
              { "comment": "## Constructors for compiled regexps." }, 
              { "value": 
                  { "name": "Regexp.Re.compile",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|1958" },
                    "info": 
                      { "description": "<span class=\"code\" >compile re</span> compiles the regexp <span class=\"code\" >re</span>." },
                    "type": "Regexp.Re.regexp -> Regexp.Re.compiled_regexp",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.regexp" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.from_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|2055" },
                    "info": 
                      { "description": "<span class=\"code\" >from_string s</span> is <span class=\"code\" >compile (from_string_raw s)</span>." },
                    "type": "string -> Regexp.Re.compiled_regexp",
                    "params": [ 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "comment": "# Regexp usage." }, 
              { "value": 
                  { "name": "Regexp.Re.search_forward",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|2439" },
                    "info": 
                      { "description": "<span class=\"code\" >search_forward cre s i</span> evaluates either to <span class=\"code\" >Some (b, e)</span> is <span class=\"code\" >String.sub s b (e - b)</span> is matched by <span class=\"code\" >cre</span> (with <span class=\"code\" >b &gt;= i</span> or <span class=\"code\" >None</span> if no such tuple exists. In other words, <span class=\"code\" >(e, b)</span> are the inclusive begining and exclusive ending offset of a word of <span class=\"code\" >s</span> starting from <span class=\"code\" >i</span> matched by <span class=\"code\" >cre</span>." },
                    "type": "Regexp.Re.compiled_regexp -> string -> int -> (int * int) option",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.compiled_regexp" }, 
                      { "name": "",
                        "type": "string" }, 
                      { "name": "",
                        "type": "int" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.match_string",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|2659" },
                    "info": 
                      { "description": "<span class=\"code\" >match_string cre s i</span> evaluates to either <span class=\"code\" >Some e</span> if <span class=\"code\" >String.sub s i (e - i)</span> is matched by <span class=\"code\" >cre</span> or <span class=\"code\" >None</span> if no such <span class=\"code\" >e</span> exists." },
                    "type": "Regexp.Re.compiled_regexp -> string -> int -> int option",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.compiled_regexp" }, 
                      { "name": "",
                        "type": "string" }, 
                      { "name": "",
                        "type": "int" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.list_matches",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|2924" },
                    "info": 
                      { "description": "<span class=\"code\" >list_matches cre s</span> evaluates to a list of strings in which each element is a sub-string of <span class=\"code\" >s</span> matched by <span class=\"code\" >cre</span>. None of the sub-string overlap. Moreover, they are of maximal size." },
                    "type": "Regexp.Re.compiled_regexp -> string -> string list",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.compiled_regexp" }, 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.split_delim",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|3217" },
                    "info": 
                      { "description": "<span class=\"code\" >split_delim cre s</span> evaluates to a list of string in which each element is a sub-string of the original one. Each two consecutive elements of the list of sub-string was, in <span class=\"code\" >s</span> separated by a word matched by <span class=\"code\" >cre</span>." },
                    "type": "Regexp.Re.compiled_regexp -> string -> string list",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.compiled_regexp" }, 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.replace",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|3356" },
                    "info": 
                      { "description": "<span class=\"code\" >replace cre s by</span> replaces sub-strings of <span class=\"code\" >s</span> matched by <span class=\"code\" >cre</span> by <span class=\"code\" >by</span>." },
                    "type": "Regexp.Re.compiled_regexp -> string -> string -> string",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.compiled_regexp" }, 
                      { "name": "",
                        "type": "string" }, 
                      { "name": "",
                        "type": "string" } ] } }, 
              { "value": 
                  { "name": "Regexp.Re.substitute",
                    "location": 
                      { "implementation": "unknown",
                        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/regexp.mli|3541" },
                    "info": 
                      { "description": "<span class=\"code\" >substitute cre s map</span> substitutes sub-strings of <span class=\"code\" >s</span> matched by <span class=\"code\" >cre</span> by <span class=\"code\" >map w</span> where <span class=\"code\" >w</span> is the matched word." },
                    "type": "Regexp.Re.compiled_regexp -> string -> (string -> string) -> string",
                    "params": [ 
                      { "name": "",
                        "type": "Regexp.Re.compiled_regexp" }, 
                      { "name": "",
                        "type": "string" }, 
                      { "name": "",
                        "type": "string -> string" } ] } } ],
            "dependencies": 
              { "uses": [  ] } } } ],
    "dependencies": 
      { "uses": [  ],
        "used_by": [  ] } } }