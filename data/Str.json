{ "module": 
  { "name": "Str",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|0" },
    "info": 
      { "description": "Regular expressions and high-level string processing" },
    "type": "sig  end",
    "module_structure": [ 
      { "comment": "<h6>Regular expressions</h6>" }, 
      { "type": 
          { "name": "Str.regexp",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|1045" },
            "info": 
              { "description": "The type of compiled regular expressions." },
            "params": [  ],
            "kind": 
              { "type": "abstract" } } }, 
      { "value": 
          { "name": "Str.regexp",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|1103" },
            "info": 
              { "description": "Compile a regular expression. The following constructs are recognized:<ul><li><span class=\"code\" >.     </span> Matches any character except newline.</li><li><span class=\"code\" ></span> (postfix) Matches the preceding expression zero, one or several times</li><li><span class=\"code\" >+     </span> (postfix) Matches the preceding expression one or several times</li><li><span class=\"code\" >?     </span> (postfix) Matches the preceding expression once or not at all</li><li><span class=\"code\" >[..]  </span> Character set. Ranges are denoted with <span class=\"code\" >-</span>, as in <span class=\"code\" >[a-z]</span>. An initial <span class=\"code\" >^</span>, as in <span class=\"code\" >[^0-9]</span>, complements the set. To include a <span class=\"code\" >]</span> character in a set, make it the first character of the set. To include a <span class=\"code\" >-</span> character in a set, make it the first or the last character of the set.</li><li><span class=\"code\" >^     </span> Matches at beginning of line (either at the beginning of the matched string, or just after a newline character).</li><li><span class=\"code\" >$     </span> Matches at end of line (either at the end of the matched string, or just before a newline character).</li><li><span class=\"code\" >\\|    </span> (infix) Alternative between two expressions.</li><li><span class=\"code\" >\\(..\\)</span> Grouping and naming of the enclosed expression.</li><li><span class=\"code\" >\\1    </span> The text matched by the first <span class=\"code\" >\\(...\\)</span> expression (<span class=\"code\" >\\2</span> for the second expression, and so on up to <span class=\"code\" >\\9</span>).</li><li><span class=\"code\" >\\b    </span> Matches word boundaries.</li><li><span class=\"code\" >\\     </span> Quotes special characters.  The special characters are <span class=\"code\" >$^.*+?[]</span>.</li></ul>" },
            "type": "string -> Str.regexp",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.regexp_case_fold",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|2549" },
            "info": 
              { "description": "Same as <span class=\"code\" >regexp</span>, but the compiled expression will match text in a case-insensitive way: uppercase and lowercase letters will be considered equivalent." },
            "type": "string -> Str.regexp",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.quote",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|2757" },
            "info": 
              { "description": "<span class=\"code\" >Str.quote s</span> returns a regexp string that matches exactly <span class=\"code\" >s</span> and nothing else." },
            "type": "string -> string",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.regexp_string",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|2878" },
            "info": 
              { "description": "<span class=\"code\" >Str.regexp_string s</span> returns a regular expression that matches exactly <span class=\"code\" >s</span> and nothing else." },
            "type": "string -> Str.regexp",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.regexp_string_case_fold",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|3019" },
            "info": 
              { "description": "<span class=\"code\" >Str.regexp_string_case_fold</span> is similar to <a href=\"{value|Str.regexp_string}\" ><span class=\"code\" >Str.regexp_string</span></a>, but the regexp matches in a case-insensitive way." },
            "type": "string -> Str.regexp",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "comment": "<h6>String matching and searching</h6>" }, 
      { "value": 
          { "name": "Str.string_match",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|3237" },
            "info": 
              { "description": "<span class=\"code\" >string_match r s start</span> tests whether a substring of <span class=\"code\" >s</span> that starts at position <span class=\"code\" >start</span> matches the regular expression <span class=\"code\" >r</span>. The first character of a string has position <span class=\"code\" >0</span>, as usual." },
            "type": "Str.regexp -> string -> int -> bool",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.search_forward",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|3488" },
            "info": 
              { "description": "<span class=\"code\" >search_forward r s start</span> searches the string <span class=\"code\" >s</span> for a substring matching the regular expression <span class=\"code\" >r</span>. The search starts at position <span class=\"code\" >start</span> and proceeds towards the end of the string. Return the position of the first character of the matched substring, or raise <span class=\"code\" >Not_found</span> if no substring matches." },
            "type": "Str.regexp -> string -> int -> int",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.search_backward",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|3861" },
            "info": 
              { "description": "<span class=\"code\" >search_backward r s last</span> searches the string <span class=\"code\" >s</span> for a substring matching the regular expression <span class=\"code\" >r</span>. The search first considers substrings that start at position <span class=\"code\" >last</span> and proceeds towards the beginning of string. Return the position of the first character of the matched substring; raise <span class=\"code\" >Not_found</span> if no substring matches." },
            "type": "Str.regexp -> string -> int -> int",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.string_partial_match",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|4262" },
            "info": 
              { "description": "Similar to <a href=\"{value|Str.string_match}\" ><span class=\"code\" >Str.string_match</span></a>, but also returns true if the argument string is a prefix of a string that matches. This includes the case of a true complete match." },
            "type": "Str.regexp -> string -> int -> bool",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.matched_string",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|4499" },
            "info": 
              { "description": "<span class=\"code\" >matched_string s</span> returns the substring of <span class=\"code\" >s</span> that was matched by the latest <a href=\"{value|Str.string_match}\" ><span class=\"code\" >Str.string_match</span></a>, <a href=\"{value|Str.search_forward}\" ><span class=\"code\" >Str.search_forward</span></a> or <a href=\"{value|Str.search_backward}\" ><span class=\"code\" >Str.search_backward</span></a>. The user must make sure that the parameter <span class=\"code\" >s</span> is the same string that was passed to the matching or searching function." },
            "type": "string -> string",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.match_beginning",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|4827" },
            "info": 
              { "description": "<span class=\"code\" >match_beginning()</span> returns the position of the first character of the substring that was matched by <a href=\"{value|Str.string_match}\" ><span class=\"code\" >Str.string_match</span></a>, <a href=\"{value|Str.search_forward}\" ><span class=\"code\" >Str.search_forward</span></a> or <a href=\"{value|Str.search_backward}\" ><span class=\"code\" >Str.search_backward</span></a>." },
            "type": "unit -> int",
            "params": [ 
              { "name": "",
                "type": "unit" } ] } }, 
      { "value": 
          { "name": "Str.match_end",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|5046" },
            "info": 
              { "description": "<span class=\"code\" >match_end()</span> returns the position of the character following the last character of the substring that was matched by <span class=\"code\" >string_match</span>, <span class=\"code\" >search_forward</span> or <span class=\"code\" >search_backward</span>." },
            "type": "unit -> int",
            "params": [ 
              { "name": "",
                "type": "unit" } ] } }, 
      { "value": 
          { "name": "Str.matched_group",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|5261" },
            "info": 
              { "description": "<span class=\"code\" >matched_group n s</span> returns the substring of <span class=\"code\" >s</span> that was matched by the <span class=\"code\" >n</span>th group <span class=\"code\" >\\(...\\)</span> of the regular expression during the latest <a href=\"{value|Str.string_match}\" ><span class=\"code\" >Str.string_match</span></a>, <a href=\"{value|Str.search_forward}\" ><span class=\"code\" >Str.search_forward</span></a> or <a href=\"{value|Str.search_backward}\" ><span class=\"code\" >Str.search_backward</span></a>. The user must make sure that the parameter <span class=\"code\" >s</span> is the same string that was passed to the matching or searching function. <span class=\"code\" >matched_group n s</span> raises <span class=\"code\" >Not_found</span> if the <span class=\"code\" >n</span>th group of the regular expression was not matched.  This can happen with groups inside alternatives <span class=\"code\" >\\|</span>, options <span class=\"code\" >?</span> or repetitions <span class=\"code\" ></span>.  For instance, the empty string will match <span class=\"code\" >\\(a\\)*</span>, but <span class=\"code\" >matched_group 1 \"\"</span> will raise <span class=\"code\" >Not_found</span> because the first group itself was not matched." },
            "type": "int -> string -> string",
            "params": [ 
              { "name": "",
                "type": "int" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.group_beginning",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|6013" },
            "info": 
              { "description": "<span class=\"code\" >group_beginning n</span> returns the position of the first character of the substring that was matched by the <span class=\"code\" >n</span>th group of the regular expression.",
                "raised_exceptions": [ 
                  { "raised_exception": "Not_found",
                    "text": "if the <span class=\"code\" >n</span>th group of the regular expression was not matched." }, 
                  { "raised_exception": "Invalid_argument",
                    "text": "if there are fewer than <span class=\"code\" >n</span> groups in the regular expression." } ] },
            "type": "int -> int",
            "params": [ 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.group_end",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|6381" },
            "info": 
              { "description": "<span class=\"code\" >group_end n</span> returns the position of the character following the last character of substring that was matched by the <span class=\"code\" >n</span>th group of the regular expression.",
                "raised_exceptions": [ 
                  { "raised_exception": "Not_found",
                    "text": "if the <span class=\"code\" >n</span>th group of the regular expression was not matched." }, 
                  { "raised_exception": "Invalid_argument",
                    "text": "if there are fewer than <span class=\"code\" >n</span> groups in the regular expression." } ] },
            "type": "int -> int",
            "params": [ 
              { "name": "",
                "type": "int" } ] } }, 
      { "comment": "<h6>Replacement</h6>" }, 
      { "value": 
          { "name": "Str.global_replace",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|6782" },
            "info": 
              { "description": "<span class=\"code\" >global_replace regexp templ s</span> returns a string identical to <span class=\"code\" >s</span>, except that all substrings of <span class=\"code\" >s</span> that match <span class=\"code\" >regexp</span> have been replaced by <span class=\"code\" >templ</span>. The replacement template <span class=\"code\" >templ</span> can contain <span class=\"code\" >\\1</span>, <span class=\"code\" >\\2</span>, etc; these sequences will be replaced by the text matched by the corresponding group in the regular expression. <span class=\"code\" >\\0</span> stands for the text matched by the whole regular expression." },
            "type": "Str.regexp -> string -> string -> string",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.replace_first",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|7250" },
            "info": 
              { "description": "Same as <a href=\"{value|Str.global_replace}\" ><span class=\"code\" >Str.global_replace</span></a>, except that only the first substring matching the regular expression is replaced." },
            "type": "Str.regexp -> string -> string -> string",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.global_substitute",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|7431" },
            "info": 
              { "description": "<span class=\"code\" >global_substitute regexp subst s</span> returns a string identical to <span class=\"code\" >s</span>, except that all substrings of <span class=\"code\" >s</span> that match <span class=\"code\" >regexp</span> have been replaced by the result of function <span class=\"code\" >subst</span>. The function <span class=\"code\" >subst</span> is called once for each matching substring, and receives <span class=\"code\" >s</span> (the whole text) as argument." },
            "type": "Str.regexp -> (string -> string) -> string -> string",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string -> string" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.substitute_first",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|7814" },
            "info": 
              { "description": "Same as <a href=\"{value|Str.global_substitute}\" ><span class=\"code\" >Str.global_substitute</span></a>, except that only the first substring matching the regular expression is replaced." },
            "type": "Str.regexp -> (string -> string) -> string -> string",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string -> string" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.replace_matched",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|8013" },
            "info": 
              { "description": "<span class=\"code\" >replace_matched repl s</span> returns the replacement text <span class=\"code\" >repl</span> in which <span class=\"code\" >\\1</span>, <span class=\"code\" >\\2</span>, etc. have been replaced by the text matched by the corresponding groups in the most recent matching operation.  <span class=\"code\" >s</span> must be the same string that was matched during this matching operation." },
            "type": "string -> string -> string",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "comment": "<h6>Splitting</h6>" }, 
      { "value": 
          { "name": "Str.split",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|8377" },
            "info": 
              { "description": "<span class=\"code\" >split r s</span> splits <span class=\"code\" >s</span> into substrings, taking as delimiters the substrings that match <span class=\"code\" >r</span>, and returns the list of substrings. For instance, <span class=\"code\" >split (regexp \"[ \\t]+\") s</span> splits <span class=\"code\" >s</span> into blank-separated words.  An occurrence of the delimiter at the beginning and at the end of the string is ignored." },
            "type": "Str.regexp -> string -> string list",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.bounded_split",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|8740" },
            "info": 
              { "description": "Same as <a href=\"{value|Str.split}\" ><span class=\"code\" >Str.split</span></a>, but splits into at most <span class=\"code\" >n</span> substrings, where <span class=\"code\" >n</span> is the extra integer parameter." },
            "type": "Str.regexp -> string -> int -> string list",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.split_delim",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|8914" },
            "info": 
              { "description": "Same as <a href=\"{value|Str.split}\" ><span class=\"code\" >Str.split</span></a> but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. For instance, <span class=\"code\" >split_delim (regexp \" \") \" abc \"</span> returns <span class=\"code\" >[\"\"; \"abc\"; \"\"]</span>, while <span class=\"code\" >split</span> with the same arguments returns <span class=\"code\" >[\"abc\"]</span>." },
            "type": "Str.regexp -> string -> string list",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.bounded_split_delim",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|9280" },
            "info": 
              { "description": "Same as <a href=\"{value|Str.bounded_split}\" ><span class=\"code\" >Str.bounded_split</span></a>, but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result." },
            "type": "Str.regexp -> string -> int -> string list",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "type": 
          { "name": "Str.split_result",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|9533" },
            "info": "",
            "params": [  ],
            "kind": 
              { "type": "variant",
                "private": "false",
                "constructors": [ 
                  { "name": "Text",
                    "type": [ "string" ] }, 
                  { "name": "Delim",
                    "type": [ "string" ] } ] } } }, 
      { "value": 
          { "name": "Str.full_split",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|9588" },
            "info": 
              { "description": "Same as <a href=\"{value|Str.split_delim}\" ><span class=\"code\" >Str.split_delim</span></a>, but returns the delimiters as well as the substrings contained between delimiters.  The former are tagged <span class=\"code\" >Delim</span> in the result list; the latter are tagged <span class=\"code\" >Text</span>.  For instance, <span class=\"code\" >full_split (regexp \"[{}]\") \"{ab}\"</span> returns <span class=\"code\" >[Delim \"{\"; Text \"ab\"; Delim \"}\"]</span>." },
            "type": "Str.regexp -> string -> Str.split_result list",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Str.bounded_full_split",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|9954" },
            "info": 
              { "description": "Same as <a href=\"{value|Str.bounded_split_delim}\" ><span class=\"code\" >Str.bounded_split_delim</span></a>, but returns the delimiters as well as the substrings contained between delimiters.  The former are tagged <span class=\"code\" >Delim</span> in the result list; the latter are tagged <span class=\"code\" >Text</span>." },
            "type": "Str.regexp -> string -> int -> Str.split_result list",
            "params": [ 
              { "name": "",
                "type": "Str.regexp" }, 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "comment": "<h6>Extracting substrings</h6>" }, 
      { "value": 
          { "name": "Str.string_before",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|10277" },
            "info": 
              { "description": "<span class=\"code\" >string_before s n</span> returns the substring of all characters of <span class=\"code\" >s</span> that precede position <span class=\"code\" >n</span> (excluding the character at position <span class=\"code\" >n</span>)." },
            "type": "string -> int -> string",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.string_after",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|10471" },
            "info": 
              { "description": "<span class=\"code\" >string_after s n</span> returns the substring of all characters of <span class=\"code\" >s</span> that follow position <span class=\"code\" >n</span> (including the character at position <span class=\"code\" >n</span>)." },
            "type": "string -> int -> string",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.first_chars",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|10662" },
            "info": 
              { "description": "<span class=\"code\" >first_chars s n</span> returns the first <span class=\"code\" >n</span> characters of <span class=\"code\" >s</span>. This is the same function as <a href=\"{value|Str.string_before}\" ><span class=\"code\" >Str.string_before</span></a>." },
            "type": "string -> int -> string",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Str.last_chars",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/str.mli|10825" },
            "info": 
              { "description": "<span class=\"code\" >last_chars s n</span> returns the last <span class=\"code\" >n</span> characters of <span class=\"code\" >s</span>." },
            "type": "string -> int -> string",
            "params": [ 
              { "name": "",
                "type": "string" }, 
              { "name": "",
                "type": "int" } ] } } ],
    "dependencies": 
      { "uses": [  ],
        "used_by": [  ] } } }