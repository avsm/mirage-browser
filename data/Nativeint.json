{ "module": 
  { "name": "Nativeint",
    "file": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli",
    "location": 
      { "implementation": "unknown",
        "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|0" },
    "info": 
      { "description": "Processor-native integers.<br></br> This module provides operations on the type <span class=\"code\" >nativeint</span> of signed 32-bit integers (on 32-bit platforms) or signed 64-bit integers (on 64-bit platforms). This integer type has exactly the same width as that of a <span class=\"code\" >long</span> integer type in the C compiler.  All arithmetic operations over <span class=\"code\" >nativeint</span> are taken modulo 2<sup>32</sup> or 2<sup>64</sup> depending on the word size of the architecture.<br></br> Performance notice: values of type <span class=\"code\" >nativeint</span> occupy more memory space than values of type <span class=\"code\" >int</span>, and arithmetic operations on <span class=\"code\" >nativeint</span> are generally slower than those on <span class=\"code\" >int</span>.  Use <span class=\"code\" >nativeint</span> only when the application requires the extra bit of precision over the <span class=\"code\" >int</span> type." },
    "type": "sig  end",
    "module_structure": [ 
      { "value": 
          { "name": "Nativeint.zero",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|1682" },
            "info": 
              { "description": "The native integer 0." },
            "type": "nativeint",
            "params": [  ] } }, 
      { "value": 
          { "name": "Nativeint.one",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|1732" },
            "info": 
              { "description": "The native integer 1." },
            "type": "nativeint",
            "params": [  ] } }, 
      { "value": 
          { "name": "Nativeint.minus_one",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|1781" },
            "info": 
              { "description": "The native integer -1." },
            "type": "nativeint",
            "params": [  ] } }, 
      { "value": 
          { "name": "Nativeint.neg",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|1837" },
            "info": 
              { "description": "Unary negation." },
            "type": "nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.add",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|1918" },
            "info": 
              { "description": "Addition." },
            "type": "nativeint -> nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.sub",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|2006" },
            "info": 
              { "description": "Subtraction." },
            "type": "nativeint -> nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.mul",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|2097" },
            "info": 
              { "description": "Multiplication." },
            "type": "nativeint -> nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.div",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|2191" },
            "info": 
              { "description": "Integer division.  Raise <span class=\"code\" >Division_by_zero</span> if the second argument is zero.  This division rounds the real quotient of its arguments towards zero, as specified for <a href=\"{value|Pervasives.(/)}\" ><span class=\"code\" >Pervasives.(/)</span></a>." },
            "type": "nativeint -> nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.rem",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|2458" },
            "info": 
              { "description": "Integer remainder.  If <span class=\"code\" >y</span> is not zero, the result of <span class=\"code\" >Nativeint.rem x y</span> satisfies the following properties: <span class=\"code\" >Nativeint.zero &lt;= Nativeint.rem x y &lt; Nativeint.abs y</span> and <span class=\"code\" >x = Nativeint.add (Nativeint.mul (Nativeint.div x y) y) (Nativeint.rem x y)</span>. If <span class=\"code\" >y = 0</span>, <span class=\"code\" >Nativeint.rem x y</span> raises <span class=\"code\" >Division_by_zero</span>." },
            "type": "nativeint -> nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.succ",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|2856" },
            "info": 
              { "description": "Successor. <span class=\"code\" >Nativeint.succ x</span> is <span class=\"code\" >Nativeint.add x Nativeint.one</span>." },
            "type": "nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.pred",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|2967" },
            "info": 
              { "description": "Predecessor. <span class=\"code\" >Nativeint.pred x</span> is <span class=\"code\" >Nativeint.sub x Nativeint.one</span>." },
            "type": "nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.abs",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3080" },
            "info": 
              { "description": "Return the absolute value of its argument." },
            "type": "nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.size",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3164" },
            "info": 
              { "description": "The size in bits of a native integer.  This is equal to <span class=\"code\" >32</span> on a 32-bit platform and to <span class=\"code\" >64</span> on a 64-bit platform." },
            "type": "int",
            "params": [  ] } }, 
      { "value": 
          { "name": "Nativeint.max_int",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3306" },
            "info": 
              { "description": "The greatest representable native integer, either 2<sup>31</sup> - 1 on a 32-bit platform, or 2<sup>63</sup> - 1 on a 64-bit platform." },
            "type": "nativeint",
            "params": [  ] } }, 
      { "value": 
          { "name": "Nativeint.min_int",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3463" },
            "info": 
              { "description": "The greatest representable native integer, either -2<sup>31</sup> on a 32-bit platform, or -2<sup>63</sup> on a 64-bit platform." },
            "type": "nativeint",
            "params": [  ] } }, 
      { "value": 
          { "name": "Nativeint.logand",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3614" },
            "info": 
              { "description": "Bitwise logical and." },
            "type": "nativeint -> nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.logor",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3716" },
            "info": 
              { "description": "Bitwise logical or." },
            "type": "nativeint -> nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.logxor",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3815" },
            "info": 
              { "description": "Bitwise logical exclusive or." },
            "type": "nativeint -> nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.lognot",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3926" },
            "info": 
              { "description": "Bitwise logical negation" },
            "type": "nativeint -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.shift_left",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|3995" },
            "info": 
              { "description": "<span class=\"code\" >Nativeint.shift_left x y</span> shifts <span class=\"code\" >x</span> to the left by <span class=\"code\" >y</span> bits. The result is unspecified if <span class=\"code\" >y &lt; 0</span> or <span class=\"code\" >y &gt;= bitsize</span>, where <span class=\"code\" >bitsize</span> is <span class=\"code\" >32</span> on a 32-bit platform and <span class=\"code\" >64</span> on a 64-bit platform." },
            "type": "nativeint -> int -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Nativeint.shift_right",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|4278" },
            "info": 
              { "description": "<span class=\"code\" >Nativeint.shift_right x y</span> shifts <span class=\"code\" >x</span> to the right by <span class=\"code\" >y</span> bits. This is an arithmetic shift: the sign bit of <span class=\"code\" >x</span> is replicated and inserted in the vacated bits. The result is unspecified if <span class=\"code\" >y &lt; 0</span> or <span class=\"code\" >y &gt;= bitsize</span>." },
            "type": "nativeint -> int -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Nativeint.shift_right_logical",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|4585" },
            "info": 
              { "description": "<span class=\"code\" >Nativeint.shift_right_logical x y</span> shifts <span class=\"code\" >x</span> to the right by <span class=\"code\" >y</span> bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of <span class=\"code\" >x</span>. The result is unspecified if <span class=\"code\" >y &lt; 0</span> or <span class=\"code\" >y &gt;= bitsize</span>." },
            "type": "nativeint -> int -> nativeint",
            "params": [ 
              { "name": "",
                "type": "nativeint" }, 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Nativeint.of_int",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|4913" },
            "info": 
              { "description": "Convert the given integer (type <span class=\"code\" >int</span>) to a native integer (type <span class=\"code\" >nativeint</span>)." },
            "type": "int -> nativeint",
            "params": [ 
              { "name": "",
                "type": "int" } ] } }, 
      { "value": 
          { "name": "Nativeint.to_int",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|5060" },
            "info": 
              { "description": "Convert the given native integer (type <span class=\"code\" >nativeint</span>) to an integer (type <span class=\"code\" >int</span>).  The high-order bit is lost during the conversion." },
            "type": "nativeint -> int",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.of_float",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|5262" },
            "info": 
              { "description": "Convert the given floating-point number to a native integer, discarding the fractional part (truncate towards 0). The result of the conversion is undefined if, after truncation, the number is outside the range [<a href=\"{value|Nativeint.min_int}\" ><span class=\"code\" >Nativeint.min_int</span></a>, <a href=\"{value|Nativeint.max_int}\" ><span class=\"code\" >Nativeint.max_int</span></a>]." },
            "type": "float -> nativeint",
            "params": [ 
              { "name": "",
                "type": "float" } ] } }, 
      { "value": 
          { "name": "Nativeint.to_float",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|5607" },
            "info": 
              { "description": "Convert the given native integer to a floating-point number." },
            "type": "nativeint -> float",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.of_int32",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|5743" },
            "info": 
              { "description": "Convert the given 32-bit integer (type <span class=\"code\" >int32</span>) to a native integer." },
            "type": "int32 -> nativeint",
            "params": [ 
              { "name": "",
                "type": "int32" } ] } }, 
      { "value": 
          { "name": "Nativeint.to_int32",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|5886" },
            "info": 
              { "description": "Convert the given native integer to a 32-bit integer (type <span class=\"code\" >int32</span>).  On 64-bit platforms, the 64-bit native integer is taken modulo 2<sup>32</sup>, i.e. the top 32 bits are lost.  On 32-bit platforms, the conversion is exact." },
            "type": "nativeint -> int32",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "value": 
          { "name": "Nativeint.of_string",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|6188" },
            "info": 
              { "description": "Convert the given string to a native integer. The string is read in decimal (by default) or in hexadecimal, octal or binary if the string begins with <span class=\"code\" >0x</span>, <span class=\"code\" >0o</span> or <span class=\"code\" >0b</span> respectively. Raise <span class=\"code\" >Failure \"int_of_string\"</span> if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type <span class=\"code\" >nativeint</span>." },
            "type": "string -> nativeint",
            "params": [ 
              { "name": "",
                "type": "string" } ] } }, 
      { "value": 
          { "name": "Nativeint.to_string",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|6659" },
            "info": 
              { "description": "Return the string representation of its argument, in decimal." },
            "type": "nativeint -> string",
            "params": [ 
              { "name": "",
                "type": "nativeint" } ] } }, 
      { "type": 
          { "name": "Nativeint.t",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|6770" },
            "info": 
              { "description": "An alias for the type of native integers." },
            "params": [  ],
            "kind": 
              { "type": "abstract" },
            "manifest": "nativeint" } }, 
      { "value": 
          { "name": "Nativeint.compare",
            "location": 
              { "implementation": "unknown",
                "interface": "/Users/avsm/src/git/avsm/mirage/lib/_build/unix-socket/std/nativeint.mli|6834" },
            "info": 
              { "description": "The comparison function for native integers, with the same specification as <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare</span></a>.  Along with the type <span class=\"code\" >t</span>, this function <span class=\"code\" >compare</span> allows the module <span class=\"code\" >Nativeint</span> to be passed as argument to the functors <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make</span></a> and <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make</span></a>." },
            "type": "Nativeint.t -> Nativeint.t -> int",
            "params": [ 
              { "name": "",
                "type": "Nativeint.t" }, 
              { "name": "",
                "type": "Nativeint.t" } ] } } ],
    "dependencies": 
      { "uses": [  ],
        "used_by": [ "Random" ] } } }