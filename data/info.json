{"tree": [{"data": "Base64", "attr": {"id": "treeBase64"}, "children": []}, {"data": "String", "attr": {"id": "treeString"}, "children": []}, {"data": "Stack", "attr": {"id": "treeStack"}, "children": []}, {"data": "Sort", "attr": {"id": "treeSort"}, "children": []}, {"data": "Set", "attr": {"id": "treeSet"}, "children": [{"data": "Set.Make", "attr": {"id": "treeSet.Make"}, "children": []}, {"data": "Set.S", "attr": {"id": "treeSet.S"}, "children": []}, {"data": "Set.OrderedType", "attr": {"id": "treeSet.OrderedType"}, "children": []}]}, {"data": "Queue", "attr": {"id": "treeQueue"}, "children": []}, {"data": "Printexc", "attr": {"id": "treePrintexc"}, "children": []}, {"data": "Pervasives", "attr": {"id": "treePervasives"}, "children": [{"data": "Pervasives.LargeFile", "attr": {"id": "treePervasives.LargeFile"}, "children": []}]}, {"data": "Nativeint", "attr": {"id": "treeNativeint"}, "children": []}, {"data": "Marshal", "attr": {"id": "treeMarshal"}, "children": []}, {"data": "Map", "attr": {"id": "treeMap"}, "children": [{"data": "Map.Make", "attr": {"id": "treeMap.Make"}, "children": []}, {"data": "Map.S", "attr": {"id": "treeMap.S"}, "children": []}, {"data": "Map.OrderedType", "attr": {"id": "treeMap.OrderedType"}, "children": []}]}, {"data": "Lazy", "attr": {"id": "treeLazy"}, "children": []}, {"data": "Stream", "attr": {"id": "treeStream"}, "children": []}, {"data": "List", "attr": {"id": "treeList"}, "children": []}, {"data": "Lexing", "attr": {"id": "treeLexing"}, "children": []}, {"data": "Int64", "attr": {"id": "treeInt64"}, "children": []}, {"data": "Int32", "attr": {"id": "treeInt32"}, "children": []}, {"data": "Hashtbl", "attr": {"id": "treeHashtbl"}, "children": [{"data": "Hashtbl.Make", "attr": {"id": "treeHashtbl.Make"}, "children": []}, {"data": "Hashtbl.S", "attr": {"id": "treeHashtbl.S"}, "children": []}, {"data": "Hashtbl.HashedType", "attr": {"id": "treeHashtbl.HashedType"}, "children": []}]}, {"data": "Gc", "attr": {"id": "treeGc"}, "children": []}, {"data": "Digest", "attr": {"id": "treeDigest"}, "children": []}, {"data": "Complex", "attr": {"id": "treeComplex"}, "children": []}, {"data": "Char", "attr": {"id": "treeChar"}, "children": []}, {"data": "CamlinternalLazy", "attr": {"id": "treeCamlinternalLazy"}, "children": []}, {"data": "Callback", "attr": {"id": "treeCallback"}, "children": []}, {"data": "Buffer", "attr": {"id": "treeBuffer"}, "children": []}, {"data": "Array", "attr": {"id": "treeArray"}, "children": []}, {"data": "Weak", "attr": {"id": "treeWeak"}, "children": [{"data": "Weak.Make", "attr": {"id": "treeWeak.Make"}, "children": []}, {"data": "Weak.S", "attr": {"id": "treeWeak.S"}, "children": []}]}, {"data": "Sys", "attr": {"id": "treeSys"}, "children": []}, {"data": "Scanf", "attr": {"id": "treeScanf"}, "children": [{"data": "Scanf.Scanning", "attr": {"id": "treeScanf.Scanning"}, "children": []}]}, {"data": "Random", "attr": {"id": "treeRandom"}, "children": [{"data": "Random.State", "attr": {"id": "treeRandom.State"}, "children": []}]}, {"data": "Obj", "attr": {"id": "treeObj"}, "children": []}, {"data": "Format", "attr": {"id": "treeFormat"}, "children": []}, {"data": "Printf", "attr": {"id": "treePrintf"}, "children": []}, {"data": "Parsing", "attr": {"id": "treeParsing"}, "children": []}, {"data": "CamlinternalOO", "attr": {"id": "treeCamlinternalOO"}, "children": []}, {"data": "CamlinternalMod", "attr": {"id": "treeCamlinternalMod"}, "children": []}, {"data": "Std_exit", "attr": {"id": "treeStd_exit"}, "children": []}, {"data": "Log", "attr": {"id": "treeLog"}, "children": []}, {"data": "Oo", "attr": {"id": "treeOo"}, "children": []}, {"data": "Lwt", "attr": {"id": "treeLwt"}, "children": []}, {"data": "Lwt_util", "attr": {"id": "treeLwt_util"}, "children": []}, {"data": "Lwt_stream", "attr": {"id": "treeLwt_stream"}, "children": []}, {"data": "Lwt_sequence", "attr": {"id": "treeLwt_sequence"}, "children": []}, {"data": "Lwt_mvar", "attr": {"id": "treeLwt_mvar"}, "children": []}, {"data": "Lwt_mutex", "attr": {"id": "treeLwt_mutex"}, "children": []}, {"data": "Lwt_list", "attr": {"id": "treeLwt_list"}, "children": []}, {"data": "Lwt_pool", "attr": {"id": "treeLwt_pool"}, "children": []}, {"data": "Lwt_condition", "attr": {"id": "treeLwt_condition"}, "children": []}, {"data": "Lwt_pqueue", "attr": {"id": "treeLwt_pqueue"}, "children": [{"data": "Lwt_pqueue.Make", "attr": {"id": "treeLwt_pqueue.Make"}, "children": []}, {"data": "Lwt_pqueue.S", "attr": {"id": "treeLwt_pqueue.S"}, "children": []}, {"data": "Lwt_pqueue.OrderedType", "attr": {"id": "treeLwt_pqueue.OrderedType"}, "children": []}]}, {"data": "Lwt_switch", "attr": {"id": "treeLwt_switch"}, "children": []}, {"data": "Bitstring", "attr": {"id": "treeBitstring"}, "children": [{"data": "Bitstring.Buffer", "attr": {"id": "treeBitstring.Buffer"}, "children": []}]}, {"data": "Bitstring_types", "attr": {"id": "treeBitstring_types"}, "children": []}, {"data": "Bitstring_config", "attr": {"id": "treeBitstring_config"}, "children": []}, {"data": "Bitstring_stream", "attr": {"id": "treeBitstring_stream"}, "children": []}, {"data": "Regexp", "attr": {"id": "treeRegexp"}, "children": [{"data": "Regexp.Re", "attr": {"id": "treeRegexp.Re"}, "children": []}, {"data": "Regexp.Automata", "attr": {"id": "treeRegexp.Automata"}, "children": []}, {"data": "Regexp.Regexp_syntax", "attr": {"id": "treeRegexp.Regexp_syntax"}, "children": []}, {"data": "Regexp.Regexp_parser", "attr": {"id": "treeRegexp.Regexp_parser"}, "children": []}, {"data": "Regexp.Regular_expr", "attr": {"id": "treeRegexp.Regular_expr"}, "children": []}, {"data": "Regexp.Ptset", "attr": {"id": "treeRegexp.Ptset"}, "children": []}, {"data": "Regexp.Inttagset", "attr": {"id": "treeRegexp.Inttagset"}, "children": [{"data": "Regexp.Inttagset.Make", "attr": {"id": "treeRegexp.Inttagset.Make"}, "children": []}, {"data": "Regexp.Inttagset.IntTagSetModule", "attr": {"id": "treeRegexp.Inttagset.IntTagSetModule"}, "children": []}]}, {"data": "Regexp.Inttagmap", "attr": {"id": "treeRegexp.Inttagmap"}, "children": [{"data": "Regexp.Inttagmap.Make", "attr": {"id": "treeRegexp.Inttagmap.Make"}, "children": []}, {"data": "Regexp.Inttagmap.IntTagMapModule", "attr": {"id": "treeRegexp.Inttagmap.IntTagMapModule"}, "children": []}]}, {"data": "Regexp.Hashcons", "attr": {"id": "treeRegexp.Hashcons"}, "children": [{"data": "Regexp.Hashcons.Make", "attr": {"id": "treeRegexp.Hashcons.Make"}, "children": []}, {"data": "Regexp.Hashcons.S", "attr": {"id": "treeRegexp.Hashcons.S"}, "children": []}, {"data": "Regexp.Hashcons.HashedType", "attr": {"id": "treeRegexp.Hashcons.HashedType"}, "children": []}]}]}, {"data": "OS", "attr": {"id": "treeOS"}, "children": [{"data": "OS.Blkif", "attr": {"id": "treeOS.Blkif"}, "children": []}, {"data": "OS.Netif", "attr": {"id": "treeOS.Netif"}, "children": []}, {"data": "OS.Devices", "attr": {"id": "treeOS.Devices"}, "children": []}, {"data": "OS.Main", "attr": {"id": "treeOS.Main"}, "children": []}, {"data": "OS.Console", "attr": {"id": "treeOS.Console"}, "children": []}, {"data": "OS.Time", "attr": {"id": "treeOS.Time"}, "children": []}, {"data": "OS.Clock", "attr": {"id": "treeOS.Clock"}, "children": []}, {"data": "OS.Activations", "attr": {"id": "treeOS.Activations"}, "children": []}, {"data": "OS.Socket", "attr": {"id": "treeOS.Socket"}, "children": []}, {"data": "OS.Env", "attr": {"id": "treeOS.Env"}, "children": []}]}, {"data": "Net", "attr": {"id": "treeNet"}, "children": [{"data": "Net.Channel", "attr": {"id": "treeNet.Channel"}, "children": [{"data": "Net.Channel.Shmem", "attr": {"id": "treeNet.Channel.Shmem"}, "children": []}, {"data": "Net.Channel.TCPv4", "attr": {"id": "treeNet.Channel.TCPv4"}, "children": []}]}, {"data": "Net.Datagram", "attr": {"id": "treeNet.Datagram"}, "children": [{"data": "Net.Datagram.UDPv4", "attr": {"id": "treeNet.Datagram.UDPv4"}, "children": []}]}, {"data": "Net.Flow", "attr": {"id": "treeNet.Flow"}, "children": [{"data": "Net.Flow.Shmem", "attr": {"id": "treeNet.Flow.Shmem"}, "children": []}, {"data": "Net.Flow.TCPv4", "attr": {"id": "treeNet.Flow.TCPv4"}, "children": []}]}, {"data": "Net.Manager", "attr": {"id": "treeNet.Manager"}, "children": []}, {"data": "Net.Config", "attr": {"id": "treeNet.Config"}, "children": []}, {"data": "Net.Dhcp", "attr": {"id": "treeNet.Dhcp"}, "children": [{"data": "Net.Dhcp.Client", "attr": {"id": "treeNet.Dhcp.Client"}, "children": []}, {"data": "Net.Dhcp.Option", "attr": {"id": "treeNet.Dhcp.Option"}, "children": [{"data": "Net.Dhcp.Option.Packet", "attr": {"id": "treeNet.Dhcp.Option.Packet"}, "children": []}, {"data": "Net.Dhcp.Option.Unmarshal", "attr": {"id": "treeNet.Dhcp.Option.Unmarshal"}, "children": []}, {"data": "Net.Dhcp.Option.Marshal", "attr": {"id": "treeNet.Dhcp.Option.Marshal"}, "children": []}]}]}, {"data": "Net.Tcp", "attr": {"id": "treeNet.Tcp"}, "children": [{"data": "Net.Tcp.Pcb", "attr": {"id": "treeNet.Tcp.Pcb"}, "children": []}, {"data": "Net.Tcp.Segment", "attr": {"id": "treeNet.Tcp.Segment"}, "children": [{"data": "Net.Tcp.Segment.Tx", "attr": {"id": "treeNet.Tcp.Segment.Tx"}, "children": []}, {"data": "Net.Tcp.Segment.Rx", "attr": {"id": "treeNet.Tcp.Segment.Rx"}, "children": []}]}, {"data": "Net.Tcp.Ack", "attr": {"id": "treeNet.Tcp.Ack"}, "children": [{"data": "Net.Tcp.Ack.Delayed", "attr": {"id": "treeNet.Tcp.Ack.Delayed"}, "children": []}, {"data": "Net.Tcp.Ack.Immediate", "attr": {"id": "treeNet.Tcp.Ack.Immediate"}, "children": []}, {"data": "Net.Tcp.Ack.M", "attr": {"id": "treeNet.Tcp.Ack.M"}, "children": []}]}, {"data": "Net.Tcp.User_buffer", "attr": {"id": "treeNet.Tcp.User_buffer"}, "children": [{"data": "Net.Tcp.User_buffer.Tx", "attr": {"id": "treeNet.Tcp.User_buffer.Tx"}, "children": []}, {"data": "Net.Tcp.User_buffer.Rx", "attr": {"id": "treeNet.Tcp.User_buffer.Rx"}, "children": []}]}, {"data": "Net.Tcp.Options", "attr": {"id": "treeNet.Tcp.Options"}, "children": []}, {"data": "Net.Tcp.Window", "attr": {"id": "treeNet.Tcp.Window"}, "children": []}, {"data": "Net.Tcp.Sequence", "attr": {"id": "treeNet.Tcp.Sequence"}, "children": []}]}, {"data": "Net.Udp", "attr": {"id": "treeNet.Udp"}, "children": []}, {"data": "Net.Icmp", "attr": {"id": "treeNet.Icmp"}, "children": []}, {"data": "Net.Ipv4", "attr": {"id": "treeNet.Ipv4"}, "children": []}, {"data": "Net.Ethif", "attr": {"id": "treeNet.Ethif"}, "children": []}, {"data": "Net.Arp", "attr": {"id": "treeNet.Arp"}, "children": []}, {"data": "Net.Checksum", "attr": {"id": "treeNet.Checksum"}, "children": []}, {"data": "Net.Nettypes", "attr": {"id": "treeNet.Nettypes"}, "children": [{"data": "Net.Nettypes.RPC", "attr": {"id": "treeNet.Nettypes.RPC"}, "children": []}, {"data": "Net.Nettypes.CHANNEL", "attr": {"id": "treeNet.Nettypes.CHANNEL"}, "children": []}, {"data": "Net.Nettypes.DATAGRAM", "attr": {"id": "treeNet.Nettypes.DATAGRAM"}, "children": []}, {"data": "Net.Nettypes.FLOW", "attr": {"id": "treeNet.Nettypes.FLOW"}, "children": []}]}]}, {"data": "Block", "attr": {"id": "treeBlock"}, "children": [{"data": "Block.SimpleKV", "attr": {"id": "treeBlock.SimpleKV"}, "children": []}]}, {"data": "Dns", "attr": {"id": "treeDns"}, "children": [{"data": "Dns.Server", "attr": {"id": "treeDns.Server"}, "children": []}, {"data": "Dns.Dnsserver", "attr": {"id": "treeDns.Dnsserver"}, "children": []}, {"data": "Dns.Dnsparser", "attr": {"id": "treeDns.Dnsparser"}, "children": []}, {"data": "Dns.Dnsquery", "attr": {"id": "treeDns.Dnsquery"}, "children": []}, {"data": "Dns.Dnspacket", "attr": {"id": "treeDns.Dnspacket"}, "children": []}, {"data": "Dns.Dnsloader", "attr": {"id": "treeDns.Dnsloader"}, "children": []}, {"data": "Dns.Dnstrie", "attr": {"id": "treeDns.Dnstrie"}, "children": []}, {"data": "Dns.Dnsrr", "attr": {"id": "treeDns.Dnsrr"}, "children": []}, {"data": "Dns.Hashcons", "attr": {"id": "treeDns.Hashcons"}, "children": [{"data": "Dns.Hashcons.Make", "attr": {"id": "treeDns.Hashcons.Make"}, "children": []}, {"data": "Dns.Hashcons.S", "attr": {"id": "treeDns.Hashcons.S"}, "children": []}, {"data": "Dns.Hashcons.HashedType", "attr": {"id": "treeDns.Hashcons.HashedType"}, "children": []}]}]}, {"data": "Http", "attr": {"id": "treeHttp"}, "children": [{"data": "Http.Server", "attr": {"id": "treeHttp.Server"}, "children": []}, {"data": "Http.Cookie", "attr": {"id": "treeHttp.Cookie"}, "children": []}, {"data": "Http.Response", "attr": {"id": "treeHttp.Response"}, "children": []}, {"data": "Http.Request", "attr": {"id": "treeHttp.Request"}, "children": []}, {"data": "Http.Parser", "attr": {"id": "treeHttp.Parser"}, "children": []}, {"data": "Http.Message", "attr": {"id": "treeHttp.Message"}, "children": []}, {"data": "Http.Constants", "attr": {"id": "treeHttp.Constants"}, "children": []}, {"data": "Http.Common", "attr": {"id": "treeHttp.Common"}, "children": []}, {"data": "Http.Url", "attr": {"id": "treeHttp.Url"}, "children": []}, {"data": "Http.Misc", "attr": {"id": "treeHttp.Misc"}, "children": []}, {"data": "Http.Types", "attr": {"id": "treeHttp.Types"}, "children": []}]}, {"data": "Utf8", "attr": {"id": "treeUtf8"}, "children": []}, {"data": "Utf16", "attr": {"id": "treeUtf16"}, "children": []}, {"data": "Ulexing", "attr": {"id": "treeUlexing"}, "children": []}, {"data": "Dyntype", "attr": {"id": "treeDyntype"}, "children": []}, {"data": "Cow", "attr": {"id": "treeCow"}, "children": [{"data": "Cow.Twitter", "attr": {"id": "treeCow.Twitter"}, "children": [{"data": "Cow.Twitter.Status", "attr": {"id": "treeCow.Twitter.Status"}, "children": []}, {"data": "Cow.Twitter.User", "attr": {"id": "treeCow.Twitter.User"}, "children": []}]}, {"data": "Cow.Json", "attr": {"id": "treeCow.Json"}, "children": []}, {"data": "Cow.Markdown", "attr": {"id": "treeCow.Markdown"}, "children": []}, {"data": "Cow.Atom", "attr": {"id": "treeCow.Atom"}, "children": []}, {"data": "Cow.Code", "attr": {"id": "treeCow.Code"}, "children": []}, {"data": "Cow.Css", "attr": {"id": "treeCow.Css"}, "children": []}, {"data": "Cow.Html", "attr": {"id": "treeCow.Html"}, "children": []}, {"data": "Cow.Xml", "attr": {"id": "treeCow.Xml"}, "children": [{"data": "Cow.Xml.Make", "attr": {"id": "treeCow.Xml.Make"}, "children": []}, {"data": "Cow.Xml.S", "attr": {"id": "treeCow.Xml.S"}, "children": []}, {"data": "Cow.Xml.XMLBuffer", "attr": {"id": "treeCow.Xml.XMLBuffer"}, "children": []}, {"data": "Cow.Xml.XMLString", "attr": {"id": "treeCow.Xml.XMLString"}, "children": []}]}]}, {"data": "Openflow", "attr": {"id": "treeOpenflow"}, "children": [{"data": "Openflow.Controller", "attr": {"id": "treeOpenflow.Controller"}, "children": [{"data": "Openflow.Controller.Event", "attr": {"id": "treeOpenflow.Controller.Event"}, "children": []}]}, {"data": "Openflow.Ofpacket", "attr": {"id": "treeOpenflow.Ofpacket"}, "children": [{"data": "Openflow.Ofpacket.Stats", "attr": {"id": "treeOpenflow.Ofpacket.Stats"}, "children": []}, {"data": "Openflow.Ofpacket.Port_mod", "attr": {"id": "treeOpenflow.Ofpacket.Port_mod"}, "children": []}, {"data": "Openflow.Ofpacket.Flow_mod", "attr": {"id": "treeOpenflow.Ofpacket.Flow_mod"}, "children": []}, {"data": "Openflow.Ofpacket.Packet_out", "attr": {"id": "treeOpenflow.Ofpacket.Packet_out"}, "children": []}, {"data": "Openflow.Ofpacket.Packet_in", "attr": {"id": "treeOpenflow.Ofpacket.Packet_in"}, "children": []}, {"data": "Openflow.Ofpacket.Flow", "attr": {"id": "treeOpenflow.Ofpacket.Flow"}, "children": []}, {"data": "Openflow.Ofpacket.Match", "attr": {"id": "treeOpenflow.Ofpacket.Match"}, "children": []}, {"data": "Openflow.Ofpacket.Wildcards", "attr": {"id": "treeOpenflow.Ofpacket.Wildcards"}, "children": []}, {"data": "Openflow.Ofpacket.Switch", "attr": {"id": "treeOpenflow.Ofpacket.Switch"}, "children": []}, {"data": "Openflow.Ofpacket.Port", "attr": {"id": "treeOpenflow.Ofpacket.Port"}, "children": []}, {"data": "Openflow.Ofpacket.Queue", "attr": {"id": "treeOpenflow.Ofpacket.Queue"}, "children": []}]}]}, {"data": "OUnit", "attr": {"id": "treeOUnit"}, "children": []}, {"data": "Fs", "attr": {"id": "treeFs"}, "children": [{"data": "Fs.Fat", "attr": {"id": "treeFs.Fat"}, "children": [{"data": "Fs.Fat.FATFilesystem", "attr": {"id": "treeFs.Fat.FATFilesystem"}, "children": []}, {"data": "Fs.Fat.BLOCK", "attr": {"id": "treeFs.Fat.BLOCK"}, "children": []}, {"data": "Fs.Fat.FS", "attr": {"id": "treeFs.Fat.FS"}, "children": []}, {"data": "Fs.Fat.Stat", "attr": {"id": "treeFs.Fat.Stat"}, "children": []}, {"data": "Fs.Fat.Dir_entry", "attr": {"id": "treeFs.Fat.Dir_entry"}, "children": []}, {"data": "Fs.Fat.Path", "attr": {"id": "treeFs.Fat.Path"}, "children": []}]}]}], "info": {"Base64": {"module": {"name": "Base64", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/base64.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/base64.mli|0"}, "info": {"description": "decode a string encoded in base64. Will leave trailing NULLs on the string\n    padding it out to a multiple of 3 characters"}, "type": "sig  end", "module_structure": [{"value": {"name": "Base64.decode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/base64.mli|715"}, "info": "", "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Base64.encode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/base64.mli|780"}, "info": {"description": "encode a string into base64"}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "String": {"module": {"name": "String", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|0"}, "info": {"description": "String operations.\n  Given a string <span class=\"code\" >s<\/span> of length <span class=\"code\" >l<\/span>, we call character number in <span class=\"code\" >s<\/span>\n  the index of a character in <span class=\"code\" >s<\/span>.  Indexes start at <span class=\"code\" >0<\/span>, and we will\n  call a character number valid in <span class=\"code\" >s<\/span> if it falls within the range\n  <span class=\"code\" >[0...l-1]<\/span>. A position is the point between two characters or at\n  the beginning or end of the string.  We call a position valid\n  in <span class=\"code\" >s<\/span> if it falls within the range <span class=\"code\" >[0...l]<\/span>. Note that character\n  number <span class=\"code\" >n<\/span> is between positions <span class=\"code\" >n<\/span> and <span class=\"code\" >n+1<\/span>.<br><\/br>\n  Two parameters <span class=\"code\" >start<\/span> and <span class=\"code\" >len<\/span> are said to designate a valid\n  substring of <span class=\"code\" >s<\/span> if <span class=\"code\" >len &gt;= 0<\/span> and <span class=\"code\" >start<\/span> and <span class=\"code\" >start+len<\/span> are\n  valid positions in <span class=\"code\" >s<\/span>."}, "type": "sig  end", "module_structure": [{"value": {"name": "String.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|1589"}, "info": {"description": "Return the length (number of characters) of the given string."}, "type": "string -> int", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "String.get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|1710"}, "info": {"description": "<span class=\"code\" >String.get s n<\/span> returns character number <span class=\"code\" >n<\/span> in string <span class=\"code\" >s<\/span>.\n   You can also write <span class=\"code\" >s.[n]<\/span> instead of <span class=\"code\" >String.get s n<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >n<\/span> not a valid character number in <span class=\"code\" >s<\/span>."}, "type": "string -> int -> char", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "String.set", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|1970"}, "info": {"description": "<span class=\"code\" >String.set s n c<\/span> modifies string <span class=\"code\" >s<\/span> in place,\n   replacing the character number <span class=\"code\" >n<\/span> by <span class=\"code\" >c<\/span>.\n   You can also write <span class=\"code\" >s.[n] &lt;- c<\/span> instead of <span class=\"code\" >String.set s n c<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >n<\/span> is not a valid character number in <span class=\"code\" >s<\/span>."}, "type": "string -> int -> char -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|2281"}, "info": {"description": "<span class=\"code\" >String.create n<\/span> returns a fresh string of length <span class=\"code\" >n<\/span>.\n   The string initially contains arbitrary characters.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >n &lt; 0<\/span> or <span class=\"code\" >n &gt; <\/span><a href=\"{value|Sys.max_string_length}\" ><span class=\"code\" >Sys.max_string_length<\/span><\/a>."}, "type": "int -> string", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "String.make", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|2530"}, "info": {"description": "<span class=\"code\" >String.make n c<\/span> returns a fresh string of length <span class=\"code\" >n<\/span>,\n   filled with the character <span class=\"code\" >c<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >n &lt; 0<\/span> or <span class=\"code\" >n &gt; <\/span><a href=\"{value|Sys.max_string_length}\" ><span class=\"code\" >Sys.max_string_length<\/span><\/a>."}, "type": "int -> char -> string", "params": [{"name": "", "type": "int"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|2735"}, "info": {"description": "Return a copy of the given string."}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "String.sub", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|2806"}, "info": {"description": "<span class=\"code\" >String.sub s start len<\/span> returns a fresh string of length <span class=\"code\" >len<\/span>,\n   containing the substring of <span class=\"code\" >s<\/span> that starts at position <span class=\"code\" >start<\/span> and\n   has length <span class=\"code\" >len<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >start<\/span> and <span class=\"code\" >len<\/span> do not\n   designate a valid substring of <span class=\"code\" >s<\/span>."}, "type": "string -> int -> int -> string", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "String.fill", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|3108"}, "info": {"description": "<span class=\"code\" >String.fill s start len c<\/span> modifies string <span class=\"code\" >s<\/span> in place,\n   replacing <span class=\"code\" >len<\/span> characters by <span class=\"code\" >c<\/span>, starting at <span class=\"code\" >start<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >start<\/span> and <span class=\"code\" >len<\/span> do not\n   designate a valid substring of <span class=\"code\" >s<\/span>."}, "type": "string -> int -> int -> char -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.blit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|3377"}, "info": {"description": "<span class=\"code\" >String.blit src srcoff dst dstoff len<\/span> copies <span class=\"code\" >len<\/span> characters\n   from string <span class=\"code\" >src<\/span>, starting at character number <span class=\"code\" >srcoff<\/span>, to\n   string <span class=\"code\" >dst<\/span>, starting at character number <span class=\"code\" >dstoff<\/span>. It works\n   correctly even if <span class=\"code\" >src<\/span> and <span class=\"code\" >dst<\/span> are the same string,\n   and the source and destination intervals overlap.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >srcoff<\/span> and <span class=\"code\" >len<\/span> do not\n   designate a valid substring of <span class=\"code\" >src<\/span>, or if <span class=\"code\" >dstoff<\/span> and <span class=\"code\" >len<\/span>\n   do not designate a valid substring of <span class=\"code\" >dst<\/span>."}, "type": "string -> int -> string -> int -> int -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "String.concat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|3918"}, "info": {"description": "<span class=\"code\" >String.concat sep sl<\/span> concatenates the list of strings <span class=\"code\" >sl<\/span>,\n   inserting the separator string <span class=\"code\" >sep<\/span> between each."}, "type": "string -> string list -> string", "params": [{"name": "", "type": "string"}, {"name": "", "type": "string list"}]}}, {"value": {"name": "String.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|4087"}, "info": {"description": "<span class=\"code\" >String.iter f s<\/span> applies function <span class=\"code\" >f<\/span> in turn to all\n   the characters of <span class=\"code\" >s<\/span>.  It is equivalent to\n   <span class=\"code\" >f s.[0]; f s.[1]; ...; f s.[String.length s - 1]; ()<\/span>."}, "type": "(char -> unit) -> string -> unit", "params": [{"name": "", "type": "char -> unit"}, {"name": "", "type": "string"}]}}, {"value": {"name": "String.escaped", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|4299"}, "info": {"description": "Return a copy of the argument, with special characters\n   represented by escape sequences, following the lexical\n   conventions of Objective Caml.  If there is no special\n   character in the argument, return the original string itself,\n   not a copy."}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "String.index", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|4589"}, "info": {"description": "<span class=\"code\" >String.index s c<\/span> returns the character number of the first\n   occurrence of character <span class=\"code\" >c<\/span> in string <span class=\"code\" >s<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Not_found<\/span> if <span class=\"code\" >c<\/span> does not occur in <span class=\"code\" >s<\/span>."}, "type": "string -> char -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.rindex", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|4790"}, "info": {"description": "<span class=\"code\" >String.rindex s c<\/span> returns the character number of the last\n   occurrence of character <span class=\"code\" >c<\/span> in string <span class=\"code\" >s<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Not_found<\/span> if <span class=\"code\" >c<\/span> does not occur in <span class=\"code\" >s<\/span>."}, "type": "string -> char -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.index_from", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|4992"}, "info": {"description": "<span class=\"code\" >String.index_from s i c<\/span> returns the character number of the\n   first occurrence of character <span class=\"code\" >c<\/span> in string <span class=\"code\" >s<\/span> after position <span class=\"code\" >i<\/span>.\n   <span class=\"code\" >String.index s c<\/span> is equivalent to <span class=\"code\" >String.index_from s 0 c<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >i<\/span> is not a valid position in <span class=\"code\" >s<\/span>.\n   Raise <span class=\"code\" >Not_found<\/span> if <span class=\"code\" >c<\/span> does not occur in <span class=\"code\" >s<\/span> after position <span class=\"code\" >i<\/span>."}, "type": "string -> int -> char -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.rindex_from", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|5383"}, "info": {"description": "<span class=\"code\" >String.rindex_from s i c<\/span> returns the character number of the\n   last occurrence of character <span class=\"code\" >c<\/span> in string <span class=\"code\" >s<\/span> before position <span class=\"code\" >i+1<\/span>.\n   <span class=\"code\" >String.rindex s c<\/span> is equivalent to\n   <span class=\"code\" >String.rindex_from s (String.length s - 1) c<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >i+1<\/span> is not a valid position in <span class=\"code\" >s<\/span>.\n   Raise <span class=\"code\" >Not_found<\/span> if <span class=\"code\" >c<\/span> does not occur in <span class=\"code\" >s<\/span> before position <span class=\"code\" >i+1<\/span>."}, "type": "string -> int -> char -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.contains", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|5808"}, "info": {"description": "<span class=\"code\" >String.contains s c<\/span> tests if character <span class=\"code\" >c<\/span>\n   appears in the string <span class=\"code\" >s<\/span>."}, "type": "string -> char -> bool", "params": [{"name": "", "type": "string"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.contains_from", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|5929"}, "info": {"description": "<span class=\"code\" >String.contains_from s start c<\/span> tests if character <span class=\"code\" >c<\/span>\n   appears in <span class=\"code\" >s<\/span> after position <span class=\"code\" >start<\/span>.\n   <span class=\"code\" >String.contains s c<\/span> is equivalent to\n   <span class=\"code\" >String.contains_from s 0 c<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >start<\/span> is not a valid position in <span class=\"code\" >s<\/span>."}, "type": "string -> int -> char -> bool", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.rcontains_from", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|6232"}, "info": {"description": "<span class=\"code\" >String.rcontains_from s stop c<\/span> tests if character <span class=\"code\" >c<\/span>\n   appears in <span class=\"code\" >s<\/span> before position <span class=\"code\" >stop+1<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >stop &lt; 0<\/span> or <span class=\"code\" >stop+1<\/span> is not a valid\n   position in <span class=\"code\" >s<\/span>."}, "type": "string -> int -> char -> bool", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "char"}]}}, {"value": {"name": "String.uppercase", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|6481"}, "info": {"description": "Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set."}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "String.lowercase", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|6681"}, "info": {"description": "Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set."}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "String.capitalize", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|6881"}, "info": {"description": "Return a copy of the argument, with the first character set to uppercase."}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "String.uncapitalize", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|6997"}, "info": {"description": "Return a copy of the argument, with the first character set to lowercase."}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"type": {"name": "String.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|7124"}, "info": {"description": "An alias for the type of strings."}, "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"value": {"name": "String.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|7173"}, "info": {"description": "The comparison function for strings, with the same specification as\n    <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a>.  Along with the type <span class=\"code\" >t<\/span>, this function <span class=\"code\" >compare<\/span>\n    allows the module <span class=\"code\" >String<\/span> to be passed as argument to the functors\n    <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a> and <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>."}, "type": "String.t -> String.t -> int", "params": [{"name": "", "type": "String.t"}, {"name": "", "type": "String.t"}]}}, {"value": {"name": "String.fold_right", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|7458"}, "info": {"description": "<span class=\"code\" >fold_right f x initial<\/span> folds <span class=\"code\" >f<\/span> across the characters of string\n    <span class=\"code\" >x<\/span> with initial value <span class=\"code\" >initial<\/span>"}, "type": "(char -> 'a -> 'a) -> String.t -> 'a -> 'a", "params": [{"name": "", "type": "char -> 'a -> 'a"}, {"name": "", "type": "String.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "String.explode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|7622"}, "info": {"description": "<span class=\"code\" >explode x<\/span> returns the list of characters making string <span class=\"code\" >x<\/span>"}, "type": "String.t -> char list", "params": [{"name": "", "type": "String.t"}]}}, {"value": {"name": "String.implode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|7719"}, "info": {"description": "<span class=\"code\" >implode cs<\/span> returns the string made from characters <span class=\"code\" >cs<\/span>"}, "type": "char list -> String.t", "params": [{"name": "", "type": "char list"}]}}, {"value": {"name": "String.endswith", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|7813"}, "info": {"description": "<span class=\"code\" >endswith suffix x<\/span> returns true if <span class=\"code\" >x<\/span> has suffix <span class=\"code\" >suffix<\/span>"}, "type": "String.t -> String.t -> bool", "params": [{"name": "", "type": "String.t"}, {"name": "", "type": "String.t"}]}}, {"value": {"name": "String.startswith", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|7910"}, "info": {"description": "<span class=\"code\" >startswith prefix x<\/span> returns true if <span class=\"code\" >x<\/span> has prefix <span class=\"code\" >prefix<\/span>"}, "type": "String.t -> String.t -> bool", "params": [{"name": "", "type": "String.t"}, {"name": "", "type": "String.t"}]}}, {"value": {"name": "String.isspace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|8011"}, "info": {"description": "<span class=\"code\" >isspace c<\/span> returns true if <span class=\"code\" >c<\/span> is a whitespace character"}, "type": "char -> bool", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "String.strip", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|8103"}, "info": {"description": "<span class=\"code\" >strip pred x<\/span> returns <span class=\"code\" >x<\/span> with all characters for which predicate\n    <span class=\"code\" >pred<\/span> is true removed from both the start and end of the string"}, "type": "(char -> bool) -> String.t -> String.t", "params": [{"name": "", "type": "char -> bool"}, {"name": "", "type": "String.t"}]}}, {"value": {"name": "String.split", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|8283"}, "info": {"description": "<span class=\"code\" >split ?limit c x<\/span> returns a list of substrings comprising <span class=\"code\" >x<\/span> where\n    using <span class=\"code\" >c<\/span> as a delimiter. If <span class=\"code\" >limit<\/span> is set then <span class=\"code\" >limit<\/span> indicates\n    the maximum size of the resulting list, where the final element may\n    contain further delimiter characters."}, "type": "?limit:int -> char -> String.t -> String.t list", "params": [{"name": "limit", "type": "int option"}, {"name": "", "type": "char"}, {"name": "", "type": "String.t"}]}}, {"value": {"name": "String.index_between", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/string.mli|8590"}, "info": {"description": "<span class=\"code\" >String.between s i l c<\/span> returns the character number of the\n   first occurrence of character <span class=\"code\" >c<\/span> in string <span class=\"code\" >s<\/span> after position <span class=\"code\" >i<\/span>\n   and before position <span class=\"code\" >l<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >i<\/span> is not a valid position in <span class=\"code\" >s<\/span> or\n   is greater than <span class=\"code\" >l<\/span>.\n   Raise <span class=\"code\" >Not_found<\/span> if <span class=\"code\" >c<\/span> does not occur in <span class=\"code\" >s<\/span> after position <span class=\"code\" >i<\/span>\n   and before position <span class=\"code\" >l<\/span>."}, "type": "string -> int -> int -> char -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "char"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Stack": {"module": {"name": "Stack", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|0"}, "info": {"description": "Last-in first-out stacks.<br><\/br>\n   This module implements stacks (LIFOs), with in-place modification."}, "type": "sig  end", "module_structure": [{"type": {"name": "Stack.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1123"}, "info": {"description": "The type of stacks containing elements of type <span class=\"code\" >'a<\/span>."}, "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "abstract"}}}, {"exception": {"name": "Stack.Empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1123"}, "info": {"description": "Raised when <a href=\"{value|Stack.pop}\" ><span class=\"code\" >Stack.pop<\/span><\/a> or <a href=\"{value|Stack.top}\" ><span class=\"code\" >Stack.top<\/span><\/a> is applied to an empty stack."}}}, {"value": {"name": "Stack.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1219"}, "info": {"description": "Return a new stack, initially empty."}, "type": "unit -> 'a Stack.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Stack.push", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1290"}, "info": {"description": "<span class=\"code\" >push x s<\/span> adds the element <span class=\"code\" >x<\/span> at the top of stack <span class=\"code\" >s<\/span>."}, "type": "'a -> 'a Stack.t -> unit", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a Stack.t"}]}}, {"value": {"name": "Stack.pop", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1385"}, "info": {"description": "<span class=\"code\" >pop s<\/span> removes and returns the topmost element in stack <span class=\"code\" >s<\/span>,\n   or raises <span class=\"code\" >Empty<\/span> if the stack is empty."}, "type": "'a Stack.t -> 'a", "params": [{"name": "", "type": "'a Stack.t"}]}}, {"value": {"name": "Stack.top", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1520"}, "info": {"description": "<span class=\"code\" >top s<\/span> returns the topmost element in stack <span class=\"code\" >s<\/span>,\n   or raises <span class=\"code\" >Empty<\/span> if the stack is empty."}, "type": "'a Stack.t -> 'a", "params": [{"name": "", "type": "'a Stack.t"}]}}, {"value": {"name": "Stack.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1643"}, "info": {"description": "Discard all elements from a stack."}, "type": "'a Stack.t -> unit", "params": [{"name": "", "type": "'a Stack.t"}]}}, {"value": {"name": "Stack.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1711"}, "info": {"description": "Return a copy of the given stack."}, "type": "'a Stack.t -> 'a Stack.t", "params": [{"name": "", "type": "'a Stack.t"}]}}, {"value": {"name": "Stack.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1777"}, "info": {"description": "Return <span class=\"code\" >true<\/span> if the given stack is empty, <span class=\"code\" >false<\/span> otherwise."}, "type": "'a Stack.t -> bool", "params": [{"name": "", "type": "'a Stack.t"}]}}, {"value": {"name": "Stack.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1875"}, "info": {"description": "Return the number of elements in a stack."}, "type": "'a Stack.t -> int", "params": [{"name": "", "type": "'a Stack.t"}]}}, {"value": {"name": "Stack.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stack.mli|1950"}, "info": {"description": "<span class=\"code\" >iter f s<\/span> applies <span class=\"code\" >f<\/span> in turn to all elements of <span class=\"code\" >s<\/span>,\n   from the element at the top of the stack to the element at the\n   bottom of the stack. The stack itself is unchanged."}, "type": "('a -> unit) -> 'a Stack.t -> unit", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a Stack.t"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Sort": {"module": {"name": "Sort", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sort.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sort.mli|0"}, "info": {"description": "Sorting and merging lists.", "deprecated": "This module is obsolete and exists only for backward\n   compatibility.\n   The sorting functions in <a href=\"{module|Array}\" ><span class=\"code\" >Array<\/span><\/a> and <a href=\"{module|List}\" ><span class=\"code\" >List<\/span><\/a> should be used instead.\n   The new functions are faster and use less memory."}, "type": "sig  end", "module_structure": [{"value": {"name": "Sort.list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sort.mli|1194"}, "info": {"description": "Sort a list in increasing order according to an ordering predicate.\n   The predicate should return <span class=\"code\" >true<\/span> if its first argument is\n   less than or equal to its second argument."}, "type": "('a -> 'a -> bool) -> 'a list -> 'a list", "params": [{"name": "", "type": "'a -> 'a -> bool"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Sort.array", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sort.mli|1431"}, "info": {"description": "Sort an array in increasing order according to an\n   ordering predicate.\n   The predicate should return <span class=\"code\" >true<\/span> if its first argument is\n   less than or equal to its second argument.\n   The array is sorted in place."}, "type": "('a -> 'a -> bool) -> 'a array -> unit", "params": [{"name": "", "type": "'a -> 'a -> bool"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Sort.merge", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sort.mli|1705"}, "info": {"description": "Merge two lists according to the given predicate.\n   Assuming the two argument lists are sorted according to the\n   predicate, <span class=\"code\" >merge<\/span> returns a sorted list containing the elements\n   from the two lists. The behavior is undefined if the two\n   argument lists were not sorted."}, "type": "('a -> 'a -> bool) -> 'a list -> 'a list -> 'a list", "params": [{"name": "", "type": "'a -> 'a -> bool"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Set": {"module": {"name": "Set", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|0"}, "info": {"description": "Sets over ordered types.<br><\/br>\n   This module implements the set data structure, given a total ordering\n   function over the set elements. All operations over sets\n   are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and is therefore\n   reasonably efficient: insertion and membership take time\n   logarithmic in the size of the set, for instance."}, "type": "sig  end", "module_structure": [{"module_type": {"name": "Set.OrderedType", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|1337"}, "info": {"description": "Input signature of the functor <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Set.OrderedType.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|1427"}, "info": {"description": "The type of the set elements."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Set.OrderedType.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|1427"}, "info": {"description": "A total ordering function over the set elements.\n          This is a two-argument function <span class=\"code\" >f<\/span> such that\n          <span class=\"code\" >f e1 e2<\/span> is zero if the elements <span class=\"code\" >e1<\/span> and <span class=\"code\" >e2<\/span> are equal,\n          <span class=\"code\" >f e1 e2<\/span> is strictly negative if <span class=\"code\" >e1<\/span> is smaller than <span class=\"code\" >e2<\/span>,\n          and <span class=\"code\" >f e1 e2<\/span> is strictly positive if <span class=\"code\" >e1<\/span> is greater than <span class=\"code\" >e2<\/span>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a>."}, "type": "Set.OrderedType.t -> Set.OrderedType.t -> int", "params": [{"name": "", "type": "Set.OrderedType.t"}, {"name": "", "type": "Set.OrderedType.t"}]}}]}}, {"module_type": {"name": "Set.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|1973"}, "info": {"description": "Output signature of the functor <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Set.S.elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2054"}, "info": {"description": "The type of the set elements."}, "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Set.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2095"}, "info": {"description": "The type of sets."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Set.S.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2095"}, "info": {"description": "The empty set."}, "type": "Set.S.t", "params": []}}, {"value": {"name": "Set.S.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2139"}, "info": {"description": "Test whether a set is empty or not."}, "type": "Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2215"}, "info": {"description": "<span class=\"code\" >mem x s<\/span> tests whether <span class=\"code\" >x<\/span> belongs to the set <span class=\"code\" >s<\/span>."}, "type": "Set.S.elt -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.elt"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2309"}, "info": {"description": "<span class=\"code\" >add x s<\/span> returns a set containing all elements of <span class=\"code\" >s<\/span>,\n       plus <span class=\"code\" >x<\/span>. If <span class=\"code\" >x<\/span> was already in <span class=\"code\" >s<\/span>, <span class=\"code\" >s<\/span> is returned unchanged."}, "type": "Set.S.elt -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.elt"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.singleton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2475"}, "info": {"description": "<span class=\"code\" >singleton x<\/span> returns the one-element set containing only <span class=\"code\" >x<\/span>."}, "type": "Set.S.elt -> Set.S.t", "params": [{"name": "", "type": "Set.S.elt"}]}}, {"value": {"name": "Set.S.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2578"}, "info": {"description": "<span class=\"code\" >remove x s<\/span> returns a set containing all elements of <span class=\"code\" >s<\/span>,\n       except <span class=\"code\" >x<\/span>. If <span class=\"code\" >x<\/span> was not in <span class=\"code\" >s<\/span>, <span class=\"code\" >s<\/span> is returned unchanged."}, "type": "Set.S.elt -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.elt"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.union", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2748"}, "info": {"description": "Set union."}, "type": "Set.S.t -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.inter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2798"}, "info": {"description": "Set intersection."}, "type": "Set.S.t -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.diff", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2882"}, "info": {"description": "Set difference."}, "type": "Set.S.t -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2909"}, "info": {"description": "Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets."}, "type": "Set.S.t -> Set.S.t -> int", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3049"}, "info": {"description": "<span class=\"code\" >equal s1 s2<\/span> tests whether the sets <span class=\"code\" >s1<\/span> and <span class=\"code\" >s2<\/span> are\n       equal, that is, contain equal elements."}, "type": "Set.S.t -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.subset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3193"}, "info": {"description": "<span class=\"code\" >subset s1 s2<\/span> tests whether the set <span class=\"code\" >s1<\/span> is a subset of\n       the set <span class=\"code\" >s2<\/span>."}, "type": "Set.S.t -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3314"}, "info": {"description": "<span class=\"code\" >iter f s<\/span> applies <span class=\"code\" >f<\/span> in turn to all elements of <span class=\"code\" >s<\/span>.\n       The elements of <span class=\"code\" >s<\/span> are presented to <span class=\"code\" >f<\/span> in increasing order\n       with respect to the ordering over the type of the elements."}, "type": "(Set.S.elt -> unit) -> Set.S.t -> unit", "params": [{"name": "", "type": "Set.S.elt -> unit"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3557"}, "info": {"description": "<span class=\"code\" >fold f s a<\/span> computes <span class=\"code\" >(f xN ... (f x2 (f x1 a))...)<\/span>,\n       where <span class=\"code\" >x1 ... xN<\/span> are the elements of <span class=\"code\" >s<\/span>, in increasing order."}, "type": "(Set.S.elt -> 'a -> 'a) -> Set.S.t -> 'a -> 'a", "params": [{"name": "", "type": "Set.S.elt -> 'a -> 'a"}, {"name": "", "type": "Set.S.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Set.S.for_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3744"}, "info": {"description": "<span class=\"code\" >for_all p s<\/span> checks if all elements of the set\n       satisfy the predicate <span class=\"code\" >p<\/span>."}, "type": "(Set.S.elt -> bool) -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.elt -> bool"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.exists", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3882"}, "info": {"description": "<span class=\"code\" >exists p s<\/span> checks if at least one element of\n       the set satisfies the predicate <span class=\"code\" >p<\/span>."}, "type": "(Set.S.elt -> bool) -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.elt -> bool"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4028"}, "info": {"description": "<span class=\"code\" >filter p s<\/span> returns the set of all elements in <span class=\"code\" >s<\/span>\n       that satisfy predicate <span class=\"code\" >p<\/span>."}, "type": "(Set.S.elt -> bool) -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.elt -> bool"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.partition", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4167"}, "info": {"description": "<span class=\"code\" >partition p s<\/span> returns a pair of sets <span class=\"code\" >(s1, s2)<\/span>, where\n       <span class=\"code\" >s1<\/span> is the set of all the elements of <span class=\"code\" >s<\/span> that satisfy the\n       predicate <span class=\"code\" >p<\/span>, and <span class=\"code\" >s2<\/span> is the set of all the elements of\n       <span class=\"code\" >s<\/span> that do not satisfy <span class=\"code\" >p<\/span>."}, "type": "(Set.S.elt -> bool) -> Set.S.t -> Set.S.t * Set.S.t", "params": [{"name": "", "type": "Set.S.elt -> bool"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.cardinal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4451"}, "info": {"description": "Return the number of elements of a set."}, "type": "Set.S.t -> int", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.elements", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4530"}, "info": {"description": "Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering <span class=\"code\" >Ord.compare<\/span>, where <span class=\"code\" >Ord<\/span> is the argument\n       given to <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a>."}, "type": "Set.S.t -> Set.S.elt list", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.min_elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4787"}, "info": {"description": "Return the smallest element of the given set\n       (with respect to the <span class=\"code\" >Ord.compare<\/span> ordering), or raise\n       <span class=\"code\" >Not_found<\/span> if the set is empty."}, "type": "Set.S.t -> Set.S.elt", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.max_elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4972"}, "info": {"description": "Same as <a href=\"{value|Set.S.min_elt}\" ><span class=\"code\" >Set.S.min_elt<\/span><\/a>, but returns the largest element of the\n       given set."}, "type": "Set.S.t -> Set.S.elt", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|5093"}, "info": {"description": "Return one element of the given set, or raise <span class=\"code\" >Not_found<\/span> if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets."}, "type": "Set.S.t -> Set.S.elt", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.split", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|5313"}, "info": {"description": "<span class=\"code\" >split x s<\/span> returns a triple <span class=\"code\" >(l, present, r)<\/span>, where\n          <span class=\"code\" >l<\/span> is the set of elements of <span class=\"code\" >s<\/span> that are\n          strictly less than <span class=\"code\" >x<\/span>;\n          <span class=\"code\" >r<\/span> is the set of elements of <span class=\"code\" >s<\/span> that are\n          strictly greater than <span class=\"code\" >x<\/span>;\n          <span class=\"code\" >present<\/span> is <span class=\"code\" >false<\/span> if <span class=\"code\" >s<\/span> contains no element equal to <span class=\"code\" >x<\/span>,\n          or <span class=\"code\" >true<\/span> if <span class=\"code\" >s<\/span> contains an element equal to <span class=\"code\" >x<\/span>."}, "type": "Set.S.elt -> Set.S.t -> Set.S.t * bool * Set.S.t", "params": [{"name": "", "type": "Set.S.elt"}, {"name": "", "type": "Set.S.t"}]}}]}}, {"module": {"name": "Set.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|5783"}, "info": {"description": "Functor building an implementation of the set structure\n   given a totally ordered type."}, "type": "functor (Ord : OrderedType) -> sig  end", "module_functor": {"parameter": {"name": "Ord", "module_alias": {"name": "Set.OrderedType"}}, "module_with": {"module_alias": {"name": "Set.S", "module_type": {"name": "Set.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|1973"}, "info": {"description": "Output signature of the functor <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Set.S.elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2054"}, "info": {"description": "The type of the set elements."}, "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Set.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2095"}, "info": {"description": "The type of sets."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Set.S.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2095"}, "info": {"description": "The empty set."}, "type": "Set.S.t", "params": []}}, {"value": {"name": "Set.S.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2139"}, "info": {"description": "Test whether a set is empty or not."}, "type": "Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2215"}, "info": {"description": "<span class=\"code\" >mem x s<\/span> tests whether <span class=\"code\" >x<\/span> belongs to the set <span class=\"code\" >s<\/span>."}, "type": "Set.S.elt -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.elt"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2309"}, "info": {"description": "<span class=\"code\" >add x s<\/span> returns a set containing all elements of <span class=\"code\" >s<\/span>,\n       plus <span class=\"code\" >x<\/span>. If <span class=\"code\" >x<\/span> was already in <span class=\"code\" >s<\/span>, <span class=\"code\" >s<\/span> is returned unchanged."}, "type": "Set.S.elt -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.elt"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.singleton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2475"}, "info": {"description": "<span class=\"code\" >singleton x<\/span> returns the one-element set containing only <span class=\"code\" >x<\/span>."}, "type": "Set.S.elt -> Set.S.t", "params": [{"name": "", "type": "Set.S.elt"}]}}, {"value": {"name": "Set.S.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2578"}, "info": {"description": "<span class=\"code\" >remove x s<\/span> returns a set containing all elements of <span class=\"code\" >s<\/span>,\n       except <span class=\"code\" >x<\/span>. If <span class=\"code\" >x<\/span> was not in <span class=\"code\" >s<\/span>, <span class=\"code\" >s<\/span> is returned unchanged."}, "type": "Set.S.elt -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.elt"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.union", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2748"}, "info": {"description": "Set union."}, "type": "Set.S.t -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.inter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2798"}, "info": {"description": "Set intersection."}, "type": "Set.S.t -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.diff", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2882"}, "info": {"description": "Set difference."}, "type": "Set.S.t -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|2909"}, "info": {"description": "Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets."}, "type": "Set.S.t -> Set.S.t -> int", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3049"}, "info": {"description": "<span class=\"code\" >equal s1 s2<\/span> tests whether the sets <span class=\"code\" >s1<\/span> and <span class=\"code\" >s2<\/span> are\n       equal, that is, contain equal elements."}, "type": "Set.S.t -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.subset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3193"}, "info": {"description": "<span class=\"code\" >subset s1 s2<\/span> tests whether the set <span class=\"code\" >s1<\/span> is a subset of\n       the set <span class=\"code\" >s2<\/span>."}, "type": "Set.S.t -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.t"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3314"}, "info": {"description": "<span class=\"code\" >iter f s<\/span> applies <span class=\"code\" >f<\/span> in turn to all elements of <span class=\"code\" >s<\/span>.\n       The elements of <span class=\"code\" >s<\/span> are presented to <span class=\"code\" >f<\/span> in increasing order\n       with respect to the ordering over the type of the elements."}, "type": "(Set.S.elt -> unit) -> Set.S.t -> unit", "params": [{"name": "", "type": "Set.S.elt -> unit"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3557"}, "info": {"description": "<span class=\"code\" >fold f s a<\/span> computes <span class=\"code\" >(f xN ... (f x2 (f x1 a))...)<\/span>,\n       where <span class=\"code\" >x1 ... xN<\/span> are the elements of <span class=\"code\" >s<\/span>, in increasing order."}, "type": "(Set.S.elt -> 'a -> 'a) -> Set.S.t -> 'a -> 'a", "params": [{"name": "", "type": "Set.S.elt -> 'a -> 'a"}, {"name": "", "type": "Set.S.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Set.S.for_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3744"}, "info": {"description": "<span class=\"code\" >for_all p s<\/span> checks if all elements of the set\n       satisfy the predicate <span class=\"code\" >p<\/span>."}, "type": "(Set.S.elt -> bool) -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.elt -> bool"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.exists", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|3882"}, "info": {"description": "<span class=\"code\" >exists p s<\/span> checks if at least one element of\n       the set satisfies the predicate <span class=\"code\" >p<\/span>."}, "type": "(Set.S.elt -> bool) -> Set.S.t -> bool", "params": [{"name": "", "type": "Set.S.elt -> bool"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4028"}, "info": {"description": "<span class=\"code\" >filter p s<\/span> returns the set of all elements in <span class=\"code\" >s<\/span>\n       that satisfy predicate <span class=\"code\" >p<\/span>."}, "type": "(Set.S.elt -> bool) -> Set.S.t -> Set.S.t", "params": [{"name": "", "type": "Set.S.elt -> bool"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.partition", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4167"}, "info": {"description": "<span class=\"code\" >partition p s<\/span> returns a pair of sets <span class=\"code\" >(s1, s2)<\/span>, where\n       <span class=\"code\" >s1<\/span> is the set of all the elements of <span class=\"code\" >s<\/span> that satisfy the\n       predicate <span class=\"code\" >p<\/span>, and <span class=\"code\" >s2<\/span> is the set of all the elements of\n       <span class=\"code\" >s<\/span> that do not satisfy <span class=\"code\" >p<\/span>."}, "type": "(Set.S.elt -> bool) -> Set.S.t -> Set.S.t * Set.S.t", "params": [{"name": "", "type": "Set.S.elt -> bool"}, {"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.cardinal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4451"}, "info": {"description": "Return the number of elements of a set."}, "type": "Set.S.t -> int", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.elements", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4530"}, "info": {"description": "Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering <span class=\"code\" >Ord.compare<\/span>, where <span class=\"code\" >Ord<\/span> is the argument\n       given to <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a>."}, "type": "Set.S.t -> Set.S.elt list", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.min_elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4787"}, "info": {"description": "Return the smallest element of the given set\n       (with respect to the <span class=\"code\" >Ord.compare<\/span> ordering), or raise\n       <span class=\"code\" >Not_found<\/span> if the set is empty."}, "type": "Set.S.t -> Set.S.elt", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.max_elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|4972"}, "info": {"description": "Same as <a href=\"{value|Set.S.min_elt}\" ><span class=\"code\" >Set.S.min_elt<\/span><\/a>, but returns the largest element of the\n       given set."}, "type": "Set.S.t -> Set.S.elt", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|5093"}, "info": {"description": "Return one element of the given set, or raise <span class=\"code\" >Not_found<\/span> if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets."}, "type": "Set.S.t -> Set.S.elt", "params": [{"name": "", "type": "Set.S.t"}]}}, {"value": {"name": "Set.S.split", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/set.mli|5313"}, "info": {"description": "<span class=\"code\" >split x s<\/span> returns a triple <span class=\"code\" >(l, present, r)<\/span>, where\n          <span class=\"code\" >l<\/span> is the set of elements of <span class=\"code\" >s<\/span> that are\n          strictly less than <span class=\"code\" >x<\/span>;\n          <span class=\"code\" >r<\/span> is the set of elements of <span class=\"code\" >s<\/span> that are\n          strictly greater than <span class=\"code\" >x<\/span>;\n          <span class=\"code\" >present<\/span> is <span class=\"code\" >false<\/span> if <span class=\"code\" >s<\/span> contains no element equal to <span class=\"code\" >x<\/span>,\n          or <span class=\"code\" >true<\/span> if <span class=\"code\" >s<\/span> contains an element equal to <span class=\"code\" >x<\/span>."}, "type": "Set.S.elt -> Set.S.t -> Set.S.t * bool * Set.S.t", "params": [{"name": "", "type": "Set.S.elt"}, {"name": "", "type": "Set.S.t"}]}}]}}, "with": " with type elt = Ord.t"}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": [], "used_by": []}}}, "Queue": {"module": {"name": "Queue", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|0"}, "info": {"description": "First-in first-out queues.<br><\/br>\n   This module implements queues (FIFOs), with in-place modification."}, "type": "sig  end", "module_structure": [{"type": {"name": "Queue.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1124"}, "info": {"description": "The type of queues containing elements of type <span class=\"code\" >'a<\/span>."}, "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "abstract"}}}, {"exception": {"name": "Queue.Empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1124"}, "info": {"description": "Raised when <a href=\"{value|Queue.take}\" ><span class=\"code\" >Queue.take<\/span><\/a> or <a href=\"{value|Queue.peek}\" ><span class=\"code\" >Queue.peek<\/span><\/a> is applied to an empty queue."}}}, {"value": {"name": "Queue.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1222"}, "info": {"description": "Return a new queue, initially empty."}, "type": "unit -> 'a Queue.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Queue.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1293"}, "info": {"description": "<span class=\"code\" >add x q<\/span> adds the element <span class=\"code\" >x<\/span> at the end of the queue <span class=\"code\" >q<\/span>."}, "type": "'a -> 'a Queue.t -> unit", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.push", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1390"}, "info": {"description": "<span class=\"code\" >push<\/span> is a synonym for <span class=\"code\" >add<\/span>."}, "type": "'a -> 'a Queue.t -> unit", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.take", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1459"}, "info": {"description": "<span class=\"code\" >take q<\/span> removes and returns the first element in queue <span class=\"code\" >q<\/span>,\n   or raises <span class=\"code\" >Empty<\/span> if the queue is empty."}, "type": "'a Queue.t -> 'a", "params": [{"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.pop", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1594"}, "info": {"description": "<span class=\"code\" >pop<\/span> is a synonym for <span class=\"code\" >take<\/span>."}, "type": "'a Queue.t -> 'a", "params": [{"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.peek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1654"}, "info": {"description": "<span class=\"code\" >peek q<\/span> returns the first element in queue <span class=\"code\" >q<\/span>, without removing\n   it from the queue, or raises <span class=\"code\" >Empty<\/span> if the queue is empty."}, "type": "'a Queue.t -> 'a", "params": [{"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.top", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1813"}, "info": {"description": "<span class=\"code\" >top<\/span> is a synonym for <span class=\"code\" >peek<\/span>."}, "type": "'a Queue.t -> 'a", "params": [{"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1873"}, "info": {"description": "Discard all elements from a queue."}, "type": "'a Queue.t -> unit", "params": [{"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|1941"}, "info": {"description": "Return a copy of the given queue."}, "type": "'a Queue.t -> 'a Queue.t", "params": [{"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|2007"}, "info": {"description": "Return <span class=\"code\" >true<\/span> if the given queue is empty, <span class=\"code\" >false<\/span> otherwise."}, "type": "'a Queue.t -> bool", "params": [{"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|2105"}, "info": {"description": "Return the number of elements in a queue."}, "type": "'a Queue.t -> int", "params": [{"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|2180"}, "info": {"description": "<span class=\"code\" >iter f q<\/span> applies <span class=\"code\" >f<\/span> in turn to all elements of <span class=\"code\" >q<\/span>,\n   from the least recently entered to the most recently entered.\n   The queue itself is unchanged."}, "type": "('a -> unit) -> 'a Queue.t -> unit", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|2382"}, "info": {"description": "<span class=\"code\" >fold f accu q<\/span> is equivalent to <span class=\"code\" >List.fold_left f accu l<\/span>,\n   where <span class=\"code\" >l<\/span> is the list of <span class=\"code\" >q<\/span>'s elements. The queue remains\n   unchanged."}, "type": "('a -> 'b -> 'a) -> 'a -> 'b Queue.t -> 'a", "params": [{"name": "", "type": "'a -> 'b -> 'a"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a Queue.t"}]}}, {"value": {"name": "Queue.transfer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/queue.mli|2574"}, "info": {"description": "<span class=\"code\" >transfer q1 q2<\/span> adds all of <span class=\"code\" >q1<\/span>'s elements at the end of\n   the queue <span class=\"code\" >q2<\/span>, then clears <span class=\"code\" >q1<\/span>. It is equivalent to the\n   sequence <span class=\"code\" >iter (fun x -&gt; add x q2) q1; clear q1<\/span>, but runs\n   in constant time."}, "type": "'a Queue.t -> 'a Queue.t -> unit", "params": [{"name": "", "type": "'a Queue.t"}, {"name": "", "type": "'a Queue.t"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Printexc": {"module": {"name": "Printexc", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli|0"}, "info": {"description": "Facilities for printing exceptions."}, "type": "sig  end", "module_structure": [{"value": {"name": "Printexc.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli|995"}, "info": {"description": "<span class=\"code\" >Printexc.to_string e<\/span> returns a string representation of\n   the exception <span class=\"code\" >e<\/span>."}, "type": "exn -> string", "params": [{"name": "", "type": "exn"}]}}, {"value": {"name": "Printexc.print", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli|1112"}, "info": {"description": "<span class=\"code\" >Printexc.print fn x<\/span> applies <span class=\"code\" >fn<\/span> to <span class=\"code\" >x<\/span> and returns the result.\n   If the evaluation of <span class=\"code\" >fn x<\/span> raises any exception, the\n   name of the exception is printed on standard error output,\n   and the exception is raised again.\n   The typical use is to catch and report exceptions that\n   escape a function application."}, "type": "('a -> 'b) -> 'a -> 'b", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Printexc.catch", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli|1469"}, "info": {"description": "<span class=\"code\" >Printexc.catch fn x<\/span> is similar to <a href=\"{value|Printexc.print}\" ><span class=\"code\" >Printexc.print<\/span><\/a>, but\n   aborts the program with exit code 2 after printing the\n   uncaught exception.  This function is deprecated: the runtime\n   system is now able to print uncaught exceptions as precisely\n   as <span class=\"code\" >Printexc.catch<\/span> does.  Moreover, calling <span class=\"code\" >Printexc.catch<\/span>\n   makes it harder to track the location of the exception\n   using the debugger or the stack backtrace facility.\n   So, do not use <span class=\"code\" >Printexc.catch<\/span> in new code."}, "type": "('a -> 'b) -> 'a -> 'b", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Printexc.get_backtrace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli|1984"}, "info": {"description": "<span class=\"code\" >Printexc.get_backtrace ()<\/span> returns a string containing the\n    same exception backtrace that <span class=\"code\" >Printexc.print_backtrace<\/span> would\n    print.", "since": "3.11.0"}, "type": "unit -> string", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Printexc.record_backtrace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli|2182"}, "info": {"description": "<span class=\"code\" >Printexc.record_backtrace b<\/span> turns recording of exception backtraces\n    on (if <span class=\"code\" >b = true<\/span>) or off (if <span class=\"code\" >b = false<\/span>).  Initially, backtraces\n    are not recorded, unless the <span class=\"code\" >b<\/span> flag is given to the program\n    through the <span class=\"code\" >OCAMLRUNPARAM<\/span> variable.", "since": "3.11.0"}, "type": "bool -> unit", "params": [{"name": "", "type": "bool"}]}}, {"value": {"name": "Printexc.backtrace_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli|2492"}, "info": {"description": "<span class=\"code\" >Printexc.backtrace_status()<\/span> returns <span class=\"code\" >true<\/span> if exception\n    backtraces are currently recorded, <span class=\"code\" >false<\/span> if not.", "since": "3.11.0"}, "type": "unit -> bool", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Printexc.register_printer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printexc.mli|2666"}, "info": {"description": "<span class=\"code\" >Printexc.register_printer fn<\/span> registers <span class=\"code\" >fn<\/span> as an exception\n    printer.  The printer should return <span class=\"code\" >None<\/span> or raise an exception\n    if it does not know how to convert the passed exception, and <span class=\"code\" >Some\n    s<\/span> with <span class=\"code\" >s<\/span> the resulting string if it can convert the passed\n    exception. Exceptions raised by the printer are ignored.<br><\/br>\n    When converting an exception into a string, the printers will be invoked\n    in the reverse order of their registrations, until a printer returns\n    a <span class=\"code\" >Some s<\/span> value (if no such printer exists, the runtime will use a\n    generic printer).", "since": "3.11.2"}, "type": "(exn -> string option) -> unit", "params": [{"name": "", "type": "exn -> string option"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Pervasives": {"module": {"name": "Pervasives", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|0"}, "info": {"description": "The initially opened module.<br><\/br>\n   This module provides the basic operations over the built-in types\n   (numbers, booleans, strings, exceptions, references, lists, arrays,\n   input-output channels, ...).<br><\/br>\n   This module is automatically opened at the beginning of each compilation.\n   All components of this module can therefore be referred by their short\n   name, without prefixing them by <span class=\"code\" >Pervasives<\/span>."}, "type": "sig  end", "module_structure": [{"comment": "<h6>Exceptions<\/h6>"}, {"value": {"name": "Pervasives.raise", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|1385"}, "info": {"description": "Raise the given exception value"}, "type": "exn -> 'a", "params": [{"name": "", "type": "exn"}]}}, {"value": {"name": "Pervasives.invalid_arg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|1463"}, "info": {"description": "Raise exception <span class=\"code\" >Invalid_argument<\/span> with the given string."}, "type": "string -> 'a", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.failwith", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|1560"}, "info": {"description": "Raise exception <span class=\"code\" >Failure<\/span> with the given string."}, "type": "string -> 'a", "params": [{"name": "", "type": "string"}]}}, {"exception": {"name": "Pervasives.Exit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|1645"}, "info": {"description": "The <span class=\"code\" >Exit<\/span> exception is not raised by any library function.  It is\n    provided for use in your programs."}}}, {"comment": "<h6>Comparisons<\/h6>"}, {"value": {"name": "Pervasives.(=)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|1798"}, "info": {"description": "<span class=\"code\" >e1 = e2<\/span> tests for structural equality of <span class=\"code\" >e1<\/span> and <span class=\"code\" >e2<\/span>.\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises <span class=\"code\" >Invalid_argument<\/span>.\n   Equality between cyclic data structures may not terminate."}, "type": "'a -> 'a -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.(<>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|2231"}, "info": {"description": "Negation of <a href=\"{value|Pervasives.(=)}\" ><span class=\"code\" >Pervasives.(=)<\/span><\/a>."}, "type": "'a -> 'a -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.(<)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|2319"}, "info": {"description": "See <a href=\"{value|Pervasives.(&gt;=)}\" ><span class=\"code\" >Pervasives.(&gt;=)<\/span><\/a>."}, "type": "'a -> 'a -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.(>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|2399"}, "info": {"description": "See <a href=\"{value|Pervasives.(&gt;=)}\" ><span class=\"code\" >Pervasives.(&gt;=)<\/span><\/a>."}, "type": "'a -> 'a -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.(<=)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|2482"}, "info": {"description": "See <a href=\"{value|Pervasives.(&gt;=)}\" ><span class=\"code\" >Pervasives.(&gt;=)<\/span><\/a>."}, "type": "'a -> 'a -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.(>=)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|2564"}, "info": {"description": "Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with <span class=\"code\" >(=)<\/span>. As in the case\n   of <span class=\"code\" >(=)<\/span>, mutable structures are compared by contents.\n   Comparison between functional values raises <span class=\"code\" >Invalid_argument<\/span>.\n   Comparison between cyclic structures may not terminate."}, "type": "'a -> 'a -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|3071"}, "info": {"description": "<span class=\"code\" >compare x y<\/span> returns <span class=\"code\" >0<\/span> if <span class=\"code\" >x<\/span> is equal to <span class=\"code\" >y<\/span>,\n   a negative integer if <span class=\"code\" >x<\/span> is less than <span class=\"code\" >y<\/span>, and a positive integer\n   if <span class=\"code\" >x<\/span> is greater than <span class=\"code\" >y<\/span>.  The ordering implemented by <span class=\"code\" >compare<\/span>\n   is compatible with the comparison predicates <span class=\"code\" >=<\/span>, <span class=\"code\" >&lt;<\/span> and <span class=\"code\" >&gt;<\/span>\n   defined above,  with one difference on the treatment of the float value\n   <a href=\"{value|Pervasives.nan}\" ><span class=\"code\" >Pervasives.nan<\/span><\/a>.  Namely, the comparison predicates treat <span class=\"code\" >nan<\/span>\n   as different from any other float value, including itself;\n   while <span class=\"code\" >compare<\/span> treats <span class=\"code\" >nan<\/span> as equal to itself and less than any\n   other float value.  This treatment of <span class=\"code\" >nan<\/span> ensures that <span class=\"code\" >compare<\/span>\n   defines a total ordering relation.<br><\/br>\n   <span class=\"code\" >compare<\/span> applied to functional values may raise <span class=\"code\" >Invalid_argument<\/span>.\n   <span class=\"code\" >compare<\/span> applied to cyclic structures may not terminate.<br><\/br>\n   The <span class=\"code\" >compare<\/span> function can be used as the comparison function\n   required by the <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a> and <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a> functors, as well as\n   the <a href=\"{value|List.sort}\" ><span class=\"code\" >List.sort<\/span><\/a> and <a href=\"{value|Array.sort}\" ><span class=\"code\" >Array.sort<\/span><\/a> functions."}, "type": "'a -> 'a -> int", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.min", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|4082"}, "info": {"description": "Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value <span class=\"code\" >nan<\/span>."}, "type": "'a -> 'a -> 'a", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.max", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|4246"}, "info": {"description": "Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value <span class=\"code\" >nan<\/span>."}, "type": "'a -> 'a -> 'a", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.(==)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|4410"}, "info": {"description": "<span class=\"code\" >e1 == e2<\/span> tests for physical equality of <span class=\"code\" >e1<\/span> and <span class=\"code\" >e2<\/span>.\n   On mutable types such as references, arrays, strings, records with\n   mutable fields and objects with mutable instance variables,\n   <span class=\"code\" >e1 == e2<\/span> is true if and only if physical modification of <span class=\"code\" >e1<\/span>\n   also affects <span class=\"code\" >e2<\/span>.\n   On non-mutable types, the behavior of <span class=\"code\" >(==)<\/span> is\n   implementation-dependent; however, it is guaranteed that\n   <span class=\"code\" >e1 == e2<\/span> implies <span class=\"code\" >compare e1 e2 = 0<\/span>."}, "type": "'a -> 'a -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.(!=)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|4894"}, "info": {"description": "Negation of <a href=\"{value|Pervasives.(==)}\" ><span class=\"code\" >Pervasives.(==)<\/span><\/a>."}, "type": "'a -> 'a -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"comment": "<h6>Boolean operations<\/h6>"}, {"value": {"name": "Pervasives.not", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|5012"}, "info": {"description": "The boolean negation."}, "type": "bool -> bool", "params": [{"name": "", "type": "bool"}]}}, {"value": {"name": "Pervasives.(&&)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|5083"}, "info": {"description": "The boolean ``and''. Evaluation is sequential, left-to-right:\n   in <span class=\"code\" >e1 &amp;&amp; e2<\/span>, <span class=\"code\" >e1<\/span> is evaluated first, and if it returns <span class=\"code\" >false<\/span>,\n   <span class=\"code\" >e2<\/span> is not evaluated at all."}, "type": "bool -> bool -> bool", "params": [{"name": "", "type": "bool"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Pervasives.(&)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|5308"}, "info": {"deprecated": "<a href=\"{value|Pervasives.(&amp;&amp;)}\" ><span class=\"code\" >Pervasives.(&amp;&amp;)<\/span><\/a> should be used instead."}, "type": "bool -> bool -> bool", "params": [{"name": "", "type": "bool"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Pervasives.(||)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|5424"}, "info": {"description": "The boolean ``or''. Evaluation is sequential, left-to-right:\n   in <span class=\"code\" >e1 || e2<\/span>, <span class=\"code\" >e1<\/span> is evaluated first, and if it returns <span class=\"code\" >true<\/span>,\n   <span class=\"code\" >e2<\/span> is not evaluated at all."}, "type": "bool -> bool -> bool", "params": [{"name": "", "type": "bool"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Pervasives.(or)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|5646"}, "info": {"deprecated": "<a href=\"{value|Pervasives.(||)}\" ><span class=\"code\" >Pervasives.(||)<\/span><\/a> should be used instead."}, "type": "bool -> bool -> bool", "params": [{"name": "", "type": "bool"}, {"name": "", "type": "bool"}]}}, {"comment": "<h6>Integer arithmetic<\/h6>"}, {"comment": "Integers are 31 bits wide (or 63 bits on 64-bit processors).\n   All operations are taken modulo 2<sup>31<\/sup> (or 2<sup>63<\/sup>).\n   They do not fail on overflow."}, {"value": {"name": "Pervasives.(~-)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|5950"}, "info": {"description": "Unary negation. You can also write <span class=\"code\" >- e<\/span> instead of <span class=\"code\" >~- e<\/span>."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(~+)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|6059"}, "info": {"description": "Unary addition. You can also write <span class=\"code\" >+ e<\/span> instead of <span class=\"code\" >~+ e<\/span>.", "since": "3.12.0"}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.succ", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|6188"}, "info": {"description": "<span class=\"code\" >succ x<\/span> is <span class=\"code\" >x + 1<\/span>."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.pred", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|6257"}, "info": {"description": "<span class=\"code\" >pred x<\/span> is <span class=\"code\" >x - 1<\/span>."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(+)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|6326"}, "info": {"description": "Integer addition."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(-)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|6399"}, "info": {"description": "Integer subtraction."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.( * )", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|6475"}, "info": {"description": "Integer multiplication."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(\/)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|6554"}, "info": {"description": "Integer division.\n   Raise <span class=\"code\" >Division_by_zero<\/span> if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if <span class=\"code\" >x &gt;= 0<\/span> and <span class=\"code\" >y &gt; 0<\/span>, <span class=\"code\" >x \/ y<\/span> is the greatest integer\n   less than or equal to the real quotient of <span class=\"code\" >x<\/span> by <span class=\"code\" >y<\/span>.  Moreover,\n   <span class=\"code\" >(- x) \/ y = x \/ (- y) = - (x \/ y)<\/span>."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(mod)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|6946"}, "info": {"description": "Integer remainder.  If <span class=\"code\" >y<\/span> is not zero, the result\n   of <span class=\"code\" >x mod y<\/span> satisfies the following properties:\n   <span class=\"code\" >x = (x \/ y) * y + x mod y<\/span> and\n   <span class=\"code\" >abs(x mod y) &lt;= abs(y) - 1<\/span>.\n   If <span class=\"code\" >y = 0<\/span>, <span class=\"code\" >x mod y<\/span> raises <span class=\"code\" >Division_by_zero<\/span>.\n   Note that <span class=\"code\" >x mod y<\/span> is negative only if <span class=\"code\" >x &lt; 0<\/span>.\n   Raise <span class=\"code\" >Division_by_zero<\/span> if <span class=\"code\" >y<\/span> is zero."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.abs", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|7322"}, "info": {"description": "Return the absolute value of the argument.  Note that this may be\n  negative if the argument is <span class=\"code\" >min_int<\/span>."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.max_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|7458"}, "info": {"description": "The greatest representable integer."}, "type": "int", "params": []}}, {"value": {"name": "Pervasives.min_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|7520"}, "info": {"description": "The smallest representable integer."}, "type": "int", "params": []}}, {"comment": "<h7>Bitwise operations<\/h7>"}, {"value": {"name": "Pervasives.(land)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|7614"}, "info": {"description": "Bitwise logical and."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(lor)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|7693"}, "info": {"description": "Bitwise logical or."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(lxor)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|7769"}, "info": {"description": "Bitwise logical exclusive or."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.lnot", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|7857"}, "info": {"description": "Bitwise logical negation."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(lsl)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|7913"}, "info": {"description": "<span class=\"code\" >n lsl m<\/span> shifts <span class=\"code\" >n<\/span> to the left by <span class=\"code\" >m<\/span> bits.\n   The result is unspecified if <span class=\"code\" >m &lt; 0<\/span> or <span class=\"code\" >m &gt;= bitsize<\/span>,\n   where <span class=\"code\" >bitsize<\/span> is <span class=\"code\" >32<\/span> on a 32-bit platform and\n   <span class=\"code\" >64<\/span> on a 64-bit platform."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(lsr)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|8157"}, "info": {"description": "<span class=\"code\" >n lsr m<\/span> shifts <span class=\"code\" >n<\/span> to the right by <span class=\"code\" >m<\/span> bits.\n   This is a logical shift: zeroes are inserted regardless of\n   the sign of <span class=\"code\" >n<\/span>.\n   The result is unspecified if <span class=\"code\" >m &lt; 0<\/span> or <span class=\"code\" >m &gt;= bitsize<\/span>."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.(asr)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|8402"}, "info": {"description": "<span class=\"code\" >n asr m<\/span> shifts <span class=\"code\" >n<\/span> to the right by <span class=\"code\" >m<\/span> bits.\n   This is an arithmetic shift: the sign bit of <span class=\"code\" >n<\/span> is replicated.\n   The result is unspecified if <span class=\"code\" >m &lt; 0<\/span> or <span class=\"code\" >m &gt;= bitsize<\/span>."}, "type": "int -> int -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"comment": "<h6>Floating-point arithmetic<\/h6><br><\/br>\n   Caml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as <span class=\"code\" >infinity<\/span> for <span class=\"code\" >1.0 \/. 0.0<\/span>,\n   <span class=\"code\" >neg_infinity<\/span> for <span class=\"code\" >-1.0 \/. 0.0<\/span>, and <span class=\"code\" >nan<\/span> (``not a number'')\n   for <span class=\"code\" >0.0 \/. 0.0<\/span>.  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   <span class=\"code\" >1.0 \/. infinity<\/span> is <span class=\"code\" >0.0<\/span>, and any arithmetic operation with <span class=\"code\" >nan<\/span>\n   as argument returns <span class=\"code\" >nan<\/span> as result."}, {"value": {"name": "Pervasives.(~-.)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|9286"}, "info": {"description": "Unary negation. You can also write <span class=\"code\" >-. e<\/span> instead of <span class=\"code\" >~-. e<\/span>."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.(~+.)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|9404"}, "info": {"description": "Unary addition. You can also write <span class=\"code\" >+. e<\/span> instead of <span class=\"code\" >~+. e<\/span>.", "since": "3.12.0"}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.(+.)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|9540"}, "info": {"description": "Floating-point addition"}, "type": "float -> float -> float", "params": [{"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.(-.)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|9628"}, "info": {"description": "Floating-point subtraction"}, "type": "float -> float -> float", "params": [{"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.( *. )", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|9719"}, "info": {"description": "Floating-point multiplication"}, "type": "float -> float -> float", "params": [{"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.(\/.)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|9813"}, "info": {"description": "Floating-point division."}, "type": "float -> float -> float", "params": [{"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.( ** )", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|9902"}, "info": {"description": "Exponentiation."}, "type": "float -> float -> float", "params": [{"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.sqrt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10003"}, "info": {"description": "Square root."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.exp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10090"}, "info": {"description": "Exponential."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.log", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10174"}, "info": {"description": "Natural logarithm."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.log10", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10264"}, "info": {"description": "Base 10 logarithm."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.expm1", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10360"}, "info": {"description": "<span class=\"code\" >expm1 x<\/span> computes <span class=\"code\" >exp x -. 1.0<\/span>, giving numerically-accurate results\n    even if <span class=\"code\" >x<\/span> is close to <span class=\"code\" >0.0<\/span>.", "since": "3.12.0"}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.log1p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10566"}, "info": {"description": "<span class=\"code\" >log1p x<\/span> computes <span class=\"code\" >log(1.0 +. x)<\/span> (natural logarithm),\n    giving numerically-accurate results even if <span class=\"code\" >x<\/span> is close to <span class=\"code\" >0.0<\/span>.", "since": "3.12.0"}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.cos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10793"}, "info": {"description": "Cosine.  Argument is in radians."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.sin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10897"}, "info": {"description": "Sine.  Argument is in radians."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.tan", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|10999"}, "info": {"description": "Tangent.  Argument is in radians."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.acos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|11104"}, "info": {"description": "Arc cosine.  The argument must fall within the range <span class=\"code\" >[-1.0, 1.0]<\/span>.\n    Result is in radians and is between <span class=\"code\" >0.0<\/span> and <span class=\"code\" >pi<\/span>."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.asin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|11302"}, "info": {"description": "Arc sine.  The argument must fall within the range <span class=\"code\" >[-1.0, 1.0]<\/span>.\n    Result is in radians and is between <span class=\"code\" >-pi\/2<\/span> and <span class=\"code\" >pi\/2<\/span>."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.atan", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|11502"}, "info": {"description": "Arc tangent.\n    Result is in radians and is between <span class=\"code\" >-pi\/2<\/span> and <span class=\"code\" >pi\/2<\/span>."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.atan2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|11649"}, "info": {"description": "<span class=\"code\" >atan x y<\/span> returns the arc tangent of <span class=\"code\" >y \/. x<\/span>.  The signs of <span class=\"code\" >x<\/span>\n    and <span class=\"code\" >y<\/span> are used to determine the quadrant of the result.\n    Result is in radians and is between <span class=\"code\" >-pi<\/span> and <span class=\"code\" >pi<\/span>."}, "type": "float -> float -> float", "params": [{"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.cosh", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|11919"}, "info": {"description": "Hyperbolic cosine.  Argument is in radians."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.sinh", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|12037"}, "info": {"description": "Hyperbolic sine.  Argument is in radians."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.tanh", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|12153"}, "info": {"description": "Hyperbolic tangent.  Argument is in radians."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.ceil", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|12272"}, "info": {"description": "Round above to an integer value.\n    <span class=\"code\" >ceil f<\/span> returns the least integer value greater than or equal to <span class=\"code\" >f<\/span>.\n    The result is returned as a float."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.floor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|12493"}, "info": {"description": "Round below to an integer value.\n    <span class=\"code\" >floor f<\/span> returns the greatest integer value less than or\n    equal to <span class=\"code\" >f<\/span>.\n    The result is returned as a float."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.abs_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|12722"}, "info": {"description": "<span class=\"code\" >abs_float f<\/span> returns the absolute value of <span class=\"code\" >f<\/span>."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.mod_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|12829"}, "info": {"description": "<span class=\"code\" >mod_float a b<\/span> returns the remainder of <span class=\"code\" >a<\/span> with respect to\n   <span class=\"code\" >b<\/span>.  The returned value is <span class=\"code\" >a -. n *. b<\/span>, where <span class=\"code\" >n<\/span>\n   is the quotient <span class=\"code\" >a \/. b<\/span> rounded towards zero to an integer."}, "type": "float -> float -> float", "params": [{"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.frexp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|13098"}, "info": {"description": "<span class=\"code\" >frexp f<\/span> returns the pair of the significant\n   and the exponent of <span class=\"code\" >f<\/span>.  When <span class=\"code\" >f<\/span> is zero, the\n   significant <span class=\"code\" >x<\/span> and the exponent <span class=\"code\" >n<\/span> of <span class=\"code\" >f<\/span> are equal to\n   zero.  When <span class=\"code\" >f<\/span> is non-zero, they are defined by\n   <span class=\"code\" >f = x *. 2 ** n<\/span> and <span class=\"code\" >0.5 &lt;= x &lt; 1.0<\/span>."}, "type": "float -> float * int", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.ldexp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|13417"}, "info": {"description": "<span class=\"code\" >ldexp x n<\/span> returns <span class=\"code\" >x *. 2 ** n<\/span>."}, "type": "float -> int -> float", "params": [{"name": "", "type": "float"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.modf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|13520"}, "info": {"description": "<span class=\"code\" >modf f<\/span> returns the pair of the fractional and integral\n   part of <span class=\"code\" >f<\/span>."}, "type": "float -> float * float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|13660"}, "info": {"description": "Same as <a href=\"{value|Pervasives.float_of_int}\" ><span class=\"code\" >Pervasives.float_of_int<\/span><\/a>."}, "type": "int -> float", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.float_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|13750"}, "info": {"description": "Convert an integer to floating-point."}, "type": "int -> float", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.truncate", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|13849"}, "info": {"description": "Same as <a href=\"{value|Pervasives.int_of_float}\" ><span class=\"code\" >Pervasives.int_of_float<\/span><\/a>."}, "type": "float -> int", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.int_of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|13942"}, "info": {"description": "Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is <span class=\"code\" >nan<\/span> or falls outside the\n   range of representable integers."}, "type": "float -> int", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.infinity", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|14170"}, "info": {"description": "Positive infinity."}, "type": "float", "params": []}}, {"value": {"name": "Pervasives.neg_infinity", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|14218"}, "info": {"description": "Negative infinity."}, "type": "float", "params": []}}, {"value": {"name": "Pervasives.nan", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|14270"}, "info": {"description": "A special floating-point value denoting the result of an\n   undefined operation such as <span class=\"code\" >0.0 \/. 0.0<\/span>.  Stands for\n   ``not a number''.  Any floating-point operation with <span class=\"code\" >nan<\/span> as\n   argument returns <span class=\"code\" >nan<\/span> as result.  As for floating-point comparisons,\n   <span class=\"code\" >=<\/span>, <span class=\"code\" >&lt;<\/span>, <span class=\"code\" >&lt;=<\/span>, <span class=\"code\" >&gt;<\/span> and <span class=\"code\" >&gt;=<\/span> return <span class=\"code\" >false<\/span> and <span class=\"code\" >&lt;&gt;<\/span> returns <span class=\"code\" >true<\/span>\n   if one or both of their arguments is <span class=\"code\" >nan<\/span>."}, "type": "float", "params": []}}, {"value": {"name": "Pervasives.max_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|14664"}, "info": {"description": "The largest positive finite value of type <span class=\"code\" >float<\/span>."}, "type": "float", "params": []}}, {"value": {"name": "Pervasives.min_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|14745"}, "info": {"description": "The smallest positive, non-zero, non-denormalized value of type <span class=\"code\" >float<\/span>."}, "type": "float", "params": []}}, {"value": {"name": "Pervasives.epsilon_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|14848"}, "info": {"description": "The difference between <span class=\"code\" >1.0<\/span> and the smallest exactly representable\n    floating-point number greater than <span class=\"code\" >1.0<\/span>."}, "type": "float", "params": []}}, {"type": {"name": "Pervasives.fpclass", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|15001"}, "info": {"description": "The five classes of floating-point numbers, as determined by\n   the <a href=\"{value|Pervasives.classify_float}\" ><span class=\"code\" >Pervasives.classify_float<\/span><\/a> function."}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "FP_normal", "description": "Normal number, none of the below", "type": []}, {"name": "FP_subnormal", "description": "Number very close to 0.0, has reduced precision", "type": []}, {"name": "FP_zero", "description": "Number is 0.0 or -0.0", "type": []}, {"name": "FP_infinite", "description": "Number is positive or negative infinity", "type": []}, {"name": "FP_nan", "description": "Not a number: result of an undefined operation", "type": []}]}}}, {"value": {"name": "Pervasives.classify_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|15471"}, "info": {"description": "Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number."}, "type": "float -> Pervasives.fpclass", "params": [{"name": "", "type": "float"}]}}, {"comment": "<h6>String operations<\/h6><br><\/br>\n   More string operations are provided in module <a href=\"{module|String}\" ><span class=\"code\" >String<\/span><\/a>."}, {"value": {"name": "Pervasives.(^)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|15746"}, "info": {"description": "String concatenation."}, "type": "string -> string -> string", "params": [{"name": "", "type": "string"}, {"name": "", "type": "string"}]}}, {"comment": "<h6>Character operations<\/h6><br><\/br>\n   More character operations are provided in module <a href=\"{module|Char}\" ><span class=\"code\" >Char<\/span><\/a>."}, {"value": {"name": "Pervasives.int_of_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|15911"}, "info": {"description": "Return the ASCII code of the argument."}, "type": "char -> int", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Pervasives.char_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|16007"}, "info": {"description": "Return the character with the given ASCII code.\n   Raise <span class=\"code\" >Invalid_argument \"char_of_int\"<\/span> if the argument is\n   outside the range 0--255."}, "type": "int -> char", "params": [{"name": "", "type": "int"}]}}, {"comment": "<h6>Unit operations<\/h6>"}, {"value": {"name": "Pervasives.ignore", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|16212"}, "info": {"description": "Discard the value of its argument and return <span class=\"code\" >()<\/span>.\n   For instance, <span class=\"code\" >ignore(f x)<\/span> discards the result of\n   the side-effecting function <span class=\"code\" >f<\/span>.  It is equivalent to\n   <span class=\"code\" >f x; ()<\/span>, except that the latter may generate a\n   compiler warning; writing <span class=\"code\" >ignore(f x)<\/span> instead\n   avoids the warning."}, "type": "'a -> unit", "params": [{"name": "", "type": "'a"}]}}, {"comment": "<h6>String conversion functions<\/h6>"}, {"value": {"name": "Pervasives.string_of_bool", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|16590"}, "info": {"description": "Return the string representation of a boolean."}, "type": "bool -> string", "params": [{"name": "", "type": "bool"}]}}, {"value": {"name": "Pervasives.bool_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|16681"}, "info": {"description": "Convert the given string to a boolean.\n   Raise <span class=\"code\" >Invalid_argument \"bool_of_string\"<\/span> if the string is not\n   <span class=\"code\" >\"true\"<\/span> or <span class=\"code\" >\"false\"<\/span>."}, "type": "string -> bool", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.string_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|16856"}, "info": {"description": "Return the string representation of an integer, in decimal."}, "type": "int -> string", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.int_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|16958"}, "info": {"description": "Convert the given string to an integer.\n   The string is read in decimal (by default) or in hexadecimal (if it\n   begins with <span class=\"code\" >0x<\/span> or <span class=\"code\" >0X<\/span>), octal (if it begins with <span class=\"code\" >0o<\/span> or <span class=\"code\" >0O<\/span>),\n   or binary (if it begins with <span class=\"code\" >0b<\/span> or <span class=\"code\" >0B<\/span>).\n   Raise <span class=\"code\" >Failure \"int_of_string\"<\/span> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <span class=\"code\" >int<\/span>."}, "type": "string -> int", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.string_of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|17451"}, "info": {"description": "Return the string representation of a floating-point number."}, "type": "float -> string", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.float_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|17558"}, "info": {"description": "Convert the given string to a float.  Raise <span class=\"code\" >Failure \"float_of_string\"<\/span>\n   if the given string is not a valid representation of a float."}, "type": "string -> float", "params": [{"name": "", "type": "string"}]}}, {"comment": "<h6>Pair operations<\/h6>"}, {"value": {"name": "Pervasives.fst", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|17800"}, "info": {"description": "Return the first component of a pair."}, "type": "'a * 'b -> 'a", "params": [{"tuple": {"type": "'a * 'b", "contents": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}]}}, {"value": {"name": "Pervasives.snd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|17887"}, "info": {"description": "Return the second component of a pair."}, "type": "'a * 'b -> 'b", "params": [{"tuple": {"type": "'a * 'b", "contents": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}]}}, {"comment": "<h6>List operations<\/h6><br><\/br>\n   More list operations are provided in module <a href=\"{module|List}\" ><span class=\"code\" >List<\/span><\/a>."}, {"value": {"name": "Pervasives.(@)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18061"}, "info": {"description": "List concatenation."}, "type": "'a list -> 'a list -> 'a list", "params": [{"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"comment": "<h6>Input\/output<\/h6>"}, {"type": {"name": "Pervasives.in_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18162"}, "info": {"description": "The type of input channel."}, "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Pervasives.out_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18213"}, "info": {"description": "The type of output channel."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Pervasives.stdin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18261"}, "info": {"description": "The standard input for the process."}, "type": "Pervasives.in_channel", "params": []}}, {"value": {"name": "Pervasives.stdout", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18328"}, "info": {"description": "The standard output for the process."}, "type": "Pervasives.out_channel", "params": []}}, {"value": {"name": "Pervasives.stderr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18398"}, "info": {"description": "The standard error ouput for the process."}, "type": "Pervasives.out_channel", "params": []}}, {"comment": "<h7>Output functions on standard output<\/h7>"}, {"value": {"name": "Pervasives.print_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18522"}, "info": {"description": "Print a character on standard output."}, "type": "char -> unit", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Pervasives.print_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18598"}, "info": {"description": "Print a string on standard output."}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.print_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18675"}, "info": {"description": "Print an integer, in decimal, on standard output."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.print_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18761"}, "info": {"description": "Print a floating-point number, in decimal, on standard output."}, "type": "float -> unit", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.print_endline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|18864"}, "info": {"description": "Print a string, followed by a newline character, on\n   standard output and flush standard output."}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.print_newline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|19005"}, "info": {"description": "Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h7>Output functions on standard error<\/h7>"}, {"value": {"name": "Pervasives.prerr_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|19237"}, "info": {"description": "Print a character on standard error."}, "type": "char -> unit", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Pervasives.prerr_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|19312"}, "info": {"description": "Print a string on standard error."}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.prerr_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|19388"}, "info": {"description": "Print an integer, in decimal, on standard error."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.prerr_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|19473"}, "info": {"description": "Print a floating-point number, in decimal, on standard error."}, "type": "float -> unit", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Pervasives.prerr_endline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|19575"}, "info": {"description": "Print a string, followed by a newline character on standard error\n   and flush standard error."}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.prerr_newline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|19713"}, "info": {"description": "Print a newline character on standard error, and flush\n   standard error."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h7>Input functions on standard input<\/h7>"}, {"value": {"name": "Pervasives.read_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|19875"}, "info": {"description": "Flush standard output, then read characters from standard input\n   until a newline character is encountered. Return the string of\n   all characters read, without the newline character at the end."}, "type": "unit -> string", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Pervasives.read_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|20110"}, "info": {"description": "Flush standard output, then read one line from standard input\n   and convert it to an integer. Raise <span class=\"code\" >Failure \"int_of_string\"<\/span>\n   if the line read is not a valid representation of an integer."}, "type": "unit -> int", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Pervasives.read_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|20337"}, "info": {"description": "Flush standard output, then read one line from standard input\n   and convert it to a floating-point number.\n   The result is unspecified if the line read is not a valid\n   representation of a floating-point number."}, "type": "unit -> float", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h7>General output functions<\/h7>"}, {"type": {"name": "Pervasives.open_flag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|20634"}, "info": {"description": "Opening modes for <a href=\"{value|Pervasives.open_out_gen}\" ><span class=\"code\" >Pervasives.open_out_gen<\/span><\/a> and\n  <a href=\"{value|Pervasives.open_in_gen}\" ><span class=\"code\" >Pervasives.open_in_gen<\/span><\/a>."}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Open_rdonly", "description": "open for reading.", "type": []}, {"name": "Open_wronly", "description": "open for writing.", "type": []}, {"name": "Open_append", "description": "open for appending: always write at end of file.", "type": []}, {"name": "Open_creat", "description": "create the file if it does not exist.", "type": []}, {"name": "Open_trunc", "description": "empty the file if it already exists.", "type": []}, {"name": "Open_excl", "description": "fail if Open_creat and the file already exists.", "type": []}, {"name": "Open_binary", "description": "open in binary mode (no conversion).", "type": []}, {"name": "Open_text", "description": "open in text mode (may perform conversions).", "type": []}, {"name": "Open_nonblock", "description": "open in non-blocking mode.", "type": []}]}}}, {"value": {"name": "Pervasives.open_out", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|21301"}, "info": {"description": "Open the named file for writing, and return a new output channel\n   on that file, positionned at the beginning of the file. The\n   file is truncated to zero length if it already exists. It\n   is created if it does not already exists.\n   Raise <span class=\"code\" >Sys_error<\/span> if the file could not be opened."}, "type": "string -> Pervasives.out_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.open_out_bin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|21634"}, "info": {"description": "Same as <a href=\"{value|Pervasives.open_out}\" ><span class=\"code\" >Pervasives.open_out<\/span><\/a>, but the file is opened in binary mode,\n   so that no translation takes place during writes. On operating\n   systems that do not distinguish between text mode and binary\n   mode, this function behaves like <a href=\"{value|Pervasives.open_out}\" ><span class=\"code\" >Pervasives.open_out<\/span><\/a>."}, "type": "string -> Pervasives.out_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.open_out_gen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|21944"}, "info": {"description": "<span class=\"code\" >open_out_gen mode perm filename<\/span> opens the named file for writing,\n   as described above. The extra argument <span class=\"code\" >mode<\/span>\n   specify the opening mode. The extra argument <span class=\"code\" >perm<\/span> specifies\n   the file permissions, in case the file must be created.\n   <a href=\"{value|Pervasives.open_out}\" ><span class=\"code\" >Pervasives.open_out<\/span><\/a> and <a href=\"{value|Pervasives.open_out_bin}\" ><span class=\"code\" >Pervasives.open_out_bin<\/span><\/a> are special\n   cases of this function."}, "type": "Pervasives.open_flag list -> int -> string -> Pervasives.out_channel", "params": [{"name": "", "type": "Pervasives.open_flag list"}, {"name": "", "type": "int"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.flush", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|22355"}, "info": {"description": "Flush the buffer associated with the given output channel,\n   performing all pending writes on that channel.\n   Interactive programs must be careful about flushing standard\n   output and standard error at the right time."}, "type": "Pervasives.out_channel -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Pervasives.flush_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|22616"}, "info": {"description": "Flush all open output channels; ignore errors."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Pervasives.output_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|22700"}, "info": {"description": "Write the character on the given output channel."}, "type": "Pervasives.out_channel -> char -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Pervasives.output_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|22803"}, "info": {"description": "Write the string on the given output channel."}, "type": "Pervasives.out_channel -> string -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|22907"}, "info": {"description": "<span class=\"code\" >output oc buf pos len<\/span> writes <span class=\"code\" >len<\/span> characters from string <span class=\"code\" >buf<\/span>,\n   starting at offset <span class=\"code\" >pos<\/span>, to the given output channel <span class=\"code\" >oc<\/span>.\n   Raise <span class=\"code\" >Invalid_argument \"output\"<\/span> if <span class=\"code\" >pos<\/span> and <span class=\"code\" >len<\/span> do not\n   designate a valid substring of <span class=\"code\" >buf<\/span>."}, "type": "Pervasives.out_channel -> string -> int -> int -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.output_byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|23206"}, "info": {"description": "Write one 8-bit integer (as the single character with that code)\n   on the given output channel. The given integer is taken modulo\n   256."}, "type": "Pervasives.out_channel -> int -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.output_binary_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|23398"}, "info": {"description": "Write one integer in binary format (4 bytes, big-endian)\n   on the given output channel.\n   The given integer is taken modulo 2<sup>32<\/sup>.\n   The only reliable way to read it back is through the\n   <a href=\"{value|Pervasives.input_binary_int}\" ><span class=\"code\" >Pervasives.input_binary_int<\/span><\/a> function. The format is compatible across\n   all machines for a given version of Objective Caml."}, "type": "Pervasives.out_channel -> int -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.output_value", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|23778"}, "info": {"description": "Write the representation of a structured value of any type\n   to a channel. Circularities and sharing inside the value\n   are detected and preserved. The object can be read back,\n   by the function <a href=\"{value|Pervasives.input_value}\" ><span class=\"code\" >Pervasives.input_value<\/span><\/a>. See the description of module\n   <a href=\"{module|Marshal}\" ><span class=\"code\" >Marshal<\/span><\/a> for more information. <a href=\"{value|Pervasives.output_value}\" ><span class=\"code\" >Pervasives.output_value<\/span><\/a> is equivalent\n   to <a href=\"{none|Marshal.to_channel}\" ><span class=\"code\" >Marshal.to_channel<\/span><\/a> with an empty list of flags."}, "type": "Pervasives.out_channel -> 'a -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.seek_out", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|24220"}, "info": {"description": "<span class=\"code\" >seek_out chan pos<\/span> sets the current writing position to <span class=\"code\" >pos<\/span>\n   for channel <span class=\"code\" >chan<\/span>. This works only for regular files. On\n   files of other kinds (such as terminals, pipes and sockets),\n   the behavior is unspecified."}, "type": "Pervasives.out_channel -> int -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.pos_out", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|24490"}, "info": {"description": "Return the current writing position for the given channel.  Does\n    not work on channels opened with the <span class=\"code\" >Open_append<\/span> flag (returns\n    unspecified results)."}, "type": "Pervasives.out_channel -> int", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Pervasives.out_channel_length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|24691"}, "info": {"description": "Return the size (number of characters) of the regular file\n   on which the given channel is opened.  If the channel is opened\n    on a file that is not a regular file, the result is meaningless."}, "type": "Pervasives.out_channel -> int", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Pervasives.close_out", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|24938"}, "info": {"description": "Close the given channel, flushing all buffered write operations.\n   Output functions raise a <span class=\"code\" >Sys_error<\/span> exception when they are\n   applied to a closed output channel, except <span class=\"code\" >close_out<\/span> and <span class=\"code\" >flush<\/span>,\n   which do nothing when applied to an already closed channel.\n   Note that <span class=\"code\" >close_out<\/span> may raise <span class=\"code\" >Sys_error<\/span> if the operating\n   system signals an error when flushing or closing."}, "type": "Pervasives.out_channel -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Pervasives.close_out_noerr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|25362"}, "info": {"description": "Same as <span class=\"code\" >close_out<\/span>, but ignore all errors."}, "type": "Pervasives.out_channel -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Pervasives.set_binary_mode_out", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|25456"}, "info": {"description": "<span class=\"code\" >set_binary_mode_out oc true<\/span> sets the channel <span class=\"code\" >oc<\/span> to binary\n   mode: no translations take place during output.\n   <span class=\"code\" >set_binary_mode_out oc false<\/span> sets the channel <span class=\"code\" >oc<\/span> to text\n   mode: depending on the operating system, some translations\n   may take place during output.  For instance, under Windows,\n   end-of-lines will be translated from <span class=\"code\" >\\n<\/span> to <span class=\"code\" >\\r\\n<\/span>.\n   This function has no effect under operating systems that\n   do not distinguish between text mode and binary mode."}, "type": "Pervasives.out_channel -> bool -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "bool"}]}}, {"comment": "<h7>General input functions<\/h7>"}, {"value": {"name": "Pervasives.open_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|26030"}, "info": {"description": "Open the named file for reading, and return a new input channel\n   on that file, positionned at the beginning of the file.\n   Raise <span class=\"code\" >Sys_error<\/span> if the file could not be opened."}, "type": "string -> Pervasives.in_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.open_in_bin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|26250"}, "info": {"description": "Same as <a href=\"{value|Pervasives.open_in}\" ><span class=\"code\" >Pervasives.open_in<\/span><\/a>, but the file is opened in binary mode,\n   so that no translation takes place during reads. On operating\n   systems that do not distinguish between text mode and binary\n   mode, this function behaves like <a href=\"{value|Pervasives.open_in}\" ><span class=\"code\" >Pervasives.open_in<\/span><\/a>."}, "type": "string -> Pervasives.in_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.open_in_gen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|26555"}, "info": {"description": "<span class=\"code\" >open_in_gen mode perm filename<\/span> opens the named file for reading,\n   as described above. The extra arguments\n   <span class=\"code\" >mode<\/span> and <span class=\"code\" >perm<\/span> specify the opening mode and file permissions.\n   <a href=\"{value|Pervasives.open_in}\" ><span class=\"code\" >Pervasives.open_in<\/span><\/a> and <a href=\"{value|Pervasives.open_in_bin}\" ><span class=\"code\" >Pervasives.open_in_bin<\/span><\/a> are special\n   cases of this function."}, "type": "Pervasives.open_flag list -> int -> string -> Pervasives.in_channel", "params": [{"name": "", "type": "Pervasives.open_flag list"}, {"name": "", "type": "int"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Pervasives.input_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|26899"}, "info": {"description": "Read one character from the given input channel.\n   Raise <span class=\"code\" >End_of_file<\/span> if there are no more characters to read."}, "type": "Pervasives.in_channel -> char", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.input_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|27056"}, "info": {"description": "Read characters from the given input channel, until a\n   newline character is encountered. Return the string of\n   all characters read, without the newline character at the end.\n   Raise <span class=\"code\" >End_of_file<\/span> if the end of the file is reached\n   at the beginning of line."}, "type": "Pervasives.in_channel -> string", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|27366"}, "info": {"description": "<span class=\"code\" >input ic buf pos len<\/span> reads up to <span class=\"code\" >len<\/span> characters from\n   the given channel <span class=\"code\" >ic<\/span>, storing them in string <span class=\"code\" >buf<\/span>, starting at\n   character number <span class=\"code\" >pos<\/span>.\n   It returns the actual number of characters read, between 0 and\n   <span class=\"code\" >len<\/span> (inclusive).\n   A return value of 0 means that the end of file was reached.\n   A return value between 0 and <span class=\"code\" >len<\/span> exclusive means that\n   not all requested <span class=\"code\" >len<\/span> characters were read, either because\n   no more characters were available at that time, or because\n   the implementation found it convenient to do a partial read;\n   <span class=\"code\" >input<\/span> must be called again to read the remaining characters,\n   if desired.  (See also <a href=\"{value|Pervasives.really_input}\" ><span class=\"code\" >Pervasives.really_input<\/span><\/a> for reading\n   exactly <span class=\"code\" >len<\/span> characters.)\n   Exception <span class=\"code\" >Invalid_argument \"input\"<\/span> is raised if <span class=\"code\" >pos<\/span> and <span class=\"code\" >len<\/span>\n   do not designate a valid substring of <span class=\"code\" >buf<\/span>."}, "type": "Pervasives.in_channel -> string -> int -> int -> int", "params": [{"name": "", "type": "Pervasives.in_channel"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.really_input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|28259"}, "info": {"description": "<span class=\"code\" >really_input ic buf pos len<\/span> reads <span class=\"code\" >len<\/span> characters from channel <span class=\"code\" >ic<\/span>,\n   storing them in string <span class=\"code\" >buf<\/span>, starting at character number <span class=\"code\" >pos<\/span>.\n   Raise <span class=\"code\" >End_of_file<\/span> if the end of file is reached before <span class=\"code\" >len<\/span>\n   characters have been read.\n   Raise <span class=\"code\" >Invalid_argument \"really_input\"<\/span> if\n   <span class=\"code\" >pos<\/span> and <span class=\"code\" >len<\/span> do not designate a valid substring of <span class=\"code\" >buf<\/span>."}, "type": "Pervasives.in_channel -> string -> int -> int -> unit", "params": [{"name": "", "type": "Pervasives.in_channel"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.input_byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|28676"}, "info": {"description": "Same as <a href=\"{value|Pervasives.input_char}\" ><span class=\"code\" >Pervasives.input_char<\/span><\/a>, but return the 8-bit integer representing\n   the character.\n   Raise <span class=\"code\" >End_of_file<\/span> if an end of file was reached."}, "type": "Pervasives.in_channel -> int", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.input_binary_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|28867"}, "info": {"description": "Read an integer encoded in binary format (4 bytes, big-endian)\n   from the given input channel. See <a href=\"{value|Pervasives.output_binary_int}\" ><span class=\"code\" >Pervasives.output_binary_int<\/span><\/a>.\n   Raise <span class=\"code\" >End_of_file<\/span> if an end of file was reached while reading the\n   integer."}, "type": "Pervasives.in_channel -> int", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.input_value", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|29132"}, "info": {"description": "Read the representation of a structured value, as produced\n   by <a href=\"{value|Pervasives.output_value}\" ><span class=\"code\" >Pervasives.output_value<\/span><\/a>, and return the corresponding value.\n   This function is identical to <a href=\"{none|Marshal.from_channel}\" ><span class=\"code\" >Marshal.from_channel<\/span><\/a>;\n   see the description of module <a href=\"{module|Marshal}\" ><span class=\"code\" >Marshal<\/span><\/a> for more information,\n   in particular concerning the lack of type safety."}, "type": "Pervasives.in_channel -> 'a", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.seek_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|29481"}, "info": {"description": "<span class=\"code\" >seek_in chan pos<\/span> sets the current reading position to <span class=\"code\" >pos<\/span>\n   for channel <span class=\"code\" >chan<\/span>. This works only for regular files. On\n   files of other kinds, the behavior is unspecified."}, "type": "Pervasives.in_channel -> int -> unit", "params": [{"name": "", "type": "Pervasives.in_channel"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.pos_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|29706"}, "info": {"description": "Return the current reading position for the given channel."}, "type": "Pervasives.in_channel -> int", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.in_channel_length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|29804"}, "info": {"description": "Return the size (number of characters) of the regular file\n    on which the given channel is opened.  If the channel is opened\n    on a file that is not a regular file, the result is meaningless.\n    The returned size does not take into account the end-of-line\n    translations that can be performed when reading from a channel\n    opened in text mode."}, "type": "Pervasives.in_channel -> int", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.close_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|30207"}, "info": {"description": "Close the given channel.  Input functions raise a <span class=\"code\" >Sys_error<\/span>\n  exception when they are applied to a closed input channel,\n  except <span class=\"code\" >close_in<\/span>, which does nothing when applied to an already\n  closed channel.  Note that <span class=\"code\" >close_in<\/span> may raise <span class=\"code\" >Sys_error<\/span> if\n  the operating system signals an error."}, "type": "Pervasives.in_channel -> unit", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.close_in_noerr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|30545"}, "info": {"description": "Same as <span class=\"code\" >close_in<\/span>, but ignore all errors."}, "type": "Pervasives.in_channel -> unit", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.set_binary_mode_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|30636"}, "info": {"description": "<span class=\"code\" >set_binary_mode_in ic true<\/span> sets the channel <span class=\"code\" >ic<\/span> to binary\n   mode: no translations take place during input.\n   <span class=\"code\" >set_binary_mode_out ic false<\/span> sets the channel <span class=\"code\" >ic<\/span> to text\n   mode: depending on the operating system, some translations\n   may take place during input.  For instance, under Windows,\n   end-of-lines will be translated from <span class=\"code\" >\\r\\n<\/span> to <span class=\"code\" >\\n<\/span>.\n   This function has no effect under operating systems that\n   do not distinguish between text mode and binary mode."}, "type": "Pervasives.in_channel -> bool -> unit", "params": [{"name": "", "type": "Pervasives.in_channel"}, {"name": "", "type": "bool"}]}}, {"comment": "<h7>Operations on large files<\/h7>"}, {"module": {"name": "Pervasives.LargeFile", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|31207"}, "info": {"description": "Operations on large files.\n  This sub-module provides 64-bit variants of the channel functions\n  that manipulate file positions and file sizes.  By representing\n  positions and sizes by 64-bit integers (type <span class=\"code\" >int64<\/span>) instead of\n  regular integers (type <span class=\"code\" >int<\/span>), these alternate functions allow\n  operating on files whose sizes are greater than <span class=\"code\" >max_int<\/span>."}, "type": "sig  end", "module_structure": [{"value": {"name": "Pervasives.LargeFile.seek_out", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|31236"}, "info": "", "type": "Pervasives.out_channel -> int64 -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Pervasives.LargeFile.pos_out", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|31284"}, "info": "", "type": "Pervasives.out_channel -> int64", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Pervasives.LargeFile.out_channel_length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|31323"}, "info": "", "type": "Pervasives.out_channel -> int64", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Pervasives.LargeFile.seek_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|31373"}, "info": "", "type": "Pervasives.in_channel -> int64 -> unit", "params": [{"name": "", "type": "Pervasives.in_channel"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Pervasives.LargeFile.pos_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|31419"}, "info": "", "type": "Pervasives.in_channel -> int64", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Pervasives.LargeFile.in_channel_length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|31456"}, "info": "", "type": "Pervasives.in_channel -> int64", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}], "dependencies": {"uses": []}}}, {"comment": "<h6>References<\/h6>"}, {"type": {"name": "Pervasives.ref", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|31896"}, "info": {"description": "The type of references (mutable indirection cells) containing\n   a value of type <span class=\"code\" >'a<\/span>."}, "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "record", "private": "false", "fields": [{"name": "contents", "mutable": true, "type": "'a"}]}}}, {"value": {"name": "Pervasives.ref", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|32027"}, "info": {"description": "Return a fresh reference containing the given value."}, "type": "'a -> 'a Pervasives.ref", "params": [{"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.(!)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|32133"}, "info": {"description": "<span class=\"code\" >!r<\/span> returns the current contents of reference <span class=\"code\" >r<\/span>.\n   Equivalent to <span class=\"code\" >fun r -&gt; r.contents<\/span>."}, "type": "'a Pervasives.ref -> 'a", "params": [{"name": "", "type": "'a Pervasives.ref"}]}}, {"value": {"name": "Pervasives.(:=)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|32275"}, "info": {"description": "<span class=\"code\" >r := a<\/span> stores the value of <span class=\"code\" >a<\/span> in reference <span class=\"code\" >r<\/span>.\n   Equivalent to <span class=\"code\" >fun r v -&gt; r.contents &lt;- v<\/span>."}, "type": "'a Pervasives.ref -> 'a -> unit", "params": [{"name": "", "type": "'a Pervasives.ref"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Pervasives.incr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|32435"}, "info": {"description": "Increment the integer contained in the given reference.\n   Equivalent to <span class=\"code\" >fun r -&gt; r := succ !r<\/span>."}, "type": "int Pervasives.ref -> unit", "params": [{"name": "", "type": "int Pervasives.ref"}]}}, {"value": {"name": "Pervasives.decr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|32583"}, "info": {"description": "Decrement the integer contained in the given reference.\n   Equivalent to <span class=\"code\" >fun r -&gt; r := pred !r<\/span>."}, "type": "int Pervasives.ref -> unit", "params": [{"name": "", "type": "int Pervasives.ref"}]}}, {"comment": "<h6>Operations on format strings<\/h6>"}, {"comment": "Format strings are used to read and print data using formatted input\n    functions in module <a href=\"{module|Scanf}\" ><span class=\"code\" >Scanf<\/span><\/a> and formatted output in modules <a href=\"{module|Printf}\" ><span class=\"code\" >Printf<\/span><\/a> and\n    <a href=\"{module|Format}\" ><span class=\"code\" >Format<\/span><\/a>."}, {"type": {"name": "Pervasives.format4", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|33439"}, "info": {"description": "Format strings have a general and highly polymorphic type\n    <span class=\"code\" >('a, 'b, 'c, 'd, 'e, 'f) format6<\/span>. Type <span class=\"code\" >format6<\/span> is built in.\n    The two simplified types, <span class=\"code\" >format<\/span> and <span class=\"code\" >format4<\/span> below are\n    included for backward compatibility with earlier releases of Objective\n    Caml.\n    <span class=\"code\" >'a<\/span> is the type of the parameters of the format,\n    <span class=\"code\" >'c<\/span> is the result type for the \"printf\"-style function,\n    and <span class=\"code\" >'b<\/span> is the type of the first argument given to\n    <span class=\"code\" >%a<\/span> and <span class=\"code\" >%t<\/span> printing functions."}, "params": [{"covariant": true, "contravariant": true, "type": "'a"}, {"covariant": true, "contravariant": true, "type": "'b"}, {"covariant": true, "contravariant": true, "type": "'c"}, {"covariant": true, "contravariant": true, "type": "'d"}], "kind": {"type": "abstract"}, "manifest": "('a, 'b, 'c, 'c, 'c, 'd) format6"}}, {"type": {"name": "Pervasives.format", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|33505"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'e"}, {"covariant": true, "contravariant": true, "type": "'f"}, {"covariant": true, "contravariant": true, "type": "'g"}], "kind": {"type": "abstract"}, "manifest": "('a, 'b, 'c, 'c) Pervasives.format4"}}, {"value": {"name": "Pervasives.string_of_format", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|33553"}, "info": {"description": "Converts a format string into a string."}, "type": "('a, 'b, 'c, 'd, 'e, 'f) format6 -> string", "params": [{"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6"}]}}, {"value": {"name": "Pervasives.format_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|33667"}, "info": {"description": "<span class=\"code\" >format_of_string s<\/span> returns a format string read from the string\n    literal <span class=\"code\" >s<\/span>."}, "type": "('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f) format6", "params": [{"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6"}]}}, {"value": {"name": "Pervasives.(^^)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|33873"}, "info": {"description": "<span class=\"code\" >f1 ^^ f2<\/span> catenates formats <span class=\"code\" >f1<\/span> and <span class=\"code\" >f2<\/span>.  The result is a format\n  that accepts arguments from <span class=\"code\" >f1<\/span>, then arguments from <span class=\"code\" >f2<\/span>."}, "type": "('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  ('f, 'b, 'c, 'e, 'g, 'h) format6 -> ('a, 'b, 'c, 'd, 'g, 'h) format6", "params": [{"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6"}, {"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6"}]}}, {"comment": "<h6>Program termination<\/h6>"}, {"value": {"name": "Pervasives.exit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|34180"}, "info": {"description": "Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with flush_all.\n   An implicit <span class=\"code\" >exit 0<\/span> is performed each time a program\n   terminates normally.  An implicit <span class=\"code\" >exit 2<\/span> is performed if the program\n   terminates early because of an uncaught exception."}, "type": "int -> 'a", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Pervasives.at_exit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/pervasives.mli|34619"}, "info": {"description": "Register the given function to be called at program\n   termination time. The functions registered with <span class=\"code\" >at_exit<\/span>\n   will be called when the program executes <a href=\"{value|Pervasives.exit}\" ><span class=\"code\" >Pervasives.exit<\/span><\/a>,\n   or terminates, either normally or because of an uncaught exception.\n   The functions are called in ``last in, first out'' order:\n   the function most recently added with <span class=\"code\" >at_exit<\/span> is called first."}, "type": "(unit -> unit) -> unit", "params": [{"name": "", "type": "unit -> unit"}]}}], "dependencies": {"uses": [], "used_by": ["Sys", "Scanf", "Format", "Printf"]}}}, "Nativeint": {"module": {"name": "Nativeint", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|0"}, "info": {"description": "Processor-native integers.<br><\/br>\n   This module provides operations on the type <span class=\"code\" >nativeint<\/span> of\n   signed 32-bit integers (on 32-bit platforms) or\n   signed 64-bit integers (on 64-bit platforms).\n   This integer type has exactly the same width as that of a <span class=\"code\" >long<\/span>\n   integer type in the C compiler.  All arithmetic operations over\n   <span class=\"code\" >nativeint<\/span> are taken modulo 2<sup>32<\/sup> or 2<sup>64<\/sup> depending\n   on the word size of the architecture.<br><\/br>\n   Performance notice: values of type <span class=\"code\" >nativeint<\/span> occupy more memory\n   space than values of type <span class=\"code\" >int<\/span>, and arithmetic operations on\n   <span class=\"code\" >nativeint<\/span> are generally slower than those on <span class=\"code\" >int<\/span>.  Use <span class=\"code\" >nativeint<\/span>\n   only when the application requires the extra bit of precision\n   over the <span class=\"code\" >int<\/span> type."}, "type": "sig  end", "module_structure": [{"value": {"name": "Nativeint.zero", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|1682"}, "info": {"description": "The native integer 0."}, "type": "nativeint", "params": []}}, {"value": {"name": "Nativeint.one", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|1732"}, "info": {"description": "The native integer 1."}, "type": "nativeint", "params": []}}, {"value": {"name": "Nativeint.minus_one", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|1781"}, "info": {"description": "The native integer -1."}, "type": "nativeint", "params": []}}, {"value": {"name": "Nativeint.neg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|1837"}, "info": {"description": "Unary negation."}, "type": "nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|1918"}, "info": {"description": "Addition."}, "type": "nativeint -> nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.sub", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|2006"}, "info": {"description": "Subtraction."}, "type": "nativeint -> nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.mul", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|2097"}, "info": {"description": "Multiplication."}, "type": "nativeint -> nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.div", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|2191"}, "info": {"description": "Integer division.  Raise <span class=\"code\" >Division_by_zero<\/span> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"{value|Pervasives.(\/)}\" ><span class=\"code\" >Pervasives.(\/)<\/span><\/a>."}, "type": "nativeint -> nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.rem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|2458"}, "info": {"description": "Integer remainder.  If <span class=\"code\" >y<\/span> is not zero, the result\n   of <span class=\"code\" >Nativeint.rem x y<\/span> satisfies the following properties:\n   <span class=\"code\" >Nativeint.zero &lt;= Nativeint.rem x y &lt; Nativeint.abs y<\/span> and\n   <span class=\"code\" >x = Nativeint.add (Nativeint.mul (Nativeint.div x y) y) (Nativeint.rem x y)<\/span>.\n   If <span class=\"code\" >y = 0<\/span>, <span class=\"code\" >Nativeint.rem x y<\/span> raises <span class=\"code\" >Division_by_zero<\/span>."}, "type": "nativeint -> nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.succ", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|2856"}, "info": {"description": "Successor.\n   <span class=\"code\" >Nativeint.succ x<\/span> is <span class=\"code\" >Nativeint.add x Nativeint.one<\/span>."}, "type": "nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.pred", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|2967"}, "info": {"description": "Predecessor.\n   <span class=\"code\" >Nativeint.pred x<\/span> is <span class=\"code\" >Nativeint.sub x Nativeint.one<\/span>."}, "type": "nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.abs", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3080"}, "info": {"description": "Return the absolute value of its argument."}, "type": "nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3164"}, "info": {"description": "The size in bits of a native integer.  This is equal to <span class=\"code\" >32<\/span>\n   on a 32-bit platform and to <span class=\"code\" >64<\/span> on a 64-bit platform."}, "type": "int", "params": []}}, {"value": {"name": "Nativeint.max_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3306"}, "info": {"description": "The greatest representable native integer,\n   either 2<sup>31<\/sup> - 1 on a 32-bit platform,\n   or 2<sup>63<\/sup> - 1 on a 64-bit platform."}, "type": "nativeint", "params": []}}, {"value": {"name": "Nativeint.min_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3463"}, "info": {"description": "The greatest representable native integer,\n   either -2<sup>31<\/sup> on a 32-bit platform,\n   or -2<sup>63<\/sup> on a 64-bit platform."}, "type": "nativeint", "params": []}}, {"value": {"name": "Nativeint.logand", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3614"}, "info": {"description": "Bitwise logical and."}, "type": "nativeint -> nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.logor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3716"}, "info": {"description": "Bitwise logical or."}, "type": "nativeint -> nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.logxor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3815"}, "info": {"description": "Bitwise logical exclusive or."}, "type": "nativeint -> nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.lognot", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3926"}, "info": {"description": "Bitwise logical negation"}, "type": "nativeint -> nativeint", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.shift_left", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|3995"}, "info": {"description": "<span class=\"code\" >Nativeint.shift_left x y<\/span> shifts <span class=\"code\" >x<\/span> to the left by <span class=\"code\" >y<\/span> bits.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= bitsize<\/span>,\n   where <span class=\"code\" >bitsize<\/span> is <span class=\"code\" >32<\/span> on a 32-bit platform and\n   <span class=\"code\" >64<\/span> on a 64-bit platform."}, "type": "nativeint -> int -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Nativeint.shift_right", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|4278"}, "info": {"description": "<span class=\"code\" >Nativeint.shift_right x y<\/span> shifts <span class=\"code\" >x<\/span> to the right by <span class=\"code\" >y<\/span> bits.\n   This is an arithmetic shift: the sign bit of <span class=\"code\" >x<\/span> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= bitsize<\/span>."}, "type": "nativeint -> int -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Nativeint.shift_right_logical", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|4585"}, "info": {"description": "<span class=\"code\" >Nativeint.shift_right_logical x y<\/span> shifts <span class=\"code\" >x<\/span> to the right\n   by <span class=\"code\" >y<\/span> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <span class=\"code\" >x<\/span>.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= bitsize<\/span>."}, "type": "nativeint -> int -> nativeint", "params": [{"name": "", "type": "nativeint"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Nativeint.of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|4913"}, "info": {"description": "Convert the given integer (type <span class=\"code\" >int<\/span>) to a native integer\n   (type <span class=\"code\" >nativeint<\/span>)."}, "type": "int -> nativeint", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Nativeint.to_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|5060"}, "info": {"description": "Convert the given native integer (type <span class=\"code\" >nativeint<\/span>) to an\n   integer (type <span class=\"code\" >int<\/span>).  The high-order bit is lost during\n   the conversion."}, "type": "nativeint -> int", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|5262"}, "info": {"description": "Convert the given floating-point number to a native integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range\n   [<a href=\"{value|Nativeint.min_int}\" ><span class=\"code\" >Nativeint.min_int<\/span><\/a>, <a href=\"{value|Nativeint.max_int}\" ><span class=\"code\" >Nativeint.max_int<\/span><\/a>]."}, "type": "float -> nativeint", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Nativeint.to_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|5607"}, "info": {"description": "Convert the given native integer to a floating-point number."}, "type": "nativeint -> float", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.of_int32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|5743"}, "info": {"description": "Convert the given 32-bit integer (type <span class=\"code\" >int32<\/span>)\n   to a native integer."}, "type": "int32 -> nativeint", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Nativeint.to_int32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|5886"}, "info": {"description": "Convert the given native integer to a\n   32-bit integer (type <span class=\"code\" >int32<\/span>).  On 64-bit platforms,\n   the 64-bit native integer is taken modulo 2<sup>32<\/sup>,\n   i.e. the top 32 bits are lost.  On 32-bit platforms,\n   the conversion is exact."}, "type": "nativeint -> int32", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Nativeint.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|6188"}, "info": {"description": "Convert the given string to a native integer.\n   The string is read in decimal (by default) or in hexadecimal,\n   octal or binary if the string begins with <span class=\"code\" >0x<\/span>, <span class=\"code\" >0o<\/span> or <span class=\"code\" >0b<\/span>\n   respectively.\n   Raise <span class=\"code\" >Failure \"int_of_string\"<\/span> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <span class=\"code\" >nativeint<\/span>."}, "type": "string -> nativeint", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Nativeint.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|6659"}, "info": {"description": "Return the string representation of its argument, in decimal."}, "type": "nativeint -> string", "params": [{"name": "", "type": "nativeint"}]}}, {"type": {"name": "Nativeint.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|6774"}, "info": {"description": "An alias for the type of native integers."}, "params": [], "kind": {"type": "abstract"}, "manifest": "nativeint"}}, {"value": {"name": "Nativeint.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/nativeint.mli|6834"}, "info": {"description": "The comparison function for native integers, with the same specification as\n    <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a>.  Along with the type <span class=\"code\" >t<\/span>, this function <span class=\"code\" >compare<\/span>\n    allows the module <span class=\"code\" >Nativeint<\/span> to be passed as argument to the functors\n    <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a> and <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>."}, "type": "Nativeint.t -> Nativeint.t -> int", "params": [{"name": "", "type": "Nativeint.t"}, {"name": "", "type": "Nativeint.t"}]}}], "dependencies": {"uses": [], "used_by": ["Random"]}}}, "Marshal": {"module": {"name": "Marshal", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli|0"}, "info": {"description": "Marshaling of data structures.<br><\/br>\n   This module provides functions to encode arbitrary data structures\n   as sequences of bytes, which can then be written on a file or\n   sent over a pipe or network connection.  The bytes can then\n   be read back later, possibly in another process, and decoded back\n   into a data structure. The format for the byte sequences\n   is compatible across all machines for a given version of Objective Caml.<br><\/br>\n   Warning: marshaling is currently not type-safe. The type\n   of marshaled data is not transmitted along the value of the data,\n   making it impossible to check that the data read back possesses the\n   type expected by the context. In particular, the result type of\n   the <span class=\"code\" >Marshal.from_*<\/span> functions is given as <span class=\"code\" >'a<\/span>, but this is\n   misleading: the returned Caml value does not possess type <span class=\"code\" >'a<\/span>\n   for all <span class=\"code\" >'a<\/span>; it has one, unique type which cannot be determined\n   at compile-type.  The programmer should explicitly give the expected\n   type of the returned value, using the following syntax:<ul><li><span class=\"code\" >(Marshal.from_channel chan : type)<\/span>.\n   Anything can happen at run-time if the object in the file does not\n   belong to the given type.<\/li><\/ul>\n   The representation of marshaled values is not human-readable,\n   and uses bytes that are not printable characters. Therefore,\n   input and output channels used in conjunction with <span class=\"code\" >Marshal.to_channel<\/span>\n   and <span class=\"code\" >Marshal.from_channel<\/span> must be opened in binary mode, using e.g.\n   <span class=\"code\" >open_out_bin<\/span> or <span class=\"code\" >open_in_bin<\/span>; channels opened in text mode will\n   cause unmarshaling errors on platforms where text channels behave\n   differently than binary channels, e.g. Windows."}, "type": "sig  end", "module_structure": [{"type": {"name": "Marshal.extern_flags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli|2622"}, "info": {"description": "The flags to the <span class=\"code\" >Marshal.to_*<\/span> functions below."}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "No_sharing", "description": "Don't preserve sharing", "type": []}, {"name": "Closures", "description": "Send function closures", "type": []}]}}}, {"value": {"name": "Marshal.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli|2815"}, "info": {"description": "<span class=\"code\" >Marshal.to_string v flags<\/span> returns a string containing\n   the representation of <span class=\"code\" >v<\/span> as a sequence of bytes.\n   The <span class=\"code\" >flags<\/span> argument has the same meaning as for\n   <a href=\"{none|Marshal.to_channel}\" ><span class=\"code\" >Marshal.to_channel<\/span><\/a>."}, "type": "'a -> Marshal.extern_flags list -> string", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "Marshal.extern_flags list"}]}}, {"value": {"name": "Marshal.to_buffer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli|3099"}, "info": {"description": "<span class=\"code\" >Marshal.to_buffer buff ofs len v flags<\/span> marshals the value <span class=\"code\" >v<\/span>,\n   storing its byte representation in the string <span class=\"code\" >buff<\/span>,\n   starting at character number <span class=\"code\" >ofs<\/span>, and writing at most\n   <span class=\"code\" >len<\/span> characters.  It returns the number of characters\n   actually written to the string. If the byte representation\n   of <span class=\"code\" >v<\/span> does not fit in <span class=\"code\" >len<\/span> characters, the exception <span class=\"code\" >Failure<\/span>\n   is raised."}, "type": "string -> int -> int -> 'a -> Marshal.extern_flags list -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "'a"}, {"name": "", "type": "Marshal.extern_flags list"}]}}, {"value": {"name": "Marshal.from_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli|3561"}, "info": {"description": "<span class=\"code\" >Marshal.from_string buff ofs<\/span> unmarshals a structured value\n   like <a href=\"{none|Marshal.from_channel}\" ><span class=\"code\" >Marshal.from_channel<\/span><\/a> does, except that the byte\n   representation is not read from a channel, but taken from\n   the string <span class=\"code\" >buff<\/span>, starting at position <span class=\"code\" >ofs<\/span>."}, "type": "string -> int -> 'a", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Marshal.header_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli|3838"}, "info": {"description": "The bytes representing a marshaled value are composed of\n   a fixed-size header and a variable-sized data part,\n   whose size can be determined from the header.\n   <a href=\"{value|Marshal.header_size}\" ><span class=\"code\" >Marshal.header_size<\/span><\/a> is the size, in characters, of the header.\n   <a href=\"{value|Marshal.data_size}\" ><span class=\"code\" >Marshal.data_size<\/span><\/a><span class=\"code\" > buff ofs<\/span> is the size, in characters,\n   of the data part, assuming a valid header is stored in\n   <span class=\"code\" >buff<\/span> starting at position <span class=\"code\" >ofs<\/span>.\n   Finally, <a href=\"{value|Marshal.total_size}\" ><span class=\"code\" >Marshal.total_size<\/span><\/a><span class=\"code\" > buff ofs<\/span> is the total size,\n   in characters, of the marshaled value.\n   Both <a href=\"{value|Marshal.data_size}\" ><span class=\"code\" >Marshal.data_size<\/span><\/a> and <a href=\"{value|Marshal.total_size}\" ><span class=\"code\" >Marshal.total_size<\/span><\/a> raise <span class=\"code\" >Failure<\/span>\n   if <span class=\"code\" >buff<\/span>, <span class=\"code\" >ofs<\/span> does not contain a valid header.<br><\/br>\n   To read the byte representation of a marshaled value into\n   a string buffer, the program needs to read first\n   <a href=\"{value|Marshal.header_size}\" ><span class=\"code\" >Marshal.header_size<\/span><\/a> characters into the buffer,\n   then determine the length of the remainder of the\n   representation using <a href=\"{value|Marshal.data_size}\" ><span class=\"code\" >Marshal.data_size<\/span><\/a>,\n   make sure the buffer is large enough to hold the remaining\n   data, then read it, and finally call <a href=\"{value|Marshal.from_string}\" ><span class=\"code\" >Marshal.from_string<\/span><\/a>\n   to unmarshal the value."}, "type": "int", "params": []}}, {"value": {"name": "Marshal.data_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli|4906"}, "info": {"description": "See <a href=\"{value|Marshal.header_size}\" ><span class=\"code\" >Marshal.header_size<\/span><\/a>."}, "type": "string -> int -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Marshal.total_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/marshal.mli|4978"}, "info": {"description": "See <a href=\"{value|Marshal.header_size}\" ><span class=\"code\" >Marshal.header_size<\/span><\/a>."}, "type": "string -> int -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Map": {"module": {"name": "Map", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|0"}, "info": {"description": "Association tables over ordered types.<br><\/br>\n   This module implements applicative association tables, also known as\n   finite maps or dictionaries, given a total ordering function\n   over the keys.\n   All operations over maps are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and therefore searching\n   and insertion take time logarithmic in the size of the map."}, "type": "sig  end", "module_structure": [{"module_type": {"name": "Map.OrderedType", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|1356"}, "info": {"description": "Input signature of the functor <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Map.OrderedType.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|1442"}, "info": {"description": "The type of the map keys."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Map.OrderedType.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|1442"}, "info": {"description": "A total ordering function over the keys.\n          This is a two-argument function <span class=\"code\" >f<\/span> such that\n          <span class=\"code\" >f e1 e2<\/span> is zero if the keys <span class=\"code\" >e1<\/span> and <span class=\"code\" >e2<\/span> are equal,\n          <span class=\"code\" >f e1 e2<\/span> is strictly negative if <span class=\"code\" >e1<\/span> is smaller than <span class=\"code\" >e2<\/span>,\n          and <span class=\"code\" >f e1 e2<\/span> is strictly positive if <span class=\"code\" >e1<\/span> is greater than <span class=\"code\" >e2<\/span>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a>."}, "type": "Map.OrderedType.t -> Map.OrderedType.t -> int", "params": [{"name": "", "type": "Map.OrderedType.t"}, {"name": "", "type": "Map.OrderedType.t"}]}}]}}, {"module_type": {"name": "Map.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|1976"}, "info": {"description": "Output signature of the functor <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Map.S.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2053"}, "info": {"description": "The type of the map keys."}, "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Map.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2129"}, "info": {"description": "The type of maps from type <span class=\"code\" >key<\/span> to type <span class=\"code\" >'a<\/span>."}, "params": [{"covariant": true, "contravariant": false, "type": "'a"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Map.S.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2129"}, "info": {"description": "The empty map."}, "type": "'a Map.S.t", "params": []}}, {"value": {"name": "Map.S.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2176"}, "info": {"description": "Test whether a map is empty or not."}, "type": "'a Map.S.t -> bool", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2255"}, "info": {"description": "<span class=\"code\" >mem x m<\/span> returns <span class=\"code\" >true<\/span> if <span class=\"code\" >m<\/span> contains a binding for <span class=\"code\" >x<\/span>,\n       and <span class=\"code\" >false<\/span> otherwise."}, "type": "Map.S.key -> 'a Map.S.t -> bool", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2390"}, "info": {"description": "<span class=\"code\" >add x y m<\/span> returns a map containing the same bindings as\n       <span class=\"code\" >m<\/span>, plus a binding of <span class=\"code\" >x<\/span> to <span class=\"code\" >y<\/span>. If <span class=\"code\" >x<\/span> was already bound\n       in <span class=\"code\" >m<\/span>, its previous binding disappears."}, "type": "Map.S.key -> 'a -> 'a Map.S.t -> 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.singleton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2614"}, "info": {"description": "<span class=\"code\" >singleton x y<\/span> returns the one-element map that contains a binding <span class=\"code\" >y<\/span>\n        for <span class=\"code\" >x<\/span>.", "since": "3.12.0"}, "type": "Map.S.key -> 'a -> 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Map.S.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2779"}, "info": {"description": "<span class=\"code\" >remove x m<\/span> returns a map containing the same bindings as\n       <span class=\"code\" >m<\/span>, except for <span class=\"code\" >x<\/span> which is unbound in the returned map."}, "type": "Map.S.key -> 'a Map.S.t -> 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.merge", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2951"}, "info": {"description": "<span class=\"code\" >merge f m1 m2<\/span> computes a map whose keys is a subset of keys of <span class=\"code\" >m1<\/span>\n        and of <span class=\"code\" >m2<\/span>. The presence of each such binding, and the corresponding\n        value, is determined with the function <span class=\"code\" >f<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a option -> 'b option -> 'c option) ->\n  'a Map.S.t -> 'b Map.S.t -> 'c Map.S.t", "params": [{"name": "", "type": "Map.S.key -> 'a option -> 'b option -> 'c option"}, {"name": "", "type": "'a Map.S.t"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|3283"}, "info": {"description": "Total ordering between maps.  The first argument is a total ordering\n        used to compare data associated with equal keys in the two maps."}, "type": "('a -> 'a -> int) -> 'a Map.S.t -> 'a Map.S.t -> int", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a Map.S.t"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|3495"}, "info": {"description": "<span class=\"code\" >equal cmp m1 m2<\/span> tests whether the maps <span class=\"code\" >m1<\/span> and <span class=\"code\" >m2<\/span> are\n       equal, that is, contain equal keys and associate them with\n       equal data.  <span class=\"code\" >cmp<\/span> is the equality predicate used to compare\n       the data associated with the keys."}, "type": "('a -> 'a -> bool) -> 'a Map.S.t -> 'a Map.S.t -> bool", "params": [{"name": "", "type": "'a -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|3800"}, "info": {"description": "<span class=\"code\" >iter f m<\/span> applies <span class=\"code\" >f<\/span> to all bindings in map <span class=\"code\" >m<\/span>.\n       <span class=\"code\" >f<\/span> receives the key as first argument, and the associated value\n       as second argument.  The bindings are passed to <span class=\"code\" >f<\/span> in increasing\n       order with respect to the ordering over the type of the keys."}, "type": "(Map.S.key -> 'a -> unit) -> 'a Map.S.t -> unit", "params": [{"name": "", "type": "Map.S.key -> 'a -> unit"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4127"}, "info": {"description": "<span class=\"code\" >fold f m a<\/span> computes <span class=\"code\" >(f kN dN ... (f k1 d1 a)...)<\/span>,\n       where <span class=\"code\" >k1 ... kN<\/span> are the keys of all bindings in <span class=\"code\" >m<\/span>\n       (in increasing order), and <span class=\"code\" >d1 ... dN<\/span> are the associated data."}, "type": "(Map.S.key -> 'a -> 'b -> 'b) -> 'a Map.S.t -> 'b -> 'b", "params": [{"name": "", "type": "Map.S.key -> 'a -> 'b -> 'b"}, {"name": "", "type": "'a Map.S.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Map.S.for_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4383"}, "info": {"description": "<span class=\"code\" >for_all p m<\/span> checks if all the bindings of the map\n        satisfy the predicate <span class=\"code\" >p<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a -> bool) -> 'a Map.S.t -> bool", "params": [{"name": "", "type": "Map.S.key -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.exists", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4562"}, "info": {"description": "<span class=\"code\" >exists p m<\/span> checks if at least one binding of the map\n        satisfy the predicate <span class=\"code\" >p<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a -> bool) -> 'a Map.S.t -> bool", "params": [{"name": "", "type": "Map.S.key -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4743"}, "info": {"description": "<span class=\"code\" >filter p m<\/span> returns the map with all the bindings in <span class=\"code\" >m<\/span>\n        that satisfy predicate <span class=\"code\" >p<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a -> bool) -> 'a Map.S.t -> 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.partition", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4928"}, "info": {"description": "<span class=\"code\" >partition p m<\/span> returns a pair of maps <span class=\"code\" >(m1, m2)<\/span>, where\n        <span class=\"code\" >m1<\/span> contains all the bindings of <span class=\"code\" >s<\/span> that satisfy the\n        predicate <span class=\"code\" >p<\/span>, and <span class=\"code\" >m2<\/span> is the map with all the bindings of\n        <span class=\"code\" >s<\/span> that do not satisfy <span class=\"code\" >p<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a -> bool) -> 'a Map.S.t -> 'a Map.S.t * 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.cardinal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|5254"}, "info": {"description": "Return the number of bindings of a map.", "since": "3.12.0"}, "type": "'a Map.S.t -> int", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.bindings", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|5363"}, "info": {"description": "Return the list of all bindings of the given map.\n       The returned list is sorted in increasing order with respect\n       to the ordering <span class=\"code\" >Ord.compare<\/span>, where <span class=\"code\" >Ord<\/span> is the argument\n       given to <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>.", "since": "3.12.0"}, "type": "'a Map.S.t -> (Map.S.key * 'a) list", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.min_binding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|5657"}, "info": {"description": "Return the smallest binding of the given map\n       (with respect to the <span class=\"code\" >Ord.compare<\/span> ordering), or raise\n       <span class=\"code\" >Not_found<\/span> if the map is empty.", "since": "3.12.0"}, "type": "'a Map.S.t -> Map.S.key * 'a", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.max_binding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|5883"}, "info": {"description": "Same as <a href=\"{value|Map.S.min_binding}\" ><span class=\"code\" >Map.S.min_binding<\/span><\/a>, but returns the largest binding\n        of the given map.", "since": "3.12.0"}, "type": "'a Map.S.t -> Map.S.key * 'a", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|6050"}, "info": {"description": "Return one binding of the given map, or raise <span class=\"code\" >Not_found<\/span> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.", "since": "3.12.0"}, "type": "'a Map.S.t -> Map.S.key * 'a", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.split", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|6307"}, "info": {"description": "<span class=\"code\" >split x m<\/span> returns a triple <span class=\"code\" >(l, data, r)<\/span>, where\n          <span class=\"code\" >l<\/span> is the map with all the bindings of <span class=\"code\" >m<\/span> whose key\n        is strictly less than <span class=\"code\" >x<\/span>;\n          <span class=\"code\" >r<\/span> is the map with all the bindings of <span class=\"code\" >m<\/span> whose key\n        is strictly greater than <span class=\"code\" >x<\/span>;\n          <span class=\"code\" >data<\/span> is <span class=\"code\" >None<\/span> if <span class=\"code\" >m<\/span> contains no binding for <span class=\"code\" >x<\/span>,\n          or <span class=\"code\" >Some v<\/span> if <span class=\"code\" >m<\/span> binds <span class=\"code\" >v<\/span> to <span class=\"code\" >x<\/span>.", "since": "3.12.0"}, "type": "Map.S.key -> 'a Map.S.t -> 'a Map.S.t * 'a option * 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|6762"}, "info": {"description": "<span class=\"code\" >find x m<\/span> returns the current binding of <span class=\"code\" >x<\/span> in <span class=\"code\" >m<\/span>,\n       or raises <span class=\"code\" >Not_found<\/span> if no such binding exists."}, "type": "Map.S.key -> 'a Map.S.t -> 'a", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|6916"}, "info": {"description": "<span class=\"code\" >map f m<\/span> returns a map with same domain as <span class=\"code\" >m<\/span>, where the\n       associated value <span class=\"code\" >a<\/span> of all bindings of <span class=\"code\" >m<\/span> has been\n       replaced by the result of the application of <span class=\"code\" >f<\/span> to <span class=\"code\" >a<\/span>.\n       The bindings are passed to <span class=\"code\" >f<\/span> in increasing order\n       with respect to the ordering over the type of the keys."}, "type": "('a -> 'b) -> 'a Map.S.t -> 'b Map.S.t", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.mapi", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|7272"}, "info": {"description": "Same as <a href=\"{value|Map.S.map}\" ><span class=\"code\" >Map.S.map<\/span><\/a>, but the function receives as arguments both the\n       key and the associated value for each binding of the map."}, "type": "(Map.S.key -> 'a -> 'b) -> 'a Map.S.t -> 'b Map.S.t", "params": [{"name": "", "type": "Map.S.key -> 'a -> 'b"}, {"name": "", "type": "'a Map.S.t"}]}}]}}, {"module": {"name": "Map.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|7523"}, "info": {"description": "Functor building an implementation of the map structure\n   given a totally ordered type."}, "type": "functor (Ord : OrderedType) -> sig  end", "module_functor": {"parameter": {"name": "Ord", "module_alias": {"name": "Map.OrderedType"}}, "module_with": {"module_alias": {"name": "Map.S", "module_type": {"name": "Map.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|1976"}, "info": {"description": "Output signature of the functor <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Map.S.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2053"}, "info": {"description": "The type of the map keys."}, "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Map.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2129"}, "info": {"description": "The type of maps from type <span class=\"code\" >key<\/span> to type <span class=\"code\" >'a<\/span>."}, "params": [{"covariant": true, "contravariant": false, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Map.S.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2129"}, "info": {"description": "The empty map."}, "type": "'a Map.S.t", "params": []}}, {"value": {"name": "Map.S.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2176"}, "info": {"description": "Test whether a map is empty or not."}, "type": "'a Map.S.t -> bool", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2255"}, "info": {"description": "<span class=\"code\" >mem x m<\/span> returns <span class=\"code\" >true<\/span> if <span class=\"code\" >m<\/span> contains a binding for <span class=\"code\" >x<\/span>,\n       and <span class=\"code\" >false<\/span> otherwise."}, "type": "Map.S.key -> 'a Map.S.t -> bool", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2390"}, "info": {"description": "<span class=\"code\" >add x y m<\/span> returns a map containing the same bindings as\n       <span class=\"code\" >m<\/span>, plus a binding of <span class=\"code\" >x<\/span> to <span class=\"code\" >y<\/span>. If <span class=\"code\" >x<\/span> was already bound\n       in <span class=\"code\" >m<\/span>, its previous binding disappears."}, "type": "Map.S.key -> 'a -> 'a Map.S.t -> 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.singleton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2614"}, "info": {"description": "<span class=\"code\" >singleton x y<\/span> returns the one-element map that contains a binding <span class=\"code\" >y<\/span>\n        for <span class=\"code\" >x<\/span>.", "since": "3.12.0"}, "type": "Map.S.key -> 'a -> 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Map.S.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2779"}, "info": {"description": "<span class=\"code\" >remove x m<\/span> returns a map containing the same bindings as\n       <span class=\"code\" >m<\/span>, except for <span class=\"code\" >x<\/span> which is unbound in the returned map."}, "type": "Map.S.key -> 'a Map.S.t -> 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.merge", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|2951"}, "info": {"description": "<span class=\"code\" >merge f m1 m2<\/span> computes a map whose keys is a subset of keys of <span class=\"code\" >m1<\/span>\n        and of <span class=\"code\" >m2<\/span>. The presence of each such binding, and the corresponding\n        value, is determined with the function <span class=\"code\" >f<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a option -> 'b option -> 'c option) ->\n  'a Map.S.t -> 'b Map.S.t -> 'c Map.S.t", "params": [{"name": "", "type": "Map.S.key -> 'a option -> 'b option -> 'c option"}, {"name": "", "type": "'a Map.S.t"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|3283"}, "info": {"description": "Total ordering between maps.  The first argument is a total ordering\n        used to compare data associated with equal keys in the two maps."}, "type": "('a -> 'a -> int) -> 'a Map.S.t -> 'a Map.S.t -> int", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a Map.S.t"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|3495"}, "info": {"description": "<span class=\"code\" >equal cmp m1 m2<\/span> tests whether the maps <span class=\"code\" >m1<\/span> and <span class=\"code\" >m2<\/span> are\n       equal, that is, contain equal keys and associate them with\n       equal data.  <span class=\"code\" >cmp<\/span> is the equality predicate used to compare\n       the data associated with the keys."}, "type": "('a -> 'a -> bool) -> 'a Map.S.t -> 'a Map.S.t -> bool", "params": [{"name": "", "type": "'a -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|3800"}, "info": {"description": "<span class=\"code\" >iter f m<\/span> applies <span class=\"code\" >f<\/span> to all bindings in map <span class=\"code\" >m<\/span>.\n       <span class=\"code\" >f<\/span> receives the key as first argument, and the associated value\n       as second argument.  The bindings are passed to <span class=\"code\" >f<\/span> in increasing\n       order with respect to the ordering over the type of the keys."}, "type": "(Map.S.key -> 'a -> unit) -> 'a Map.S.t -> unit", "params": [{"name": "", "type": "Map.S.key -> 'a -> unit"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4127"}, "info": {"description": "<span class=\"code\" >fold f m a<\/span> computes <span class=\"code\" >(f kN dN ... (f k1 d1 a)...)<\/span>,\n       where <span class=\"code\" >k1 ... kN<\/span> are the keys of all bindings in <span class=\"code\" >m<\/span>\n       (in increasing order), and <span class=\"code\" >d1 ... dN<\/span> are the associated data."}, "type": "(Map.S.key -> 'a -> 'b -> 'b) -> 'a Map.S.t -> 'b -> 'b", "params": [{"name": "", "type": "Map.S.key -> 'a -> 'b -> 'b"}, {"name": "", "type": "'a Map.S.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Map.S.for_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4383"}, "info": {"description": "<span class=\"code\" >for_all p m<\/span> checks if all the bindings of the map\n        satisfy the predicate <span class=\"code\" >p<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a -> bool) -> 'a Map.S.t -> bool", "params": [{"name": "", "type": "Map.S.key -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.exists", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4562"}, "info": {"description": "<span class=\"code\" >exists p m<\/span> checks if at least one binding of the map\n        satisfy the predicate <span class=\"code\" >p<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a -> bool) -> 'a Map.S.t -> bool", "params": [{"name": "", "type": "Map.S.key -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4743"}, "info": {"description": "<span class=\"code\" >filter p m<\/span> returns the map with all the bindings in <span class=\"code\" >m<\/span>\n        that satisfy predicate <span class=\"code\" >p<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a -> bool) -> 'a Map.S.t -> 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.partition", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|4928"}, "info": {"description": "<span class=\"code\" >partition p m<\/span> returns a pair of maps <span class=\"code\" >(m1, m2)<\/span>, where\n        <span class=\"code\" >m1<\/span> contains all the bindings of <span class=\"code\" >s<\/span> that satisfy the\n        predicate <span class=\"code\" >p<\/span>, and <span class=\"code\" >m2<\/span> is the map with all the bindings of\n        <span class=\"code\" >s<\/span> that do not satisfy <span class=\"code\" >p<\/span>.", "since": "3.12.0"}, "type": "(Map.S.key -> 'a -> bool) -> 'a Map.S.t -> 'a Map.S.t * 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key -> 'a -> bool"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.cardinal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|5254"}, "info": {"description": "Return the number of bindings of a map.", "since": "3.12.0"}, "type": "'a Map.S.t -> int", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.bindings", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|5363"}, "info": {"description": "Return the list of all bindings of the given map.\n       The returned list is sorted in increasing order with respect\n       to the ordering <span class=\"code\" >Ord.compare<\/span>, where <span class=\"code\" >Ord<\/span> is the argument\n       given to <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>.", "since": "3.12.0"}, "type": "'a Map.S.t -> (Map.S.key * 'a) list", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.min_binding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|5657"}, "info": {"description": "Return the smallest binding of the given map\n       (with respect to the <span class=\"code\" >Ord.compare<\/span> ordering), or raise\n       <span class=\"code\" >Not_found<\/span> if the map is empty.", "since": "3.12.0"}, "type": "'a Map.S.t -> Map.S.key * 'a", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.max_binding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|5883"}, "info": {"description": "Same as <a href=\"{value|Map.S.min_binding}\" ><span class=\"code\" >Map.S.min_binding<\/span><\/a>, but returns the largest binding\n        of the given map.", "since": "3.12.0"}, "type": "'a Map.S.t -> Map.S.key * 'a", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|6050"}, "info": {"description": "Return one binding of the given map, or raise <span class=\"code\" >Not_found<\/span> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.", "since": "3.12.0"}, "type": "'a Map.S.t -> Map.S.key * 'a", "params": [{"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.split", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|6307"}, "info": {"description": "<span class=\"code\" >split x m<\/span> returns a triple <span class=\"code\" >(l, data, r)<\/span>, where\n          <span class=\"code\" >l<\/span> is the map with all the bindings of <span class=\"code\" >m<\/span> whose key\n        is strictly less than <span class=\"code\" >x<\/span>;\n          <span class=\"code\" >r<\/span> is the map with all the bindings of <span class=\"code\" >m<\/span> whose key\n        is strictly greater than <span class=\"code\" >x<\/span>;\n          <span class=\"code\" >data<\/span> is <span class=\"code\" >None<\/span> if <span class=\"code\" >m<\/span> contains no binding for <span class=\"code\" >x<\/span>,\n          or <span class=\"code\" >Some v<\/span> if <span class=\"code\" >m<\/span> binds <span class=\"code\" >v<\/span> to <span class=\"code\" >x<\/span>.", "since": "3.12.0"}, "type": "Map.S.key -> 'a Map.S.t -> 'a Map.S.t * 'a option * 'a Map.S.t", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|6762"}, "info": {"description": "<span class=\"code\" >find x m<\/span> returns the current binding of <span class=\"code\" >x<\/span> in <span class=\"code\" >m<\/span>,\n       or raises <span class=\"code\" >Not_found<\/span> if no such binding exists."}, "type": "Map.S.key -> 'a Map.S.t -> 'a", "params": [{"name": "", "type": "Map.S.key"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|6916"}, "info": {"description": "<span class=\"code\" >map f m<\/span> returns a map with same domain as <span class=\"code\" >m<\/span>, where the\n       associated value <span class=\"code\" >a<\/span> of all bindings of <span class=\"code\" >m<\/span> has been\n       replaced by the result of the application of <span class=\"code\" >f<\/span> to <span class=\"code\" >a<\/span>.\n       The bindings are passed to <span class=\"code\" >f<\/span> in increasing order\n       with respect to the ordering over the type of the keys."}, "type": "('a -> 'b) -> 'a Map.S.t -> 'b Map.S.t", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a Map.S.t"}]}}, {"value": {"name": "Map.S.mapi", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/map.mli|7272"}, "info": {"description": "Same as <a href=\"{value|Map.S.map}\" ><span class=\"code\" >Map.S.map<\/span><\/a>, but the function receives as arguments both the\n       key and the associated value for each binding of the map."}, "type": "(Map.S.key -> 'a -> 'b) -> 'a Map.S.t -> 'b Map.S.t", "params": [{"name": "", "type": "Map.S.key -> 'a -> 'b"}, {"name": "", "type": "'a Map.S.t"}]}}]}}, "with": " with type key = Ord.t"}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": [], "used_by": []}}}, "Lazy": {"module": {"name": "Lazy", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli|0"}, "info": {"description": "Deferred computations."}, "type": "sig  end", "module_structure": [{"type": {"name": "Lazy.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli|990"}, "info": {"description": "A value of type <span class=\"code\" >'a Lazy.t<\/span> is a deferred computation, called\n   a suspension, that has a result of type <span class=\"code\" >'a<\/span>.  The special\n   expression syntax <span class=\"code\" >lazy (expr)<\/span> makes a suspension of the\n   computation of <span class=\"code\" >expr<\/span>, without computing <span class=\"code\" >expr<\/span> itself yet.\n   \"Forcing\" the suspension will then compute <span class=\"code\" >expr<\/span> and return its\n   result.<br><\/br>\n   Note: <span class=\"code\" >lazy_t<\/span> is the built-in type constructor used by the compiler\n   for the <span class=\"code\" >lazy<\/span> keyword.  You should not use it directly.  Always use\n   <span class=\"code\" >Lazy.t<\/span> instead.<br><\/br>\n   Note: <span class=\"code\" >Lazy.force<\/span> is not thread-safe.  If you use this module in\n   a multi-threaded program, you will need to add some locks.<br><\/br>\n   Note: if the program is compiled with the <span class=\"code\" >-rectypes<\/span> option,\n   ill-founded recursive definitions of the form <span class=\"code\" >let rec x = lazy x<\/span>\n   or <span class=\"code\" >let rec x = lazy(lazy(...(lazy x)))<\/span> are accepted by the type-checker\n   and lead, when forced, to ill-formed values that trigger infinite\n   loops in the garbage collector and other parts of the run-time system.\n   Without the <span class=\"code\" >-rectypes<\/span> option, such ill-founded recursive definitions\n   are rejected by the type-checker."}, "params": [{"covariant": true, "contravariant": false, "type": "'b"}], "kind": {"type": "abstract"}, "manifest": "'a lazy_t"}}, {"exception": {"name": "Lazy.Undefined", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli|2103"}, "info": ""}}, {"value": {"name": "Lazy.force", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli|2126"}, "info": "", "type": "'a Lazy.t -> 'a", "params": [{"name": "", "type": "'a Lazy.t"}]}}, {"comment": "<span class=\"code\" >force x<\/span> forces the suspension <span class=\"code\" >x<\/span> and returns its result.\n   If <span class=\"code\" >x<\/span> has already been forced, <span class=\"code\" >Lazy.force x<\/span> returns the\n   same value again without recomputing it.  If it raised an exception,\n   the same exception is raised again.\n   Raise <span class=\"code\" >Undefined<\/span> if the forcing of <span class=\"code\" >x<\/span> tries to force <span class=\"code\" >x<\/span> itself\n   recursively."}, {"value": {"name": "Lazy.force_val", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli|2530"}, "info": {"description": "<span class=\"code\" >force_val x<\/span> forces the suspension <span class=\"code\" >x<\/span> and returns its\n    result.  If <span class=\"code\" >x<\/span> has already been forced, <span class=\"code\" >force_val x<\/span>\n    returns the same value again without recomputing it.\n    Raise <span class=\"code\" >Undefined<\/span> if the forcing of <span class=\"code\" >x<\/span> tries to force <span class=\"code\" >x<\/span> itself\n    recursively.\n    If the computation of <span class=\"code\" >x<\/span> raises an exception, it is unspecified\n    whether <span class=\"code\" >force_val x<\/span> raises the same exception or <span class=\"code\" >Undefined<\/span>."}, "type": "'a Lazy.t -> 'a", "params": [{"name": "", "type": "'a Lazy.t"}]}}, {"value": {"name": "Lazy.lazy_from_fun", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli|2963"}, "info": {"description": "<span class=\"code\" >lazy_from_fun f<\/span> is the same as <span class=\"code\" >lazy (f ())<\/span> but slightly more\n    efficient."}, "type": "(unit -> 'a) -> 'a Lazy.t", "params": [{"name": "", "type": "unit -> 'a"}]}}, {"value": {"name": "Lazy.lazy_from_val", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli|3094"}, "info": {"description": "<span class=\"code\" >lazy_from_val v<\/span> returns an already-forced suspension of <span class=\"code\" >v<\/span>\n    This is for special purposes only and should not be confused with\n    <span class=\"code\" >lazy (v)<\/span>."}, "type": "'a -> 'a Lazy.t", "params": [{"name": "", "type": "'a"}]}}, {"value": {"name": "Lazy.lazy_is_val", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lazy.mli|3283"}, "info": {"description": "<span class=\"code\" >lazy_is_val x<\/span> returns <span class=\"code\" >true<\/span> if <span class=\"code\" >x<\/span> has already been forced and\n    did not raise an exception."}, "type": "'a Lazy.t -> bool", "params": [{"name": "", "type": "'a Lazy.t"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Stream": {"module": {"name": "Stream", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|0"}, "info": {"description": "Streams and parsers."}, "type": "sig  end", "module_structure": [{"type": {"name": "Stream.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|1044"}, "info": {"description": "The type of streams holding values of type <span class=\"code\" >'a<\/span>."}, "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"exception": {"name": "Stream.Failure", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|1044"}, "info": {"description": "Raised by parsers when none of the first components of the stream\n   patterns is accepted."}}}, {"exception": {"name": "Stream.Error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|1161"}, "info": {"description": "Raised by parsers when the first component of a stream pattern is\n   accepted, but one of the following components is rejected."}, "exception_args": ["string"]}}, {"comment": "<h6>Stream builders<\/h6><br><\/br>\n   Warning: these functions create streams with fast access; it is illegal\n   to mix them with streams built with <span class=\"code\" >[&lt; &gt;]<\/span>; would raise <span class=\"code\" >Failure<\/span>\n   when accessing such mixed streams."}, {"value": {"name": "Stream.from", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|1536"}, "info": {"description": "<span class=\"code\" >Stream.from f<\/span> returns a stream built from the function <span class=\"code\" >f<\/span>.\n   To create a new stream element, the function <span class=\"code\" >f<\/span> is called with\n   the current stream count. The user function <span class=\"code\" >f<\/span> must return either\n   <span class=\"code\" >Some &lt;value&gt;<\/span> for a value or <span class=\"code\" >None<\/span> to specify the end of the\n   stream."}, "type": "(int -> 'a option) -> 'a Stream.t", "params": [{"name": "", "type": "int -> 'a option"}]}}, {"value": {"name": "Stream.of_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|1858"}, "info": {"description": "Return the stream holding the elements of the list in the same\n   order."}, "type": "'a list -> 'a Stream.t", "params": [{"name": "", "type": "'a list"}]}}, {"value": {"name": "Stream.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|1969"}, "info": {"description": "Return the stream of the characters of the string parameter."}, "type": "string -> char Stream.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Stream.of_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|2071"}, "info": {"description": "Return the stream of the characters read from the input channel."}, "type": "Pervasives.in_channel -> char Stream.t", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"comment": "<h6>Stream iterator<\/h6>"}, {"value": {"name": "Stream.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|2211"}, "info": {"description": "<span class=\"code\" >Stream.iter f s<\/span> scans the whole stream s, applying function <span class=\"code\" >f<\/span>\n   in turn to each stream element encountered."}, "type": "('a -> unit) -> 'a Stream.t -> unit", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a Stream.t"}]}}, {"comment": "<h6>Predefined parsers<\/h6>"}, {"value": {"name": "Stream.next", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|2404"}, "info": {"description": "Return the first element of the stream and remove it from the\n   stream. Raise Stream.Failure if the stream is empty."}, "type": "'a Stream.t -> 'a", "params": [{"name": "", "type": "'a Stream.t"}]}}, {"value": {"name": "Stream.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|2552"}, "info": {"description": "Return <span class=\"code\" >()<\/span> if the stream is empty, else raise <span class=\"code\" >Stream.Failure<\/span>."}, "type": "'a Stream.t -> unit", "params": [{"name": "", "type": "'a Stream.t"}]}}, {"comment": "<h6>Useful functions<\/h6>"}, {"value": {"name": "Stream.peek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|2680"}, "info": {"description": "Return <span class=\"code\" >Some<\/span> of \"the first element\" of the stream, or <span class=\"code\" >None<\/span> if\n   the stream is empty."}, "type": "'a Stream.t -> 'a option", "params": [{"name": "", "type": "'a Stream.t"}]}}, {"value": {"name": "Stream.junk", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|2806"}, "info": {"description": "Remove the first element of the stream, possibly unfreezing\n   it before."}, "type": "'a Stream.t -> unit", "params": [{"name": "", "type": "'a Stream.t"}]}}, {"value": {"name": "Stream.count", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|2912"}, "info": {"description": "Return the current count of the stream elements, i.e. the number\n   of the stream elements discarded."}, "type": "'a Stream.t -> int", "params": [{"name": "", "type": "'a Stream.t"}]}}, {"value": {"name": "Stream.npeek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/stream.mli|3046"}, "info": {"description": "<span class=\"code\" >npeek n<\/span> returns the list of the <span class=\"code\" >n<\/span> first elements of\n   the stream, or all its remaining elements if less than <span class=\"code\" >n<\/span>\n   elements are available."}, "type": "int -> 'a Stream.t -> 'a list", "params": [{"name": "", "type": "int"}, {"name": "", "type": "'a Stream.t"}]}}], "dependencies": {"uses": [], "used_by": ["Utf8", "Utf16", "Ulexing"]}}}, "List": {"module": {"name": "List", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|0"}, "info": {"description": "List operations.<br><\/br>\n   Some functions are flagged as not tail-recursive.  A tail-recursive\n   function uses constant stack space, while a non-tail-recursive function\n   uses stack space proportional to the length of its list argument, which\n   can be a problem with very long lists.  When the function takes several\n   list arguments, an approximate formula giving stack usage (in some\n   unspecified constant unit) is shown in parentheses.<br><\/br>\n   The above considerations can usually be ignored if your lists are not\n   longer than about 10000 elements."}, "type": "sig  end", "module_structure": [{"value": {"name": "List.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|1504"}, "info": {"description": "Return the length (number of elements) of the given list."}, "type": "'a list -> int", "params": [{"name": "", "type": "'a list"}]}}, {"value": {"name": "List.hd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|1598"}, "info": {"description": "Return the first element of the given list. Raise\n   <span class=\"code\" >Failure \"hd\"<\/span> if the list is empty."}, "type": "'a list -> 'a", "params": [{"name": "", "type": "'a list"}]}}, {"value": {"name": "List.tl", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|1719"}, "info": {"description": "Return the given list without its first element. Raise\n   <span class=\"code\" >Failure \"tl\"<\/span> if the list is empty."}, "type": "'a list -> 'a list", "params": [{"name": "", "type": "'a list"}]}}, {"value": {"name": "List.nth", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|1850"}, "info": {"description": "Return the <span class=\"code\" >n<\/span>-th element of the given list.\n   The first element (head of the list) is at position 0.\n   Raise <span class=\"code\" >Failure \"nth\"<\/span> if the list is too short.\n   Raise <span class=\"code\" >Invalid_argument \"List.nth\"<\/span> if <span class=\"code\" >n<\/span> is negative."}, "type": "'a list -> int -> 'a", "params": [{"name": "", "type": "'a list"}, {"name": "", "type": "int"}]}}, {"value": {"name": "List.rev", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|2102"}, "info": {"description": "List reversal."}, "type": "'a list -> 'a list", "params": [{"name": "", "type": "'a list"}]}}, {"value": {"name": "List.append", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|2154"}, "info": {"description": "Catenate two lists.  Same function as the infix operator <span class=\"code\" >@<\/span>.\n   Not tail-recursive (length of the first argument).  The <span class=\"code\" >@<\/span>\n   operator is not tail-recursive either."}, "type": "'a list -> 'a list -> 'a list", "params": [{"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.rev_append", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|2372"}, "info": {"description": "<span class=\"code\" >List.rev_append l1 l2<\/span> reverses <span class=\"code\" >l1<\/span> and concatenates it to <span class=\"code\" >l2<\/span>.\n   This is equivalent to <a href=\"{value|List.rev}\" ><span class=\"code\" >List.rev<\/span><\/a><span class=\"code\" > l1 @ l2<\/span>, but <span class=\"code\" >rev_append<\/span> is\n   tail-recursive and more efficient."}, "type": "'a list -> 'a list -> 'a list", "params": [{"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.concat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|2600"}, "info": {"description": "Concatenate a list of lists.  The elements of the argument are all\n   concatenated together (in the same order) to give the result.\n   Not tail-recursive\n   (length of the argument + length of the longest sub-list)."}, "type": "'a list list -> 'a list", "params": [{"name": "", "type": "'a list list"}]}}, {"value": {"name": "List.flatten", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|2861"}, "info": {"description": "Same as <span class=\"code\" >concat<\/span>.  Not tail-recursive\n   (length of the argument + length of the longest sub-list)."}, "type": "'a list list -> 'a list", "params": [{"name": "", "type": "'a list list"}]}}, {"comment": "<h6>Iterators<\/h6>"}, {"value": {"name": "List.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|3031"}, "info": {"description": "<span class=\"code\" >List.iter f [a1; ...; an]<\/span> applies function <span class=\"code\" >f<\/span> in turn to\n   <span class=\"code\" >a1; ...; an<\/span>. It is equivalent to\n   <span class=\"code\" >begin f a1; f a2; ...; f an; () end<\/span>."}, "type": "('a -> unit) -> 'a list -> unit", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|3222"}, "info": {"description": "<span class=\"code\" >List.map f [a1; ...; an]<\/span> applies function <span class=\"code\" >f<\/span> to <span class=\"code\" >a1, ..., an<\/span>,\n   and builds the list <span class=\"code\" >[f a1; ...; f an]<\/span>\n   with the results returned by <span class=\"code\" >f<\/span>.  Not tail-recursive."}, "type": "('a -> 'b) -> 'a list -> 'b list", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.rev_map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|3440"}, "info": {"description": "<span class=\"code\" >List.rev_map f l<\/span> gives the same result as\n   <a href=\"{value|List.rev}\" ><span class=\"code\" >List.rev<\/span><\/a><span class=\"code\" > (<\/span><a href=\"{value|List.map}\" ><span class=\"code\" >List.map<\/span><\/a><span class=\"code\" > f l)<\/span>, but is tail-recursive and\n   more efficient."}, "type": "('a -> 'b) -> 'a list -> 'b list", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.fold_left", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|3622"}, "info": {"description": "<span class=\"code\" >List.fold_left f a [b1; ...; bn]<\/span> is\n   <span class=\"code\" >f (... (f (f a b1) b2) ...) bn<\/span>."}, "type": "('a -> 'b -> 'a) -> 'a -> 'b list -> 'a", "params": [{"name": "", "type": "'a -> 'b -> 'a"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.fold_right", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|3761"}, "info": {"description": "<span class=\"code\" >List.fold_right f [a1; ...; an] b<\/span> is\n   <span class=\"code\" >f a1 (f a2 (... (f an b) ...))<\/span>.  Not tail-recursive."}, "type": "('a -> 'b -> 'b) -> 'a list -> 'b -> 'b", "params": [{"name": "", "type": "'a -> 'b -> 'b"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a"}]}}, {"comment": "<h6>Iterators on two lists<\/h6>"}, {"value": {"name": "List.iter2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|3960"}, "info": {"description": "<span class=\"code\" >List.iter2 f [a1; ...; an] [b1; ...; bn]<\/span> calls in turn\n   <span class=\"code\" >f a1 b1; ...; f an bn<\/span>.\n   Raise <span class=\"code\" >Invalid_argument<\/span> if the two lists have\n   different lengths."}, "type": "('a -> 'b -> unit) -> 'a list -> 'b list -> unit", "params": [{"name": "", "type": "'a -> 'b -> unit"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.map2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|4186"}, "info": {"description": "<span class=\"code\" >List.map2 f [a1; ...; an] [b1; ...; bn]<\/span> is\n   <span class=\"code\" >[f a1 b1; ...; f an bn]<\/span>.\n   Raise <span class=\"code\" >Invalid_argument<\/span> if the two lists have\n   different lengths.  Not tail-recursive."}, "type": "('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list", "params": [{"name": "", "type": "'a -> 'b -> 'c"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.rev_map2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|4423"}, "info": {"description": "<span class=\"code\" >List.rev_map2 f l1 l2<\/span> gives the same result as\n   <a href=\"{value|List.rev}\" ><span class=\"code\" >List.rev<\/span><\/a><span class=\"code\" > (<\/span><a href=\"{value|List.map2}\" ><span class=\"code\" >List.map2<\/span><\/a><span class=\"code\" > f l1 l2)<\/span>, but is tail-recursive and\n   more efficient."}, "type": "('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list", "params": [{"name": "", "type": "'a -> 'b -> 'c"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.fold_left2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|4633"}, "info": {"description": "<span class=\"code\" >List.fold_left2 f a [b1; ...; bn] [c1; ...; cn]<\/span> is\n   <span class=\"code\" >f (... (f (f a b1 c1) b2 c2) ...) bn cn<\/span>.\n   Raise <span class=\"code\" >Invalid_argument<\/span> if the two lists have\n   different lengths."}, "type": "('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a", "params": [{"name": "", "type": "'a -> 'b -> 'c -> 'a"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.fold_right2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|4886"}, "info": {"description": "<span class=\"code\" >List.fold_right2 f [a1; ...; an] [b1; ...; bn] c<\/span> is\n   <span class=\"code\" >f a1 b1 (f a2 b2 (... (f an bn c) ...))<\/span>.\n   Raise <span class=\"code\" >Invalid_argument<\/span> if the two lists have\n   different lengths.  Not tail-recursive."}, "type": "('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c", "params": [{"name": "", "type": "'a -> 'b -> 'c -> 'c"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a"}]}}, {"comment": "<h6>List scanning<\/h6>"}, {"value": {"name": "List.for_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|5190"}, "info": {"description": "<span class=\"code\" >for_all p [a1; ...; an]<\/span> checks if all elements of the list\n   satisfy the predicate <span class=\"code\" >p<\/span>. That is, it returns\n   <span class=\"code\" >(p a1) &amp;&amp; (p a2) &amp;&amp; ... &amp;&amp; (p an)<\/span>."}, "type": "('a -> bool) -> 'a list -> bool", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.exists", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|5395"}, "info": {"description": "<span class=\"code\" >exists p [a1; ...; an]<\/span> checks if at least one element of\n   the list satisfies the predicate <span class=\"code\" >p<\/span>. That is, it returns\n   <span class=\"code\" >(p a1) || (p a2) || ... || (p an)<\/span>."}, "type": "('a -> bool) -> 'a list -> bool", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.for_all2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|5608"}, "info": {"description": "Same as <a href=\"{value|List.for_all}\" ><span class=\"code\" >List.for_all<\/span><\/a>, but for a two-argument predicate.\n   Raise <span class=\"code\" >Invalid_argument<\/span> if the two lists have\n   different lengths."}, "type": "('a -> 'b -> bool) -> 'a list -> 'b list -> bool", "params": [{"name": "", "type": "'a -> 'b -> bool"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.exists2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|5811"}, "info": {"description": "Same as <a href=\"{value|List.exists}\" ><span class=\"code\" >List.exists<\/span><\/a>, but for a two-argument predicate.\n   Raise <span class=\"code\" >Invalid_argument<\/span> if the two lists have\n   different lengths."}, "type": "('a -> 'b -> bool) -> 'a list -> 'b list -> bool", "params": [{"name": "", "type": "'a -> 'b -> bool"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|6012"}, "info": {"description": "<span class=\"code\" >mem a l<\/span> is true if and only if <span class=\"code\" >a<\/span> is equal\n   to an element of <span class=\"code\" >l<\/span>."}, "type": "'a -> 'a list -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.memq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|6123"}, "info": {"description": "Same as <a href=\"{value|List.mem}\" ><span class=\"code\" >List.mem<\/span><\/a>, but uses physical equality instead of structural\n   equality to compare list elements."}, "type": "'a -> 'a list -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a list"}]}}, {"comment": "<h6>List searching<\/h6>"}, {"value": {"name": "List.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|6301"}, "info": {"description": "<span class=\"code\" >find p l<\/span> returns the first element of the list <span class=\"code\" >l<\/span>\n   that satisfies the predicate <span class=\"code\" >p<\/span>.\n   Raise <span class=\"code\" >Not_found<\/span> if there is no value that satisfies <span class=\"code\" >p<\/span> in the\n   list <span class=\"code\" >l<\/span>."}, "type": "('a -> bool) -> 'a list -> 'a", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|6521"}, "info": {"description": "<span class=\"code\" >filter p l<\/span> returns all the elements of the list <span class=\"code\" >l<\/span>\n   that satisfy the predicate <span class=\"code\" >p<\/span>.  The order of the elements\n   in the input list is preserved."}, "type": "('a -> bool) -> 'a list -> 'a list", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.find_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|6729"}, "info": {"description": "<span class=\"code\" >find_all<\/span> is another name for <a href=\"{value|List.filter}\" ><span class=\"code\" >List.filter<\/span><\/a>."}, "type": "('a -> bool) -> 'a list -> 'a list", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.partition", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|6834"}, "info": {"description": "<span class=\"code\" >partition p l<\/span> returns a pair of lists <span class=\"code\" >(l1, l2)<\/span>, where\n   <span class=\"code\" >l1<\/span> is the list of all the elements of <span class=\"code\" >l<\/span> that\n   satisfy the predicate <span class=\"code\" >p<\/span>, and <span class=\"code\" >l2<\/span> is the list of all the\n   elements of <span class=\"code\" >l<\/span> that do not satisfy <span class=\"code\" >p<\/span>.\n   The order of the elements in the input list is preserved."}, "type": "('a -> bool) -> 'a list -> 'a list * 'a list", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a list"}]}}, {"comment": "<h6>Association lists<\/h6>"}, {"value": {"name": "List.assoc", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|7212"}, "info": {"description": "<span class=\"code\" >assoc a l<\/span> returns the value associated with key <span class=\"code\" >a<\/span> in the list of\n   pairs <span class=\"code\" >l<\/span>. That is,\n   <span class=\"code\" >assoc a [ ...; (a,b); ...] = b<\/span>\n   if <span class=\"code\" >(a,b)<\/span> is the leftmost binding of <span class=\"code\" >a<\/span> in list <span class=\"code\" >l<\/span>.\n   Raise <span class=\"code\" >Not_found<\/span> if there is no value associated with <span class=\"code\" >a<\/span> in the\n   list <span class=\"code\" >l<\/span>."}, "type": "'a -> ('a * 'b) list -> 'b", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "('a * 'b) list"}]}}, {"value": {"name": "List.assq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|7527"}, "info": {"description": "Same as <a href=\"{value|List.assoc}\" ><span class=\"code\" >List.assoc<\/span><\/a>, but uses physical equality instead of structural\n   equality to compare keys."}, "type": "'a -> ('a * 'b) list -> 'b", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "('a * 'b) list"}]}}, {"value": {"name": "List.mem_assoc", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|7674"}, "info": {"description": "Same as <a href=\"{value|List.assoc}\" ><span class=\"code\" >List.assoc<\/span><\/a>, but simply return true if a binding exists,\n   and false if no bindings exist for the given key."}, "type": "'a -> ('a * 'b) list -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "('a * 'b) list"}]}}, {"value": {"name": "List.mem_assq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|7847"}, "info": {"description": "Same as <a href=\"{value|List.mem_assoc}\" ><span class=\"code\" >List.mem_assoc<\/span><\/a>, but uses physical equality instead of\n   structural equality to compare keys."}, "type": "'a -> ('a * 'b) list -> bool", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "('a * 'b) list"}]}}, {"value": {"name": "List.remove_assoc", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|8004"}, "info": {"description": "<span class=\"code\" >remove_assoc a l<\/span> returns the list of\n   pairs <span class=\"code\" >l<\/span> without the first pair with key <span class=\"code\" >a<\/span>, if any.\n   Not tail-recursive."}, "type": "'a -> ('a * 'b) list -> ('a * 'b) list", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "('a * 'b) list"}]}}, {"value": {"name": "List.remove_assq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|8190"}, "info": {"description": "Same as <a href=\"{value|List.remove_assoc}\" ><span class=\"code\" >List.remove_assoc<\/span><\/a>, but uses physical equality instead\n   of structural equality to compare keys.  Not tail-recursive."}, "type": "'a -> ('a * 'b) list -> ('a * 'b) list", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "('a * 'b) list"}]}}, {"comment": "<h6>Lists of pairs<\/h6>"}, {"value": {"name": "List.split", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|8413"}, "info": {"description": "Transform a list of pairs into a pair of lists:\n   <span class=\"code\" >split [(a1,b1); ...; (an,bn)]<\/span> is <span class=\"code\" >([a1; ...; an], [b1; ...; bn])<\/span>.\n   Not tail-recursive."}, "type": "('a * 'b) list -> 'a list * 'b list", "params": [{"name": "", "type": "('a * 'b) list"}]}}, {"value": {"name": "List.combine", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|8612"}, "info": {"description": "Transform a pair of lists into a list of pairs:\n   <span class=\"code\" >combine [a1; ...; an] [b1; ...; bn]<\/span> is\n   <span class=\"code\" >[(a1,b1); ...; (an,bn)]<\/span>.\n   Raise <span class=\"code\" >Invalid_argument<\/span> if the two lists\n   have different lengths.  Not tail-recursive."}, "type": "'a list -> 'b list -> ('a * 'b) list", "params": [{"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}, {"comment": "<h6>Sorting<\/h6>"}, {"value": {"name": "List.sort", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|8908"}, "info": {"description": "Sort a list in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see Array.sort for\n   a complete specification).  For example,\n   <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a> is a suitable comparison function.\n   The resulting list is sorted in increasing order.\n   <span class=\"code\" >List.sort<\/span> is guaranteed to run in constant heap space\n   (in addition to the size of the result list) and logarithmic\n   stack space.<br><\/br>\n   The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space."}, "type": "('a -> 'a -> int) -> 'a list -> 'a list", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.stable_sort", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|9636"}, "info": {"description": "Same as <a href=\"{value|List.sort}\" ><span class=\"code\" >List.sort<\/span><\/a>, but the sorting algorithm is guaranteed to\n   be stable (i.e. elements that compare equal are kept in their\n   original order) .<br><\/br>\n   The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space."}, "type": "('a -> 'a -> int) -> 'a list -> 'a list", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.fast_sort", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|9964"}, "info": {"description": "Same as <a href=\"{value|List.sort}\" ><span class=\"code\" >List.sort<\/span><\/a> or <a href=\"{value|List.stable_sort}\" ><span class=\"code\" >List.stable_sort<\/span><\/a>, whichever is faster\n    on typical input."}, "type": "('a -> 'a -> int) -> 'a list -> 'a list", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "List.merge", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/list.mli|10115"}, "info": {"description": "Merge two lists:\n    Assuming that <span class=\"code\" >l1<\/span> and <span class=\"code\" >l2<\/span> are sorted according to the\n    comparison function <span class=\"code\" >cmp<\/span>, <span class=\"code\" >merge cmp l1 l2<\/span> will return a\n    sorted list containting all the elements of <span class=\"code\" >l1<\/span> and <span class=\"code\" >l2<\/span>.\n    If several elements compare equal, the elements of <span class=\"code\" >l1<\/span> will be\n    before the elements of <span class=\"code\" >l2<\/span>.\n    Not tail-recursive (sum of the lengths of the arguments)."}, "type": "('a -> 'a -> int) -> 'a list -> 'a list -> 'a list", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a list"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Lexing": {"module": {"name": "Lexing", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|0"}, "info": {"description": "The run-time library for lexers generated by <span class=\"code\" >ocamllex<\/span>."}, "type": "sig  end", "module_structure": [{"comment": "<h6>Positions<\/h6>"}, {"type": {"name": "Lexing.position", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|1052"}, "info": {"description": "A value of type <span class=\"code\" >position<\/span> describes a point in a source file.\n   <span class=\"code\" >pos_fname<\/span> is the file name; <span class=\"code\" >pos_lnum<\/span> is the line number;\n   <span class=\"code\" >pos_bol<\/span> is the offset of the beginning of the line (number\n   of characters between the beginning of the file and the beginning\n   of the line); <span class=\"code\" >pos_cnum<\/span> is the offset of the position (number of\n   characters between the beginning of the file and the position).<br><\/br>\n   See the documentation of type <span class=\"code\" >lexbuf<\/span> for information about\n   how the lexing engine will manage positions."}, "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "pos_fname", "mutable": false, "type": "string"}, {"name": "pos_lnum", "mutable": false, "type": "int"}, {"name": "pos_bol", "mutable": false, "type": "int"}, {"name": "pos_cnum", "mutable": false, "type": "int"}]}}}, {"value": {"name": "Lexing.dummy_pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|1649"}, "info": {"description": "A value of type <span class=\"code\" >position<\/span>, guaranteed to be different from any\n   valid position."}, "type": "Lexing.position", "params": []}}, {"comment": "<h6>Lexer buffers<\/h6>"}, {"type": {"name": "Lexing.lexbuf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|1812"}, "info": {"description": "The type of lexer buffers. A lexer buffer is the argument passed\n   to the scanning functions defined by the generated scanners.\n   The lexer buffer holds the current state of the scanner, plus\n   a function to refill the buffer from the input.<br><\/br>\n   At each token, the lexing engine will copy <span class=\"code\" >lex_curr_p<\/span> to\n   <span class=\"code\" >lex_start_p<\/span>, then change the <span class=\"code\" >pos_cnum<\/span> field\n   of <span class=\"code\" >lex_curr_p<\/span> by updating it with the number of characters read\n   since the start of the <span class=\"code\" >lexbuf<\/span>.  The other fields are left\n   unchanged by the lexing engine.  In order to keep them\n   accurate, they must be initialised before the first use of the\n   lexbuf, and updated by the relevant lexer actions (i.e. at each\n   end of line -- see also <span class=\"code\" >new_line<\/span>)."}, "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "refill_buff", "mutable": false, "type": "Lexing.lexbuf -> unit"}, {"name": "lex_buffer", "mutable": true, "type": "string"}, {"name": "lex_buffer_len", "mutable": true, "type": "int"}, {"name": "lex_abs_pos", "mutable": true, "type": "int"}, {"name": "lex_start_pos", "mutable": true, "type": "int"}, {"name": "lex_curr_pos", "mutable": true, "type": "int"}, {"name": "lex_last_pos", "mutable": true, "type": "int"}, {"name": "lex_last_action", "mutable": true, "type": "int"}, {"name": "lex_eof_reached", "mutable": true, "type": "bool"}, {"name": "lex_mem", "mutable": true, "type": "int array"}, {"name": "lex_start_p", "mutable": true, "type": "Lexing.position"}, {"name": "lex_curr_p", "mutable": true, "type": "Lexing.position"}]}}}, {"value": {"name": "Lexing.from_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|2949"}, "info": {"description": "Create a lexer buffer which reads from\n   the given string. Reading starts from the first character in\n   the string. An end-of-input condition is generated when the\n   end of the string is reached."}, "type": "string -> Lexing.lexbuf", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Lexing.from_function", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|3191"}, "info": {"description": "Create a lexer buffer with the given function as its reading method.\n   When the scanner needs more characters, it will call the given\n   function, giving it a character string <span class=\"code\" >s<\/span> and a character\n   count <span class=\"code\" >n<\/span>. The function should put <span class=\"code\" >n<\/span> characters or less in <span class=\"code\" >s<\/span>,\n   starting at character number 0, and return the number of characters\n   provided. A return value of 0 means end of input."}, "type": "(string -> int -> int) -> Lexing.lexbuf", "params": [{"name": "", "type": "string -> int -> int"}]}}, {"comment": "<h6>Functions for lexer semantic actions<\/h6>"}, {"comment": "The following functions can be called from the semantic actions\n   of lexer definitions (the ML code enclosed in braces that\n   computes the value returned by lexing functions). They give\n   access to the character string matched by the regular expression\n   associated with the semantic action. These functions must be\n   applied to the argument <span class=\"code\" >lexbuf<\/span>, which, in the code generated by\n   <span class=\"code\" >ocamllex<\/span>, is bound to the lexer buffer passed to the parsing\n   function."}, {"value": {"name": "Lexing.lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|4169"}, "info": {"description": "<span class=\"code\" >Lexing.lexeme lexbuf<\/span> returns the string matched by\n           the regular expression."}, "type": "Lexing.lexbuf -> string", "params": [{"name": "", "type": "Lexing.lexbuf"}]}}, {"value": {"name": "Lexing.lexeme_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|4295"}, "info": {"description": "<span class=\"code\" >Lexing.lexeme_char lexbuf i<\/span> returns character number <span class=\"code\" >i<\/span> in\n   the matched string."}, "type": "Lexing.lexbuf -> int -> char", "params": [{"name": "", "type": "Lexing.lexbuf"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Lexing.lexeme_start", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|4428"}, "info": {"description": "<span class=\"code\" >Lexing.lexeme_start lexbuf<\/span> returns the offset in the\n   input stream of the first character of the matched string.\n   The first character of the stream has offset 0."}, "type": "Lexing.lexbuf -> int", "params": [{"name": "", "type": "Lexing.lexbuf"}]}}, {"value": {"name": "Lexing.lexeme_end", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|4637"}, "info": {"description": "<span class=\"code\" >Lexing.lexeme_end lexbuf<\/span> returns the offset in the input stream\n   of the character following the last character of the matched\n   string. The first character of the stream has offset 0."}, "type": "Lexing.lexbuf -> int", "params": [{"name": "", "type": "Lexing.lexbuf"}]}}, {"value": {"name": "Lexing.lexeme_start_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|4865"}, "info": {"description": "Like <span class=\"code\" >lexeme_start<\/span>, but return a complete <span class=\"code\" >position<\/span> instead\n    of an offset."}, "type": "Lexing.lexbuf -> Lexing.position", "params": [{"name": "", "type": "Lexing.lexbuf"}]}}, {"value": {"name": "Lexing.lexeme_end_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|4993"}, "info": {"description": "Like <span class=\"code\" >lexeme_end<\/span>, but return a complete <span class=\"code\" >position<\/span> instead\n    of an offset."}, "type": "Lexing.lexbuf -> Lexing.position", "params": [{"name": "", "type": "Lexing.lexbuf"}]}}, {"value": {"name": "Lexing.new_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|5117"}, "info": {"description": "Update the <span class=\"code\" >lex_curr_p<\/span> field of the lexbuf to reflect the start\n    of a new line.  You can call this function in the semantic action\n    of the rule that matches the end-of-line character.", "since": "3.11.0"}, "type": "Lexing.lexbuf -> unit", "params": [{"name": "", "type": "Lexing.lexbuf"}]}}, {"comment": "<h6>Miscellaneous functions<\/h6>"}, {"value": {"name": "Lexing.flush_input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lexing.mli|5400"}, "info": {"description": "Discard the contents of the buffer and reset the current\n    position to 0.  The next use of the lexbuf will trigger a\n    refill."}, "type": "Lexing.lexbuf -> unit", "params": [{"name": "", "type": "Lexing.lexbuf"}]}}], "dependencies": {"uses": [], "used_by": ["Parsing", "Regexp", "Dns"]}}}, "Int64": {"module": {"name": "Int64", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|0"}, "info": {"description": "64-bit integers.<br><\/br>\n   This module provides operations on the type <span class=\"code\" >int64<\/span> of\n   signed 64-bit integers.  Unlike the built-in <span class=\"code\" >int<\/span> type,\n   the type <span class=\"code\" >int64<\/span> is guaranteed to be exactly 64-bit wide on all\n   platforms.  All arithmetic operations over <span class=\"code\" >int64<\/span> are taken\n   modulo 2<sup>64<\/sup><br><\/br>\n   Performance notice: values of type <span class=\"code\" >int64<\/span> occupy more memory\n   space than values of type <span class=\"code\" >int<\/span>, and arithmetic operations on\n   <span class=\"code\" >int64<\/span> are generally slower than those on <span class=\"code\" >int<\/span>.  Use <span class=\"code\" >int64<\/span>\n   only when the application requires exact 64-bit arithmetic."}, "type": "sig  end", "module_structure": [{"value": {"name": "Int64.zero", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|1499"}, "info": {"description": "The 64-bit integer 0."}, "type": "int64", "params": []}}, {"value": {"name": "Int64.one", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|1546"}, "info": {"description": "The 64-bit integer 1."}, "type": "int64", "params": []}}, {"value": {"name": "Int64.minus_one", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|1592"}, "info": {"description": "The 64-bit integer -1."}, "type": "int64", "params": []}}, {"value": {"name": "Int64.neg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|1645"}, "info": {"description": "Unary negation."}, "type": "int64 -> int64", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|1714"}, "info": {"description": "Addition."}, "type": "int64 -> int64 -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.sub", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|1786"}, "info": {"description": "Subtraction."}, "type": "int64 -> int64 -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.mul", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|1861"}, "info": {"description": "Multiplication."}, "type": "int64 -> int64 -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.div", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|1939"}, "info": {"description": "Integer division.  Raise <span class=\"code\" >Division_by_zero<\/span> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"{value|Pervasives.(\/)}\" ><span class=\"code\" >Pervasives.(\/)<\/span><\/a>."}, "type": "int64 -> int64 -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.rem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|2190"}, "info": {"description": "Integer remainder.  If <span class=\"code\" >y<\/span> is not zero, the result\n   of <span class=\"code\" >Int64.rem x y<\/span> satisfies the following property:\n   <span class=\"code\" >x = Int64.add (Int64.mul (Int64.div x y) y) (Int64.rem x y)<\/span>.\n   If <span class=\"code\" >y = 0<\/span>, <span class=\"code\" >Int64.rem x y<\/span> raises <span class=\"code\" >Division_by_zero<\/span>."}, "type": "int64 -> int64 -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.succ", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|2483"}, "info": {"description": "Successor.  <span class=\"code\" >Int64.succ x<\/span> is <span class=\"code\" >Int64.add x Int64.one<\/span>."}, "type": "int64 -> int64", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.pred", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|2572"}, "info": {"description": "Predecessor.  <span class=\"code\" >Int64.pred x<\/span> is <span class=\"code\" >Int64.sub x Int64.one<\/span>."}, "type": "int64 -> int64", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.abs", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|2663"}, "info": {"description": "Return the absolute value of its argument."}, "type": "int64 -> int64", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.max_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|2739"}, "info": {"description": "The greatest representable 64-bit integer, 2<sup>63<\/sup> - 1."}, "type": "int64", "params": []}}, {"value": {"name": "Int64.min_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|2822"}, "info": {"description": "The smallest representable 64-bit integer, -2<sup>63<\/sup>."}, "type": "int64", "params": []}}, {"value": {"name": "Int64.logand", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|2902"}, "info": {"description": "Bitwise logical and."}, "type": "int64 -> int64 -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.logor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|2988"}, "info": {"description": "Bitwise logical or."}, "type": "int64 -> int64 -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.logxor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|3071"}, "info": {"description": "Bitwise logical exclusive or."}, "type": "int64 -> int64 -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.lognot", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|3166"}, "info": {"description": "Bitwise logical negation"}, "type": "int64 -> int64", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.shift_left", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|3227"}, "info": {"description": "<span class=\"code\" >Int64.shift_left x y<\/span> shifts <span class=\"code\" >x<\/span> to the left by <span class=\"code\" >y<\/span> bits.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= 64<\/span>."}, "type": "int64 -> int -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Int64.shift_right", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|3407"}, "info": {"description": "<span class=\"code\" >Int64.shift_right x y<\/span> shifts <span class=\"code\" >x<\/span> to the right by <span class=\"code\" >y<\/span> bits.\n   This is an arithmetic shift: the sign bit of <span class=\"code\" >x<\/span> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= 64<\/span>."}, "type": "int64 -> int -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Int64.shift_right_logical", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|3693"}, "info": {"description": "<span class=\"code\" >Int64.shift_right_logical x y<\/span> shifts <span class=\"code\" >x<\/span> to the right by <span class=\"code\" >y<\/span> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <span class=\"code\" >x<\/span>.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= 64<\/span>."}, "type": "int64 -> int -> int64", "params": [{"name": "", "type": "int64"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Int64.of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|3994"}, "info": {"description": "Convert the given integer (type <span class=\"code\" >int<\/span>) to a 64-bit integer\n    (type <span class=\"code\" >int64<\/span>)."}, "type": "int -> int64", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Int64.to_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|4130"}, "info": {"description": "Convert the given 64-bit integer (type <span class=\"code\" >int64<\/span>) to an\n   integer (type <span class=\"code\" >int<\/span>).  On 64-bit platforms, the 64-bit integer\n   is taken modulo 2<sup>63<\/sup>, i.e. the high-order bit is lost\n   during the conversion.  On 32-bit platforms, the 64-bit integer\n   is taken modulo 2<sup>31<\/sup>, i.e. the top 33 bits are lost\n   during the conversion."}, "type": "int64 -> int", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|4516"}, "info": {"description": "Convert the given floating-point number to a 64-bit integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range [<a href=\"{value|Int64.min_int}\" ><span class=\"code\" >Int64.min_int<\/span><\/a>, <a href=\"{value|Int64.max_int}\" ><span class=\"code\" >Int64.max_int<\/span><\/a>]."}, "type": "float -> int64", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Int64.to_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|4842"}, "info": {"description": "Convert the given 64-bit integer to a floating-point number."}, "type": "int64 -> float", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.of_int32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|4971"}, "info": {"description": "Convert the given 32-bit integer (type <span class=\"code\" >int32<\/span>)\n   to a 64-bit integer (type <span class=\"code\" >int64<\/span>)."}, "type": "int32 -> int64", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int64.to_int32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|5121"}, "info": {"description": "Convert the given 64-bit integer (type <span class=\"code\" >int64<\/span>) to a\n   32-bit integer (type <span class=\"code\" >int32<\/span>). The 64-bit integer\n   is taken modulo 2<sup>32<\/sup>, i.e. the top 32 bits are lost\n   during the conversion."}, "type": "int64 -> int32", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.of_nativeint", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|5374"}, "info": {"description": "Convert the given native integer (type <span class=\"code\" >nativeint<\/span>)\n   to a 64-bit integer (type <span class=\"code\" >int64<\/span>)."}, "type": "nativeint -> int64", "params": [{"name": "", "type": "nativeint"}]}}, {"value": {"name": "Int64.to_nativeint", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|5540"}, "info": {"description": "Convert the given 64-bit integer (type <span class=\"code\" >int64<\/span>) to a\n   native integer.  On 32-bit platforms, the 64-bit integer\n   is taken modulo 2<sup>32<\/sup>.  On 64-bit platforms,\n   the conversion is exact."}, "type": "int64 -> nativeint", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|5805"}, "info": {"description": "Convert the given string to a 64-bit integer.\n   The string is read in decimal (by default) or in hexadecimal,\n   octal or binary if the string begins with <span class=\"code\" >0x<\/span>, <span class=\"code\" >0o<\/span> or <span class=\"code\" >0b<\/span>\n   respectively.\n   Raise <span class=\"code\" >Failure \"int_of_string\"<\/span> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <span class=\"code\" >int64<\/span>."}, "type": "string -> int64", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Int64.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|6264"}, "info": {"description": "Return the string representation of its argument, in decimal."}, "type": "int64 -> string", "params": [{"name": "", "type": "int64"}]}}, {"value": {"name": "Int64.bits_of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|6366"}, "info": {"description": "Return the internal representation of the given float according\n   to the IEEE 754 floating-point ``double format'' bit layout.\n   Bit 63 of the result represents the sign of the float;\n   bits 62 to 52 represent the (biased) exponent; bits 51 to 0\n   represent the mantissa."}, "type": "float -> int64", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Int64.float_of_bits", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|6719"}, "info": {"description": "Return the floating-point number whose internal representation,\n   according to the IEEE 754 floating-point ``double format'' bit layout,\n   is the given <span class=\"code\" >int64<\/span>."}, "type": "int64 -> float", "params": [{"name": "", "type": "int64"}]}}, {"type": {"name": "Int64.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|6968"}, "info": {"description": "An alias for the type of 64-bit integers."}, "params": [], "kind": {"type": "abstract"}, "manifest": "int64"}}, {"value": {"name": "Int64.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int64.mli|7024"}, "info": {"description": "The comparison function for 64-bit integers, with the same specification as\n    <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a>.  Along with the type <span class=\"code\" >t<\/span>, this function <span class=\"code\" >compare<\/span>\n    allows the module <span class=\"code\" >Int64<\/span> to be passed as argument to the functors\n    <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a> and <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>."}, "type": "Int64.t -> Int64.t -> int", "params": [{"name": "", "type": "Int64.t"}, {"name": "", "type": "Int64.t"}]}}], "dependencies": {"uses": [], "used_by": ["Random"]}}}, "Int32": {"module": {"name": "Int32", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|0"}, "info": {"description": "32-bit integers.<br><\/br>\n   This module provides operations on the type <span class=\"code\" >int32<\/span>\n   of signed 32-bit integers.  Unlike the built-in <span class=\"code\" >int<\/span> type,\n   the type <span class=\"code\" >int32<\/span> is guaranteed to be exactly 32-bit wide on all\n   platforms.  All arithmetic operations over <span class=\"code\" >int32<\/span> are taken\n   modulo 2<sup>32<\/sup>.<br><\/br>\n   Performance notice: values of type <span class=\"code\" >int32<\/span> occupy more memory\n   space than values of type <span class=\"code\" >int<\/span>, and arithmetic operations on\n   <span class=\"code\" >int32<\/span> are generally slower than those on <span class=\"code\" >int<\/span>.  Use <span class=\"code\" >int32<\/span>\n   only when the application requires exact 32-bit arithmetic."}, "type": "sig  end", "module_structure": [{"value": {"name": "Int32.zero", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|1500"}, "info": {"description": "The 32-bit integer 0."}, "type": "int32", "params": []}}, {"value": {"name": "Int32.one", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|1547"}, "info": {"description": "The 32-bit integer 1."}, "type": "int32", "params": []}}, {"value": {"name": "Int32.minus_one", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|1593"}, "info": {"description": "The 32-bit integer -1."}, "type": "int32", "params": []}}, {"value": {"name": "Int32.neg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|1646"}, "info": {"description": "Unary negation."}, "type": "int32 -> int32", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|1715"}, "info": {"description": "Addition."}, "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.sub", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|1787"}, "info": {"description": "Subtraction."}, "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.mul", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|1862"}, "info": {"description": "Multiplication."}, "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.div", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|1940"}, "info": {"description": "Integer division.  Raise <span class=\"code\" >Division_by_zero<\/span> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"{value|Pervasives.(\/)}\" ><span class=\"code\" >Pervasives.(\/)<\/span><\/a>."}, "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.rem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|2191"}, "info": {"description": "Integer remainder.  If <span class=\"code\" >y<\/span> is not zero, the result\n   of <span class=\"code\" >Int32.rem x y<\/span> satisfies the following property:\n   <span class=\"code\" >x = Int32.add (Int32.mul (Int32.div x y) y) (Int32.rem x y)<\/span>.\n   If <span class=\"code\" >y = 0<\/span>, <span class=\"code\" >Int32.rem x y<\/span> raises <span class=\"code\" >Division_by_zero<\/span>."}, "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.succ", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|2484"}, "info": {"description": "Successor.  <span class=\"code\" >Int32.succ x<\/span> is <span class=\"code\" >Int32.add x Int32.one<\/span>."}, "type": "int32 -> int32", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.pred", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|2573"}, "info": {"description": "Predecessor.  <span class=\"code\" >Int32.pred x<\/span> is <span class=\"code\" >Int32.sub x Int32.one<\/span>."}, "type": "int32 -> int32", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.abs", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|2664"}, "info": {"description": "Return the absolute value of its argument."}, "type": "int32 -> int32", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.max_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|2740"}, "info": {"description": "The greatest representable 32-bit integer, 2<sup>31<\/sup> - 1."}, "type": "int32", "params": []}}, {"value": {"name": "Int32.min_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|2823"}, "info": {"description": "The smallest representable 32-bit integer, -2<sup>31<\/sup>."}, "type": "int32", "params": []}}, {"value": {"name": "Int32.logand", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|2904"}, "info": {"description": "Bitwise logical and."}, "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.logor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|2990"}, "info": {"description": "Bitwise logical or."}, "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.logxor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|3073"}, "info": {"description": "Bitwise logical exclusive or."}, "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.lognot", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|3168"}, "info": {"description": "Bitwise logical negation"}, "type": "int32 -> int32", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.shift_left", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|3229"}, "info": {"description": "<span class=\"code\" >Int32.shift_left x y<\/span> shifts <span class=\"code\" >x<\/span> to the left by <span class=\"code\" >y<\/span> bits.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= 32<\/span>."}, "type": "int32 -> int -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Int32.shift_right", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|3409"}, "info": {"description": "<span class=\"code\" >Int32.shift_right x y<\/span> shifts <span class=\"code\" >x<\/span> to the right by <span class=\"code\" >y<\/span> bits.\n   This is an arithmetic shift: the sign bit of <span class=\"code\" >x<\/span> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= 32<\/span>."}, "type": "int32 -> int -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Int32.shift_right_logical", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|3695"}, "info": {"description": "<span class=\"code\" >Int32.shift_right_logical x y<\/span> shifts <span class=\"code\" >x<\/span> to the right by <span class=\"code\" >y<\/span> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <span class=\"code\" >x<\/span>.\n   The result is unspecified if <span class=\"code\" >y &lt; 0<\/span> or <span class=\"code\" >y &gt;= 32<\/span>."}, "type": "int32 -> int -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Int32.of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|3996"}, "info": {"description": "Convert the given integer (type <span class=\"code\" >int<\/span>) to a 32-bit integer\n    (type <span class=\"code\" >int32<\/span>)."}, "type": "int -> int32", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Int32.to_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|4132"}, "info": {"description": "Convert the given 32-bit integer (type <span class=\"code\" >int32<\/span>) to an\n   integer (type <span class=\"code\" >int<\/span>).  On 32-bit platforms, the 32-bit integer\n   is taken modulo 2<sup>31<\/sup>, i.e. the high-order bit is lost\n   during the conversion.  On 64-bit platforms, the conversion\n   is exact."}, "type": "int32 -> int", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|4444"}, "info": {"description": "Convert the given floating-point number to a 32-bit integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range [<a href=\"{value|Int32.min_int}\" ><span class=\"code\" >Int32.min_int<\/span><\/a>, <a href=\"{value|Int32.max_int}\" ><span class=\"code\" >Int32.max_int<\/span><\/a>]."}, "type": "float -> int32", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Int32.to_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|4770"}, "info": {"description": "Convert the given 32-bit integer to a floating-point number."}, "type": "int32 -> float", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|4898"}, "info": {"description": "Convert the given string to a 32-bit integer.\n   The string is read in decimal (by default) or in hexadecimal,\n   octal or binary if the string begins with <span class=\"code\" >0x<\/span>, <span class=\"code\" >0o<\/span> or <span class=\"code\" >0b<\/span>\n   respectively.\n   Raise <span class=\"code\" >Failure \"int_of_string\"<\/span> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <span class=\"code\" >int32<\/span>."}, "type": "string -> int32", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Int32.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|5357"}, "info": {"description": "Return the string representation of its argument, in signed decimal."}, "type": "int32 -> string", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Int32.bits_of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|5466"}, "info": {"description": "Return the internal representation of the given float according\n   to the IEEE 754 floating-point ``single format'' bit layout.\n   Bit 31 of the result represents the sign of the float;\n   bits 30 to 23 represent the (biased) exponent; bits 22 to 0\n   represent the mantissa."}, "type": "float -> int32", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Int32.float_of_bits", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|5819"}, "info": {"description": "Return the floating-point number whose internal representation,\n   according to the IEEE 754 floating-point ``single format'' bit layout,\n   is the given <span class=\"code\" >int32<\/span>."}, "type": "int32 -> float", "params": [{"name": "", "type": "int32"}]}}, {"type": {"name": "Int32.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|6068"}, "info": {"description": "An alias for the type of 32-bit integers."}, "params": [], "kind": {"type": "abstract"}, "manifest": "int32"}}, {"value": {"name": "Int32.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/int32.mli|6124"}, "info": {"description": "The comparison function for 32-bit integers, with the same specification as\n    <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a>.  Along with the type <span class=\"code\" >t<\/span>, this function <span class=\"code\" >compare<\/span>\n    allows the module <span class=\"code\" >Int32<\/span> to be passed as argument to the functors\n    <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a> and <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>."}, "type": "Int32.t -> Int32.t -> int", "params": [{"name": "", "type": "Int32.t"}, {"name": "", "type": "Int32.t"}]}}], "dependencies": {"uses": [], "used_by": ["Random", "Obj"]}}}, "Hashtbl": {"module": {"name": "Hashtbl", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|0"}, "info": {"description": "Hash tables and hash functions.<br><\/br>\n   Hash tables are hashed association tables, with in-place modification."}, "type": "sig  end", "module_structure": [{"comment": "<h6>Generic interface<\/h6>"}, {"type": {"name": "Hashtbl.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|1173"}, "info": {"description": "The type of hash tables from type <span class=\"code\" >'a<\/span> to type <span class=\"code\" >'b<\/span>."}, "params": [{"covariant": true, "contravariant": true, "type": "'a"}, {"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Hashtbl.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|1173"}, "info": {"description": "<span class=\"code\" >Hashtbl.create n<\/span> creates a new, empty hash table, with\n   initial size <span class=\"code\" >n<\/span>.  For best results, <span class=\"code\" >n<\/span> should be on the\n   order of the expected number of elements that will be in\n   the table.  The table grows as needed, so <span class=\"code\" >n<\/span> is just an\n   initial guess."}, "type": "int -> ('a, 'b) Hashtbl.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Hashtbl.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|1468"}, "info": {"description": "Empty a hash table."}, "type": "('a, 'b) Hashtbl.t -> unit", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}]}}, {"value": {"name": "Hashtbl.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|1528"}, "info": {"description": "<span class=\"code\" >Hashtbl.add tbl x y<\/span> adds a binding of <span class=\"code\" >x<\/span> to <span class=\"code\" >y<\/span> in table <span class=\"code\" >tbl<\/span>.\n   Previous bindings for <span class=\"code\" >x<\/span> are not removed, but simply\n   hidden. That is, after performing <a href=\"{value|Hashtbl.remove}\" ><span class=\"code\" >Hashtbl.remove<\/span><\/a><span class=\"code\" > tbl x<\/span>,\n   the previous binding for <span class=\"code\" >x<\/span>, if any, is restored.\n   (Same behavior as with association lists.)"}, "type": "('a, 'b) Hashtbl.t -> 'a -> 'b -> unit", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|1865"}, "info": {"description": "Return a copy of the given hashtable."}, "type": "('a, 'b) Hashtbl.t -> ('a, 'b) Hashtbl.t", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}]}}, {"value": {"name": "Hashtbl.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|1947"}, "info": {"description": "<span class=\"code\" >Hashtbl.find tbl x<\/span> returns the current binding of <span class=\"code\" >x<\/span> in <span class=\"code\" >tbl<\/span>,\n   or raises <span class=\"code\" >Not_found<\/span> if no such binding exists."}, "type": "('a, 'b) Hashtbl.t -> 'a -> 'b", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.find_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|2107"}, "info": {"description": "<span class=\"code\" >Hashtbl.find_all tbl x<\/span> returns the list of all data\n   associated with <span class=\"code\" >x<\/span> in <span class=\"code\" >tbl<\/span>.\n   The current binding is returned first, then the previous\n   bindings, in reverse order of introduction in the table."}, "type": "('a, 'b) Hashtbl.t -> 'a -> 'b list", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|2365"}, "info": {"description": "<span class=\"code\" >Hashtbl.mem tbl x<\/span> checks if <span class=\"code\" >x<\/span> is bound in <span class=\"code\" >tbl<\/span>."}, "type": "('a, 'b) Hashtbl.t -> 'a -> bool", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|2461"}, "info": {"description": "<span class=\"code\" >Hashtbl.remove tbl x<\/span> removes the current binding of <span class=\"code\" >x<\/span> in <span class=\"code\" >tbl<\/span>,\n   restoring the previous binding if it exists.\n   It does nothing if <span class=\"code\" >x<\/span> is not bound in <span class=\"code\" >tbl<\/span>."}, "type": "('a, 'b) Hashtbl.t -> 'a -> unit", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.replace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|2672"}, "info": {"description": "<span class=\"code\" >Hashtbl.replace tbl x y<\/span> replaces the current binding of <span class=\"code\" >x<\/span>\n   in <span class=\"code\" >tbl<\/span> by a binding of <span class=\"code\" >x<\/span> to <span class=\"code\" >y<\/span>.  If <span class=\"code\" >x<\/span> is unbound in <span class=\"code\" >tbl<\/span>,\n   a binding of <span class=\"code\" >x<\/span> to <span class=\"code\" >y<\/span> is added to <span class=\"code\" >tbl<\/span>.\n   This is functionally equivalent to <a href=\"{value|Hashtbl.remove}\" ><span class=\"code\" >Hashtbl.remove<\/span><\/a><span class=\"code\" > tbl x<\/span>\n   followed by <a href=\"{value|Hashtbl.add}\" ><span class=\"code\" >Hashtbl.add<\/span><\/a><span class=\"code\" > tbl x y<\/span>."}, "type": "('a, 'b) Hashtbl.t -> 'a -> 'b -> unit", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|3007"}, "info": {"description": "<span class=\"code\" >Hashtbl.iter f tbl<\/span> applies <span class=\"code\" >f<\/span> to all bindings in table <span class=\"code\" >tbl<\/span>.\n   <span class=\"code\" >f<\/span> receives the key as first argument, and the associated value\n   as second argument. Each binding is presented exactly once to <span class=\"code\" >f<\/span>.\n   The order in which the bindings are passed to <span class=\"code\" >f<\/span> is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to <span class=\"code\" >f<\/span> in reverse order of introduction, that is,\n   the most recent binding is passed first."}, "type": "('a -> 'b -> unit) -> ('a, 'b) Hashtbl.t -> unit", "params": [{"name": "", "type": "'a -> 'b -> unit"}, {"name": "", "type": "('a, 'b) Hashtbl.t"}]}}, {"value": {"name": "Hashtbl.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|3521"}, "info": {"description": "<span class=\"code\" >Hashtbl.fold f tbl init<\/span> computes\n   <span class=\"code\" >(f kN dN ... (f k1 d1 init)...)<\/span>,\n   where <span class=\"code\" >k1 ... kN<\/span> are the keys of all bindings in <span class=\"code\" >tbl<\/span>,\n   and <span class=\"code\" >d1 ... dN<\/span> are the associated values.\n   Each binding is presented exactly once to <span class=\"code\" >f<\/span>.\n   The order in which the bindings are passed to <span class=\"code\" >f<\/span> is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to <span class=\"code\" >f<\/span> in reverse order of introduction, that is,\n   the most recent binding is passed first."}, "type": "('a -> 'b -> 'c -> 'c) -> ('a, 'b) Hashtbl.t -> 'c -> 'c", "params": [{"name": "", "type": "'a -> 'b -> 'c -> 'c"}, {"name": "", "type": "('a, 'b) Hashtbl.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|4070"}, "info": {"description": "<span class=\"code\" >Hashtbl.length tbl<\/span> returns the number of bindings in <span class=\"code\" >tbl<\/span>.\n   Multiple bindings are counted multiply, so <span class=\"code\" >Hashtbl.length<\/span>\n   gives the number of times <span class=\"code\" >Hashtbl.iter<\/span> calls its first argument."}, "type": "('a, 'b) Hashtbl.t -> int", "params": [{"name": "", "type": "('a, 'b) Hashtbl.t"}]}}, {"comment": "<h6>Functorial interface<\/h6>"}, {"module_type": {"name": "Hashtbl.HashedType", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|4339"}, "info": {"description": "The input signature of the functor <a href=\"{module|Hashtbl.Make}\" ><span class=\"code\" >Hashtbl.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Hashtbl.HashedType.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|4430"}, "info": {"description": "The type of the hashtable keys."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Hashtbl.HashedType.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|4430"}, "info": {"description": "The equality predicate used to compare keys."}, "type": "Hashtbl.HashedType.t -> Hashtbl.HashedType.t -> bool", "params": [{"name": "", "type": "Hashtbl.HashedType.t"}, {"name": "", "type": "Hashtbl.HashedType.t"}]}}, {"value": {"name": "Hashtbl.HashedType.hash", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|4519"}, "info": {"description": "A hashing function on keys. It must be such that if two keys are\n          equal according to <span class=\"code\" >equal<\/span>, then they have identical hash values\n          as computed by <span class=\"code\" >hash<\/span>.\n          Examples: suitable (<span class=\"code\" >equal<\/span>, <span class=\"code\" >hash<\/span>) pairs for arbitrary key\n          types include\n          (<span class=\"code\" >(=)<\/span>, <a href=\"{value|Hashtbl.hash}\" ><span class=\"code\" >Hashtbl.hash<\/span><\/a>) for comparing objects by structure,\n          (<span class=\"code\" >(fun x y -&gt; compare x y = 0)<\/span>, <a href=\"{value|Hashtbl.hash}\" ><span class=\"code\" >Hashtbl.hash<\/span><\/a>)\n          for comparing objects by structure and handling <a href=\"{value|Pervasives.nan}\" ><span class=\"code\" >Pervasives.nan<\/span><\/a>\n          correctly, and\n          (<span class=\"code\" >(==)<\/span>, <a href=\"{value|Hashtbl.hash}\" ><span class=\"code\" >Hashtbl.hash<\/span><\/a>) for comparing objects by addresses\n          (e.g. for cyclic keys)."}, "type": "Hashtbl.HashedType.t -> int", "params": [{"name": "", "type": "Hashtbl.HashedType.t"}]}}]}}, {"module_type": {"name": "Hashtbl.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5224"}, "info": {"description": "The output signature of the functor <a href=\"{module|Hashtbl.Make}\" ><span class=\"code\" >Hashtbl.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Hashtbl.S.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5263"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Hashtbl.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5277"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Hashtbl.S.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5277"}, "info": "", "type": "int -> 'a Hashtbl.S.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Hashtbl.S.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5306"}, "info": "", "type": "'a Hashtbl.S.t -> unit", "params": [{"name": "", "type": "'a Hashtbl.S.t"}]}}, {"value": {"name": "Hashtbl.S.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5335"}, "info": "", "type": "'a Hashtbl.S.t -> 'a Hashtbl.S.t", "params": [{"name": "", "type": "'a Hashtbl.S.t"}]}}, {"value": {"name": "Hashtbl.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5363"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> 'a -> unit", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.S.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5403"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> unit", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}]}}, {"value": {"name": "Hashtbl.S.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5440"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> 'a", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}]}}, {"value": {"name": "Hashtbl.S.find_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5473"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> 'a list", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}]}}, {"value": {"name": "Hashtbl.S.replace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5515"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> 'a -> unit", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.S.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5559"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> bool", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}]}}, {"value": {"name": "Hashtbl.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5593"}, "info": "", "type": "(Hashtbl.S.key -> 'a -> unit) -> 'a Hashtbl.S.t -> unit", "params": [{"name": "", "type": "Hashtbl.S.key -> 'a -> unit"}, {"name": "", "type": "'a Hashtbl.S.t"}]}}, {"value": {"name": "Hashtbl.S.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5644"}, "info": "", "type": "(Hashtbl.S.key -> 'a -> 'b -> 'b) -> 'a Hashtbl.S.t -> 'b -> 'b", "params": [{"name": "", "type": "Hashtbl.S.key -> 'a -> 'b -> 'b"}, {"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.S.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5703"}, "info": "", "type": "'a Hashtbl.S.t -> int", "params": [{"name": "", "type": "'a Hashtbl.S.t"}]}}]}}, {"module": {"name": "Hashtbl.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5795"}, "info": {"description": "Functor building an implementation of the hashtable structure.\n    The functor <span class=\"code\" >Hashtbl.Make<\/span> returns a structure containing\n    a type <span class=\"code\" >key<\/span> of keys and a type <span class=\"code\" >'a t<\/span> of hash tables\n    associating data of type <span class=\"code\" >'a<\/span> to keys of type <span class=\"code\" >key<\/span>.\n    The operations perform similarly to those of the generic\n    interface, but use the hashing and equality functions\n    specified in the functor argument <span class=\"code\" >H<\/span> instead of generic\n    equality and hashing."}, "type": "functor (H : HashedType) -> sig  end", "module_functor": {"parameter": {"name": "H", "module_alias": {"name": "Hashtbl.HashedType"}}, "module_with": {"module_alias": {"name": "Hashtbl.S", "module_type": {"name": "Hashtbl.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5224"}, "info": {"description": "The output signature of the functor <a href=\"{module|Hashtbl.Make}\" ><span class=\"code\" >Hashtbl.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Hashtbl.S.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5263"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Hashtbl.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5277"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Hashtbl.S.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5277"}, "info": "", "type": "int -> 'a Hashtbl.S.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Hashtbl.S.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5306"}, "info": "", "type": "'a Hashtbl.S.t -> unit", "params": [{"name": "", "type": "'a Hashtbl.S.t"}]}}, {"value": {"name": "Hashtbl.S.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5335"}, "info": "", "type": "'a Hashtbl.S.t -> 'a Hashtbl.S.t", "params": [{"name": "", "type": "'a Hashtbl.S.t"}]}}, {"value": {"name": "Hashtbl.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5363"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> 'a -> unit", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.S.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5403"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> unit", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}]}}, {"value": {"name": "Hashtbl.S.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5440"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> 'a", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}]}}, {"value": {"name": "Hashtbl.S.find_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5473"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> 'a list", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}]}}, {"value": {"name": "Hashtbl.S.replace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5515"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> 'a -> unit", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.S.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5559"}, "info": "", "type": "'a Hashtbl.S.t -> Hashtbl.S.key -> bool", "params": [{"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "Hashtbl.S.key"}]}}, {"value": {"name": "Hashtbl.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5593"}, "info": "", "type": "(Hashtbl.S.key -> 'a -> unit) -> 'a Hashtbl.S.t -> unit", "params": [{"name": "", "type": "Hashtbl.S.key -> 'a -> unit"}, {"name": "", "type": "'a Hashtbl.S.t"}]}}, {"value": {"name": "Hashtbl.S.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5644"}, "info": "", "type": "(Hashtbl.S.key -> 'a -> 'b -> 'b) -> 'a Hashtbl.S.t -> 'b -> 'b", "params": [{"name": "", "type": "Hashtbl.S.key -> 'a -> 'b -> 'b"}, {"name": "", "type": "'a Hashtbl.S.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.S.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|5703"}, "info": "", "type": "'a Hashtbl.S.t -> int", "params": [{"name": "", "type": "'a Hashtbl.S.t"}]}}]}}, "with": " with type key = H.t"}}, "dependencies": {"uses": []}}}, {"comment": "<h6>The polymorphic hash primitive<\/h6>"}, {"value": {"name": "Hashtbl.hash", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|6347"}, "info": {"description": "<span class=\"code\" >Hashtbl.hash x<\/span> associates a positive integer to any value of\n   any type. It is guaranteed that\n   if <span class=\"code\" >x = y<\/span> or <span class=\"code\" >Pervasives.compare x y = 0<\/span>, then <span class=\"code\" >hash x = hash y<\/span>.\n   Moreover, <span class=\"code\" >hash<\/span> always terminates, even on cyclic\n   structures."}, "type": "'a -> int", "params": [{"name": "", "type": "'a"}]}}, {"value": {"name": "Hashtbl.hash_param", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/hashtbl.mli|6614"}, "info": {"description": "<span class=\"code\" >Hashtbl.hash_param n m x<\/span> computes a hash value for <span class=\"code\" >x<\/span>, with the\n   same properties as for <span class=\"code\" >hash<\/span>. The two extra parameters <span class=\"code\" >n<\/span> and\n   <span class=\"code\" >m<\/span> give more precise control over hashing. Hashing performs a\n   depth-first, right-to-left traversal of the structure <span class=\"code\" >x<\/span>, stopping\n   after <span class=\"code\" >n<\/span> meaningful nodes were encountered, or <span class=\"code\" >m<\/span> nodes,\n   meaningful or not, were encountered. Meaningful nodes are: integers;\n   floating-point numbers; strings; characters; booleans; and constant\n   constructors. Larger values of <span class=\"code\" >m<\/span> and <span class=\"code\" >n<\/span> means that more\n   nodes are taken into account to compute the final hash\n   value, and therefore collisions are less likely to happen.\n   However, hashing takes longer. The parameters <span class=\"code\" >m<\/span> and <span class=\"code\" >n<\/span>\n   govern the tradeoff between accuracy and speed."}, "type": "int -> int -> 'a -> int", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "'a"}]}}], "dependencies": {"uses": [], "used_by": ["Weak", "Dns", "Http", "Openflow"]}}}, "Gc": {"module": {"name": "Gc", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|0"}, "info": {"description": "Memory management control and statistics; finalised values."}, "type": "sig  end", "module_structure": [{"type": {"name": "Gc.stat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|1027"}, "info": {"description": "The memory management counters are returned in a <span class=\"code\" >stat<\/span> record.<br><\/br>\n   The total amount of memory allocated by the program since it was started\n   is (in words) <span class=\"code\" >minor_words + major_words - promoted_words<\/span>.  Multiply by\n   the word size (4 on a 32-bit machine, 8 on a 64-bit machine) to get\n   the number of bytes."}, "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "minor_words", "mutable": false, "description": "Number of words allocated in the minor heap since\n       the program was started.  This number is accurate in\n       byte-code programs, but only an approximation in programs\n       compiled to native code.", "type": "float"}, {"name": "promoted_words", "mutable": false, "description": "Number of words allocated in the minor heap that\n       survived a minor collection and were moved to the major heap\n       since the program was started.", "type": "float"}, {"name": "major_words", "mutable": false, "description": "Number of words allocated in the major heap, including\n       the promoted words, since the program was started.", "type": "float"}, {"name": "minor_collections", "mutable": false, "description": "Number of minor collections since the program was started.", "type": "int"}, {"name": "major_collections", "mutable": false, "description": "Number of major collection cycles completed since the program\n        was started.", "type": "int"}, {"name": "heap_words", "mutable": false, "description": "Total size of the major heap, in words.", "type": "int"}, {"name": "heap_chunks", "mutable": false, "description": "Number of contiguous pieces of memory that make up the major heap.", "type": "int"}, {"name": "live_words", "mutable": false, "description": "Number of words of live data in the major heap, including the header\n       words.", "type": "int"}, {"name": "live_blocks", "mutable": false, "description": "Number of live blocks in the major heap.", "type": "int"}, {"name": "free_words", "mutable": false, "description": "Number of words in the free list.", "type": "int"}, {"name": "free_blocks", "mutable": false, "description": "Number of blocks in the free list.", "type": "int"}, {"name": "largest_free", "mutable": false, "description": "Size (in words) of the largest block in the free list.", "type": "int"}, {"name": "fragments", "mutable": false, "description": "Number of wasted words due to fragmentation.  These are\n       1-words free blocks placed between two live blocks.  They\n       are not available for allocation.", "type": "int"}, {"name": "compactions", "mutable": false, "description": "Number of heap compactions since the program was started.", "type": "int"}, {"name": "top_heap_words", "mutable": false, "description": "Maximum size reached by the major heap, in words.", "type": "int"}, {"name": "stack_size", "mutable": false, "description": "Current size of the stack, in words.", "type": "int"}]}}}, {"type": {"name": "Gc.control", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|3234"}, "info": {"description": "The GC parameters are given as a <span class=\"code\" >control<\/span> record.  Note that\n    these parameters can also be initialised by setting the\n    OCAMLRUNPARAM environment variable.  See the documentation of\n    ocamlrun."}, "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "minor_heap_size", "mutable": true, "description": "The size (in words) of the minor heap.  Changing\n       this parameter will trigger a minor collection.  Default: 32k.", "type": "int"}, {"name": "major_heap_increment", "mutable": true, "description": "The minimum number of words to add to the\n       major heap when increasing it.  Default: 124k.", "type": "int"}, {"name": "space_overhead", "mutable": true, "description": "The major GC speed is computed from this parameter.\n       This is the memory that will be \"wasted\" because the GC does not\n       immediatly collect unreachable blocks.  It is expressed as a\n       percentage of the memory used for live data.\n       The GC will work more (use more CPU time and collect\n       blocks more eagerly) if <span class=\"code\" >space_overhead<\/span> is smaller.\n       Default: 80.", "type": "int"}, {"name": "verbose", "mutable": true, "description": "This value controls the GC messages on standard error output.\n       It is a sum of some of the following flags, to print messages\n       on the corresponding events:<ul><li><span class=\"code\" >0x001<\/span> Start of major GC cycle.<\/li><li><span class=\"code\" >0x002<\/span> Minor collection and major GC slice.<\/li><li><span class=\"code\" >0x004<\/span> Growing and shrinking of the heap.<\/li><li><span class=\"code\" >0x008<\/span> Resizing of stacks and memory manager tables.<\/li><li><span class=\"code\" >0x010<\/span> Heap compaction.<\/li><li><span class=\"code\" >0x020<\/span> Change of GC parameters.<\/li><li><span class=\"code\" >0x040<\/span> Computation of major GC slice size.<\/li><li><span class=\"code\" >0x080<\/span> Calling of finalisation functions.<\/li><li><span class=\"code\" >0x100<\/span> Bytecode executable search at start-up.<\/li><li><span class=\"code\" >0x200<\/span> Computation of compaction triggering condition.\n       Default: 0.<\/li><\/ul>", "type": "int"}, {"name": "max_overhead", "mutable": true, "description": "Heap compaction is triggered when the estimated amount\n       of \"wasted\" memory is more than <span class=\"code\" >max_overhead<\/span> percent of the\n       amount of live data.  If <span class=\"code\" >max_overhead<\/span> is set to 0, heap\n       compaction is triggered at the end of each major GC cycle\n       (this setting is intended for testing purposes only).\n       If <span class=\"code\" >max_overhead &gt;= 1000000<\/span>, compaction is never triggered.\n       Default: 500.", "type": "int"}, {"name": "stack_limit", "mutable": true, "description": "The maximum size of the stack (in words).  This is only\n       relevant to the byte-code runtime, as the native code runtime\n       uses the operating system's stack.  Default: 256k.", "type": "int"}, {"name": "allocation_policy", "mutable": true, "description": "The policy used for allocating in the heap.  Possible\n        values are 0 and 1.  0 is the next-fit policy, which is\n        quite fast but can result in fragmentation.  1 is the\n        first-fit policy, which can be slower in some cases but\n        can be better for programs with fragmentation problems.\n        Default: 0.", "type": "int"}]}}}, {"value": {"name": "Gc.stat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|5991"}, "info": {"description": "Return the current values of the memory management counters in a\n   <span class=\"code\" >stat<\/span> record.  This function examines every heap block to get the\n   statistics."}, "type": "unit -> Gc.stat", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.quick_stat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|6195"}, "info": {"description": "Same as <span class=\"code\" >stat<\/span> except that <span class=\"code\" >live_words<\/span>, <span class=\"code\" >live_blocks<\/span>, <span class=\"code\" >free_words<\/span>,\n    <span class=\"code\" >free_blocks<\/span>, <span class=\"code\" >largest_free<\/span>, and <span class=\"code\" >fragments<\/span> are set to 0.  This\n    function is much faster than <span class=\"code\" >stat<\/span> because it does not need to go\n    through the heap."}, "type": "unit -> Gc.stat", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.counters", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|6495"}, "info": {"description": "Return <span class=\"code\" >(minor_words, promoted_words, major_words)<\/span>.  This function\n    is as fast at <span class=\"code\" >quick_stat<\/span>."}, "type": "unit -> float * float * float", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|6674"}, "info": {"description": "Return the current values of the GC parameters in a <span class=\"code\" >control<\/span> record."}, "type": "unit -> Gc.control", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.set", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|6799"}, "info": {"description": "<span class=\"code\" >set r<\/span> changes the GC parameters according to the <span class=\"code\" >control<\/span> record <span class=\"code\" >r<\/span>.\n   The normal usage is: <span class=\"code\" >Gc.set { (Gc.get()) with Gc.verbose = 0x00d }<\/span>"}, "type": "Gc.control -> unit", "params": [{"name": "", "type": "Gc.control"}]}}, {"value": {"name": "Gc.minor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|6999"}, "info": {"description": "Trigger a minor collection."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.major_slice", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|7083"}, "info": {"description": "Do a minor collection and a slice of major collection.  The argument\n    is the size of the slice, 0 to use the automatically-computed\n    slice size.  In all cases, the result is the computed slice size."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Gc.major", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|7356"}, "info": {"description": "Do a minor collection and finish the current major collection cycle."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.full_major", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|7481"}, "info": {"description": "Do a minor collection, finish the current major collection cycle,\n   and perform a complete new cycle.  This will collect all currently\n   unreachable blocks."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.compact", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|7706"}, "info": {"description": "Perform a full major collection and compact the heap.  Note that heap\n   compaction is a lengthy operation."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.allocated_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|7877"}, "info": {"description": "Return the total number of bytes allocated since the program was\n   started.  It is returned as a <span class=\"code\" >float<\/span> to avoid overflow problems\n   with <span class=\"code\" >int<\/span> on 32-bit machines."}, "type": "unit -> float", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Gc.finalise", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|8088"}, "info": {"description": "<span class=\"code\" >finalise f v<\/span> registers <span class=\"code\" >f<\/span> as a finalisation function for <span class=\"code\" >v<\/span>.\n   <span class=\"code\" >v<\/span> must be heap-allocated.  <span class=\"code\" >f<\/span> will be called with <span class=\"code\" >v<\/span> as\n   argument at some point between the first time <span class=\"code\" >v<\/span> becomes unreachable\n   and the time <span class=\"code\" >v<\/span> is collected by the GC.  Several functions can\n   be registered for the same value, or even several instances of the\n   same function.  Each instance will be called once (or never,\n   if the program terminates before <span class=\"code\" >v<\/span> becomes unreachable).<br><\/br>\n   The GC will call the finalisation functions in the order of\n   deallocation.  When several values become unreachable at the\n   same time (i.e. during the same GC cycle), the finalisation\n   functions will be called in the reverse order of the corresponding\n   calls to <span class=\"code\" >finalise<\/span>.  If <span class=\"code\" >finalise<\/span> is called in the same order\n   as the values are allocated, that means each value is finalised\n   before the values it depends upon.  Of course, this becomes\n   false if additional dependencies are introduced by assignments.<br><\/br>\n   Anything reachable from the closure of finalisation functions\n   is considered reachable, so the following code will not work\n   as expected:<ul><li><span class=\"code\" > let v = ... in Gc.finalise (fun x -&gt; ...) v <\/span><\/li><\/ul>\n   Instead you should write:<ul><li><span class=\"code\" > let f = fun x -&gt; ... ;; let v = ... in Gc.finalise f v <\/span><\/li><\/ul>\n   The <span class=\"code\" >f<\/span> function can use all features of O'Caml, including\n   assignments that make the value reachable again.  It can also\n   loop forever (in this case, the other\n   finalisation functions will not be called during the execution of f,\n   unless it calls <span class=\"code\" >finalise_release<\/span>).\n   It can call <span class=\"code\" >finalise<\/span> on <span class=\"code\" >v<\/span> or other values to register other\n   functions or even itself.  It can raise an exception; in this case\n   the exception will interrupt whatever the program was doing when\n   the function was called.<br><\/br>\n   <span class=\"code\" >finalise<\/span> will raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >v<\/span> is not\n   heap-allocated.  Some examples of values that are not\n   heap-allocated are integers, constant constructors, booleans,\n   the empty array, the empty list, the unit value.  The exact list\n   of what is heap-allocated or not is implementation-dependent.\n   Some constant values can be heap-allocated but never deallocated\n   during the lifetime of the program, for example a list of integer\n   constants; this is also implementation-dependent.\n   You should also be aware that compiler optimisations may duplicate\n   some immutable values, for example floating-point numbers when\n   stored into arrays, so they can be finalised and collected while\n   another copy is still in use by the program.<br><\/br>\n   The results of calling <a href=\"{value|String.make}\" ><span class=\"code\" >String.make<\/span><\/a>, <a href=\"{value|String.create}\" ><span class=\"code\" >String.create<\/span><\/a>,\n   <a href=\"{value|Array.make}\" ><span class=\"code\" >Array.make<\/span><\/a>, and <a href=\"{value|Pervasives.ref}\" ><span class=\"code\" >Pervasives.ref<\/span><\/a> are guaranteed to be\n   heap-allocated and non-constant except when the length argument is <span class=\"code\" >0<\/span>."}, "type": "('a -> unit) -> 'a -> unit", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Gc.finalise_release", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|10890"}, "info": {"description": "A finalisation function may call <span class=\"code\" >finalise_release<\/span> to tell the\n    GC that it can launch the next finalisation function without waiting\n    for the current one to return."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"type": {"name": "Gc.alarm", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|11290"}, "info": {"description": "An alarm is a piece of data that calls a user function at the end of\n   each major GC cycle.  The following functions are provided to create\n   and delete alarms."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Gc.create_alarm", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|11290"}, "info": {"description": "<span class=\"code\" >create_alarm f<\/span> will arrange for <span class=\"code\" >f<\/span> to be called at the end of each\n   major GC cycle, starting with the current cycle or the next one.\n   A value of type <span class=\"code\" >alarm<\/span> is returned that you can\n   use to call <span class=\"code\" >delete_alarm<\/span>."}, "type": "(unit -> unit) -> Gc.alarm", "params": [{"name": "", "type": "unit -> unit"}]}}, {"value": {"name": "Gc.delete_alarm", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/gc.mli|11562"}, "info": {"description": "<span class=\"code\" >delete_alarm a<\/span> will stop the calls to the function associated\n   to <span class=\"code\" >a<\/span>.  Calling <span class=\"code\" >delete_alarm a<\/span> again has no effect."}, "type": "Gc.alarm -> unit", "params": [{"name": "", "type": "Gc.alarm"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Digest": {"module": {"name": "Digest", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/digest.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/digest.mli|0"}, "info": {"description": "MD5 message digest.<br><\/br>\n   This module provides functions to compute 128-bit ``digests'' of\n   arbitrary-length strings or files. The digests are of cryptographic\n   quality: it is very hard, given a digest, to forge a string having\n   that digest. The algorithm used is MD5."}, "type": "sig  end", "module_structure": [{"type": {"name": "Digest.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/digest.mli|1238"}, "info": {"description": "The type of digests: 16-character strings."}, "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"value": {"name": "Digest.string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/digest.mli|1296"}, "info": {"description": "Return the digest of the given string."}, "type": "string -> Digest.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Digest.substring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/digest.mli|1368"}, "info": {"description": "<span class=\"code\" >Digest.substring s ofs len<\/span> returns the digest of the substring\n   of <span class=\"code\" >s<\/span> starting at character number <span class=\"code\" >ofs<\/span> and containing <span class=\"code\" >len<\/span>\n   characters."}, "type": "string -> int -> int -> Digest.t", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Digest.file", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/digest.mli|1564"}, "info": {"description": "Return the digest of the file whose name is given."}, "type": "string -> Digest.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Digest.to_hex", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/digest.mli|1646"}, "info": {"description": "Return the printable hexadecimal representation of the given digest."}, "type": "Digest.t -> string", "params": [{"name": "", "type": "Digest.t"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Complex": {"module": {"name": "Complex", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|0"}, "info": {"description": "Complex numbers.<br><\/br>\n    This module provides arithmetic operations on complex numbers.\n    Complex numbers are represented by their real and imaginary parts\n    (cartesian representation).  Each part is represented by a\n    double-precision floating-point number (type <span class=\"code\" >float<\/span>)."}, "type": "sig  end", "module_structure": [{"type": {"name": "Complex.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1245"}, "info": {"description": "The type of complex numbers.  <span class=\"code\" >re<\/span> is the real part and <span class=\"code\" >im<\/span> the\n    imaginary part."}, "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "re", "mutable": false, "type": "float"}, {"name": "im", "mutable": false, "type": "float"}]}}}, {"value": {"name": "Complex.zero", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1363"}, "info": {"description": "The complex number <span class=\"code\" >0<\/span>."}, "type": "Complex.t", "params": []}}, {"value": {"name": "Complex.one", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1407"}, "info": {"description": "The complex number <span class=\"code\" >1<\/span>."}, "type": "Complex.t", "params": []}}, {"value": {"name": "Complex.i", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1450"}, "info": {"description": "The complex number <span class=\"code\" >i<\/span>."}, "type": "Complex.t", "params": []}}, {"value": {"name": "Complex.neg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1491"}, "info": {"description": "Unary negation."}, "type": "Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.conj", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1531"}, "info": {"description": "Conjugate: given the complex <span class=\"code\" >x + i.y<\/span>, returns <span class=\"code\" >x - i.y<\/span>."}, "type": "Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1615"}, "info": {"description": "Addition"}, "type": "Complex.t -> Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}, {"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.sub", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1653"}, "info": {"description": "Subtraction"}, "type": "Complex.t -> Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}, {"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.mul", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1694"}, "info": {"description": "Multiplication"}, "type": "Complex.t -> Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}, {"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.inv", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1738"}, "info": {"description": "Multiplicative inverse (<span class=\"code\" >1\/z<\/span>)."}, "type": "Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.div", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1794"}, "info": {"description": "Division"}, "type": "Complex.t -> Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}, {"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.sqrt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|1832"}, "info": {"description": "Square root.  The result <span class=\"code\" >x + i.y<\/span> is such that <span class=\"code\" >x &gt; 0<\/span> or\n    <span class=\"code\" >x = 0<\/span> and <span class=\"code\" >y &gt;= 0<\/span>.\n    This function has a discontinuity along the negative real axis."}, "type": "Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.norm2", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|2010"}, "info": {"description": "Norm squared: given <span class=\"code\" >x + i.y<\/span>, returns <span class=\"code\" >x^2 + y^2<\/span>."}, "type": "Complex.t -> float", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.norm", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|2092"}, "info": {"description": "Norm: given <span class=\"code\" >x + i.y<\/span>, returns <span class=\"code\" >sqrt(x^2 + y^2)<\/span>."}, "type": "Complex.t -> float", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.arg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|2171"}, "info": {"description": "Argument.  The argument of a complex number is the angle\n    in the complex plane between the positive real axis and a line\n    passing through zero and the number.  This angle ranges from\n    <span class=\"code\" >-pi<\/span> to <span class=\"code\" >pi<\/span>.  This function has a discontinuity along the\n    negative real axis."}, "type": "Complex.t -> float", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.polar", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|2476"}, "info": {"description": "<span class=\"code\" >polar norm arg<\/span> returns the complex having norm <span class=\"code\" >norm<\/span>\n    and argument <span class=\"code\" >arg<\/span>."}, "type": "float -> float -> Complex.t", "params": [{"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Complex.exp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|2595"}, "info": {"description": "Exponentiation.  <span class=\"code\" >exp z<\/span> returns <span class=\"code\" >e<\/span> to the <span class=\"code\" >z<\/span> power."}, "type": "Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.log", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|2674"}, "info": {"description": "Natural logarithm (in base <span class=\"code\" >e<\/span>)."}, "type": "Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}]}}, {"value": {"name": "Complex.pow", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/complex.mli|2731"}, "info": {"description": "Power function.  <span class=\"code\" >pow z1 z2<\/span> returns <span class=\"code\" >z1<\/span> to the <span class=\"code\" >z2<\/span> power."}, "type": "Complex.t -> Complex.t -> Complex.t", "params": [{"name": "", "type": "Complex.t"}, {"name": "", "type": "Complex.t"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Char": {"module": {"name": "Char", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli|0"}, "info": {"description": "Character operations."}, "type": "sig  end", "module_structure": [{"value": {"name": "Char.code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli|976"}, "info": {"description": "Return the ASCII code of the argument."}, "type": "char -> int", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Char.chr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli|1065"}, "info": {"description": "Return the character with the given ASCII code.\n   Raise <span class=\"code\" >Invalid_argument \"Char.chr\"<\/span> if the argument is\n   outside the range 0--255."}, "type": "int -> char", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Char.escaped", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli|1230"}, "info": {"description": "Return a string representing the given character,\n   with special characters escaped following the lexical conventions\n   of Objective Caml."}, "type": "char -> string", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Char.lowercase", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli|1408"}, "info": {"description": "Convert the given character to its equivalent lowercase character."}, "type": "char -> char", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Char.uppercase", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli|1512"}, "info": {"description": "Convert the given character to its equivalent uppercase character."}, "type": "char -> char", "params": [{"name": "", "type": "char"}]}}, {"type": {"name": "Char.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli|1625"}, "info": {"description": "An alias for the type of characters."}, "params": [], "kind": {"type": "abstract"}, "manifest": "char"}}, {"value": {"name": "Char.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/char.mli|1675"}, "info": {"description": "The comparison function for characters, with the same specification as\n    <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a>.  Along with the type <span class=\"code\" >t<\/span>, this function <span class=\"code\" >compare<\/span>\n    allows the module <span class=\"code\" >Char<\/span> to be passed as argument to the functors\n    <a href=\"{module|Set.Make}\" ><span class=\"code\" >Set.Make<\/span><\/a> and <a href=\"{module|Map.Make}\" ><span class=\"code\" >Map.Make<\/span><\/a>."}, "type": "Char.t -> Char.t -> int", "params": [{"name": "", "type": "Char.t"}, {"name": "", "type": "Char.t"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "CamlinternalLazy": {"module": {"name": "CamlinternalLazy", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalLazy.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalLazy.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"exception": {"name": "CamlinternalLazy.Undefined", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalLazy.mli|996"}, "info": ""}}, {"value": {"name": "CamlinternalLazy.force_lazy_block", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalLazy.mli|1019"}, "info": "", "type": "'a lazy_t -> 'a", "params": [{"name": "", "type": "'a lazy_t"}]}}, {"value": {"name": "CamlinternalLazy.force_val_lazy_block", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalLazy.mli|1062"}, "info": "", "type": "'a lazy_t -> 'a", "params": [{"name": "", "type": "'a lazy_t"}]}}, {"value": {"name": "CamlinternalLazy.force", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalLazy.mli|1109"}, "info": "", "type": "'a lazy_t -> 'a", "params": [{"name": "", "type": "'a lazy_t"}]}}, {"value": {"name": "CamlinternalLazy.force_val", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalLazy.mli|1140"}, "info": "", "type": "'a lazy_t -> 'a", "params": [{"name": "", "type": "'a lazy_t"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Callback": {"module": {"name": "Callback", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/callback.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/callback.mli|0"}, "info": {"description": "Registering Caml values with the C runtime.<br><\/br>\n   This module allows Caml values to be registered with the C runtime\n   under a symbolic name, so that C code can later call back registered\n   Caml functions, or raise registered Caml exceptions."}, "type": "sig  end", "module_structure": [{"value": {"name": "Callback.register", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/callback.mli|1201"}, "info": {"description": "<span class=\"code\" >Callback.register n v<\/span> registers the value <span class=\"code\" >v<\/span> under\n   the name <span class=\"code\" >n<\/span>. C code can later retrieve a handle to <span class=\"code\" >v<\/span>\n   by calling <span class=\"code\" >caml_named_value(n)<\/span>."}, "type": "string -> 'a -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Callback.register_exception", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/callback.mli|1395"}, "info": {"description": "<span class=\"code\" >Callback.register_exception n exn<\/span> registers the\n   exception contained in the exception value <span class=\"code\" >exn<\/span>\n   under the name <span class=\"code\" >n<\/span>. C code can later retrieve a handle to\n   the exception by calling <span class=\"code\" >caml_named_value(n)<\/span>. The exception\n   value thus obtained is suitable for passign as first argument\n   to <span class=\"code\" >raise_constant<\/span> or <span class=\"code\" >raise_with_arg<\/span>."}, "type": "string -> exn -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "exn"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Buffer": {"module": {"name": "Buffer", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|0"}, "info": {"description": "Extensible string buffers.<br><\/br>\n   This module implements string buffers that automatically expand\n   as necessary.  It provides accumulative concatenation of strings\n   in quasi-linear time (instead of quadratic time when strings are\n   concatenated pairwise)."}, "type": "sig  end", "module_structure": [{"type": {"name": "Buffer.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|1260"}, "info": {"description": "The abstract type of buffers."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Buffer.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|1260"}, "info": {"description": "<span class=\"code\" >create n<\/span> returns a fresh buffer, initially empty.\n   The <span class=\"code\" >n<\/span> parameter is the initial size of the internal string\n   that holds the buffer contents. That string is automatically\n   reallocated when more than <span class=\"code\" >n<\/span> characters are stored in the buffer,\n   but shrinks back to <span class=\"code\" >n<\/span> characters when <span class=\"code\" >reset<\/span> is called.\n   For best performance, <span class=\"code\" >n<\/span> should be of the same order of magnitude\n   as the number of characters that are expected to be stored in\n   the buffer (for instance, 80 for a buffer that holds one output\n   line).  Nothing bad will happen if the buffer grows beyond that\n   limit, however. In doubt, take <span class=\"code\" >n = 16<\/span> for instance.\n   If <span class=\"code\" >n<\/span> is not between 1 and <a href=\"{value|Sys.max_string_length}\" ><span class=\"code\" >Sys.max_string_length<\/span><\/a>, it will\n   be clipped to that interval."}, "type": "int -> Buffer.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Buffer.contents", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|2026"}, "info": {"description": "Return a copy of the current contents of the buffer.\n   The buffer itself is unchanged."}, "type": "Buffer.t -> string", "params": [{"name": "", "type": "Buffer.t"}]}}, {"value": {"name": "Buffer.sub", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|2149"}, "info": {"description": "<span class=\"code\" >Buffer.sub b off len<\/span> returns (a copy of) the substring of the\ncurrent contents of the buffer <span class=\"code\" >b<\/span> starting at offset <span class=\"code\" >off<\/span> of length\n<span class=\"code\" >len<\/span> bytes. May raise <span class=\"code\" >Invalid_argument<\/span> if out of bounds request. The\nbuffer itself is unaffected."}, "type": "Buffer.t -> int -> int -> string", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Buffer.blit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|2428"}, "info": {"description": "<span class=\"code\" >Buffer.blit src srcoff dst dstoff len<\/span> copies <span class=\"code\" >len<\/span> characters from\n   the current contents of the buffer <span class=\"code\" >src<\/span>, starting at offset <span class=\"code\" >srcoff<\/span>\n   to string <span class=\"code\" >dst<\/span>, starting at character <span class=\"code\" >dstoff<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >srcoff<\/span> and <span class=\"code\" >len<\/span> do not designate a valid\n   substring of <span class=\"code\" >src<\/span>, or if <span class=\"code\" >dstoff<\/span> and <span class=\"code\" >len<\/span> do not designate a valid\n   substring of <span class=\"code\" >dst<\/span>.", "since": "3.11.2"}, "type": "Buffer.t -> int -> string -> int -> int -> unit", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "int"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Buffer.nth", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|2871"}, "info": {"description": "get the n-th character of the buffer. Raise <span class=\"code\" >Invalid_argument<\/span> if\nindex out of bounds"}, "type": "Buffer.t -> int -> char", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Buffer.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|2992"}, "info": {"description": "Return the number of characters currently contained in the buffer."}, "type": "Buffer.t -> int", "params": [{"name": "", "type": "Buffer.t"}]}}, {"value": {"name": "Buffer.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|3089"}, "info": {"description": "Empty the buffer."}, "type": "Buffer.t -> unit", "params": [{"name": "", "type": "Buffer.t"}]}}, {"value": {"name": "Buffer.reset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|3137"}, "info": {"description": "Empty the buffer and deallocate the internal string holding the\n   buffer contents, replacing it with the initial internal string\n   of length <span class=\"code\" >n<\/span> that was allocated by <a href=\"{value|Buffer.create}\" ><span class=\"code\" >Buffer.create<\/span><\/a> <span class=\"code\" >n<\/span>.\n   For long-lived buffers that may have grown a lot, <span class=\"code\" >reset<\/span> allows\n   faster reclamation of the space used by the buffer."}, "type": "Buffer.t -> unit", "params": [{"name": "", "type": "Buffer.t"}]}}, {"value": {"name": "Buffer.add_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|3481"}, "info": {"description": "<span class=\"code\" >add_char b c<\/span> appends the character <span class=\"code\" >c<\/span> at the end of the buffer <span class=\"code\" >b<\/span>."}, "type": "Buffer.t -> char -> unit", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Buffer.add_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|3593"}, "info": {"description": "<span class=\"code\" >add_string b s<\/span> appends the string <span class=\"code\" >s<\/span> at the end of the buffer <span class=\"code\" >b<\/span>."}, "type": "Buffer.t -> string -> unit", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Buffer.add_substring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|3708"}, "info": {"description": "<span class=\"code\" >add_substring b s ofs len<\/span> takes <span class=\"code\" >len<\/span> characters from offset\n   <span class=\"code\" >ofs<\/span> in string <span class=\"code\" >s<\/span> and appends them at the end of the buffer <span class=\"code\" >b<\/span>."}, "type": "Buffer.t -> string -> int -> int -> unit", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Buffer.add_substitute", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|3903"}, "info": {"description": "<span class=\"code\" >add_substitute b f s<\/span> appends the string pattern <span class=\"code\" >s<\/span> at the end\n   of the buffer <span class=\"code\" >b<\/span> with substitution.\n   The substitution process looks for variables into\n   the pattern and substitutes each variable name by its value, as\n   obtained by applying the mapping <span class=\"code\" >f<\/span> to the variable name. Inside the\n   string pattern, a variable name immediately follows a non-escaped\n   <span class=\"code\" >$<\/span> character and is one of the following:<ul><li>a non empty sequence of alphanumeric or <span class=\"code\" >_<\/span> characters,<\/li><li>an arbitrary sequence of characters enclosed by a pair of\n   matching parentheses or curly brackets.\n   An escaped <span class=\"code\" >$<\/span> character is a <span class=\"code\" >$<\/span> that immediately follows a backslash\n   character; it then stands for a plain <span class=\"code\" >$<\/span>.\n   Raise <span class=\"code\" >Not_found<\/span> if the closing character of a parenthesized variable\n   cannot be found.<\/li><\/ul>"}, "type": "Buffer.t -> (string -> string) -> string -> unit", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "string -> string"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Buffer.add_buffer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/buffer.mli|4768"}, "info": {"description": "<span class=\"code\" >add_buffer b1 b2<\/span> appends the current contents of buffer <span class=\"code\" >b2<\/span>\n   at the end of buffer <span class=\"code\" >b1<\/span>.  <span class=\"code\" >b2<\/span> is not modified."}, "type": "Buffer.t -> Buffer.t -> unit", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "Buffer.t"}]}}], "dependencies": {"uses": [], "used_by": ["Format", "Printf", "Utf8", "Utf16", "Cow"]}}}, "Array": {"module": {"name": "Array", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|0"}, "info": {"description": "Array operations."}, "type": "sig  end", "module_structure": [{"value": {"name": "Array.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|973"}, "info": {"description": "Return the length (number of elements) of the given array."}, "type": "'a array -> int", "params": [{"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|1092"}, "info": {"description": "<span class=\"code\" >Array.get a n<\/span> returns the element number <span class=\"code\" >n<\/span> of array <span class=\"code\" >a<\/span>.\n   The first element has number 0.\n   The last element has number <span class=\"code\" >Array.length a - 1<\/span>.\n   You can also write <span class=\"code\" >a.(n)<\/span> instead of <span class=\"code\" >Array.get a n<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument \"index out of bounds\"<\/span>\n   if <span class=\"code\" >n<\/span> is outside the range 0 to <span class=\"code\" >(Array.length a - 1)<\/span>."}, "type": "'a array -> int -> 'a", "params": [{"name": "", "type": "'a array"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Array.set", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|1475"}, "info": {"description": "<span class=\"code\" >Array.set a n x<\/span> modifies array <span class=\"code\" >a<\/span> in place, replacing\n   element number <span class=\"code\" >n<\/span> with <span class=\"code\" >x<\/span>.\n   You can also write <span class=\"code\" >a.(n) &lt;- x<\/span> instead of <span class=\"code\" >Array.set a n x<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument \"index out of bounds\"<\/span>\n   if <span class=\"code\" >n<\/span> is outside the range 0 to <span class=\"code\" >Array.length a - 1<\/span>."}, "type": "'a array -> int -> 'a -> unit", "params": [{"name": "", "type": "'a array"}, {"name": "", "type": "int"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Array.make", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|1811"}, "info": {"description": "<span class=\"code\" >Array.make n x<\/span> returns a fresh array of length <span class=\"code\" >n<\/span>,\n   initialized with <span class=\"code\" >x<\/span>.\n   All the elements of this new array are initially\n   physically equal to <span class=\"code\" >x<\/span> (in the sense of the <span class=\"code\" >==<\/span> predicate).\n   Consequently, if <span class=\"code\" >x<\/span> is mutable, it is shared among all elements\n   of the array, and modifying <span class=\"code\" >x<\/span> through one of the array entries\n   will modify all other entries at the same time.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >n &lt; 0<\/span> or <span class=\"code\" >n &gt; Sys.max_array_length<\/span>.\n   If the value of <span class=\"code\" >x<\/span> is a floating-point number, then the maximum\n   size is only <span class=\"code\" >Sys.max_array_length \/ 2<\/span>."}, "type": "int -> 'a -> 'a array", "params": [{"name": "", "type": "int"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Array.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|2441"}, "info": {"deprecated": "<span class=\"code\" >Array.create<\/span> is an alias for <a href=\"{value|Array.make}\" ><span class=\"code\" >Array.make<\/span><\/a>."}, "type": "int -> 'a -> 'a array", "params": [{"name": "", "type": "int"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Array.init", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|2566"}, "info": {"description": "<span class=\"code\" >Array.init n f<\/span> returns a fresh array of length <span class=\"code\" >n<\/span>,\n   with element number <span class=\"code\" >i<\/span> initialized to the result of <span class=\"code\" >f i<\/span>.\n   In other terms, <span class=\"code\" >Array.init n f<\/span> tabulates the results of <span class=\"code\" >f<\/span>\n   applied to the integers <span class=\"code\" >0<\/span> to <span class=\"code\" >n-1<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >n &lt; 0<\/span> or <span class=\"code\" >n &gt; Sys.max_array_length<\/span>.\n   If the return type of <span class=\"code\" >f<\/span> is <span class=\"code\" >float<\/span>, then the maximum\n   size is only <span class=\"code\" >Sys.max_array_length \/ 2<\/span>."}, "type": "int -> (int -> 'a) -> 'a array", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int -> 'a"}]}}, {"value": {"name": "Array.make_matrix", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|3011"}, "info": {"description": "<span class=\"code\" >Array.make_matrix dimx dimy e<\/span> returns a two-dimensional array\n   (an array of arrays) with first dimension <span class=\"code\" >dimx<\/span> and\n   second dimension <span class=\"code\" >dimy<\/span>. All the elements of this new matrix\n   are initially physically equal to <span class=\"code\" >e<\/span>.\n   The element (<span class=\"code\" >x,y<\/span>) of a matrix <span class=\"code\" >m<\/span> is accessed\n   with the notation <span class=\"code\" >m.(x).(y)<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument<\/span> if <span class=\"code\" >dimx<\/span> or <span class=\"code\" >dimy<\/span> is negative or\n   greater than <span class=\"code\" >Sys.max_array_length<\/span>.\n   If the value of <span class=\"code\" >e<\/span> is a floating-point number, then the maximum\n   size is only <span class=\"code\" >Sys.max_array_length \/ 2<\/span>."}, "type": "int -> int -> 'a -> 'a array array", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Array.create_matrix", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|3599"}, "info": {"deprecated": "<span class=\"code\" >Array.create_matrix<\/span> is an alias for <a href=\"{value|Array.make_matrix}\" ><span class=\"code\" >Array.make_matrix<\/span><\/a>."}, "type": "int -> int -> 'a -> 'a array array", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Array.append", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|3734"}, "info": {"description": "<span class=\"code\" >Array.append v1 v2<\/span> returns a fresh array containing the\n   concatenation of the arrays <span class=\"code\" >v1<\/span> and <span class=\"code\" >v2<\/span>."}, "type": "'a array -> 'a array -> 'a array", "params": [{"name": "", "type": "'a array"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.concat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|3892"}, "info": {"description": "Same as <span class=\"code\" >Array.append<\/span>, but concatenates a list of arrays."}, "type": "'a array list -> 'a array", "params": [{"name": "", "type": "'a array list"}]}}, {"value": {"name": "Array.sub", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|3998"}, "info": {"description": "<span class=\"code\" >Array.sub a start len<\/span> returns a fresh array of length <span class=\"code\" >len<\/span>,\n   containing the elements number <span class=\"code\" >start<\/span> to <span class=\"code\" >start + len - 1<\/span>\n   of array <span class=\"code\" >a<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument \"Array.sub\"<\/span> if <span class=\"code\" >start<\/span> and <span class=\"code\" >len<\/span> do not\n   designate a valid subarray of <span class=\"code\" >a<\/span>; that is, if\n   <span class=\"code\" >start &lt; 0<\/span>, or <span class=\"code\" >len &lt; 0<\/span>, or <span class=\"code\" >start + len &gt; Array.length a<\/span>."}, "type": "'a array -> int -> int -> 'a array", "params": [{"name": "", "type": "'a array"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Array.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|4378"}, "info": {"description": "<span class=\"code\" >Array.copy a<\/span> returns a copy of <span class=\"code\" >a<\/span>, that is, a fresh array\n   containing the same elements as <span class=\"code\" >a<\/span>."}, "type": "'a array -> 'a array", "params": [{"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.fill", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|4519"}, "info": {"description": "<span class=\"code\" >Array.fill a ofs len x<\/span> modifies the array <span class=\"code\" >a<\/span> in place,\n   storing <span class=\"code\" >x<\/span> in elements number <span class=\"code\" >ofs<\/span> to <span class=\"code\" >ofs + len - 1<\/span>.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument \"Array.fill\"<\/span> if <span class=\"code\" >ofs<\/span> and <span class=\"code\" >len<\/span> do not\n   designate a valid subarray of <span class=\"code\" >a<\/span>."}, "type": "'a array -> int -> int -> 'a -> unit", "params": [{"name": "", "type": "'a array"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Array.blit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|4799"}, "info": {"description": "<span class=\"code\" >Array.blit v1 o1 v2 o2 len<\/span> copies <span class=\"code\" >len<\/span> elements\n   from array <span class=\"code\" >v1<\/span>, starting at element number <span class=\"code\" >o1<\/span>, to array <span class=\"code\" >v2<\/span>,\n   starting at element number <span class=\"code\" >o2<\/span>. It works correctly even if\n   <span class=\"code\" >v1<\/span> and <span class=\"code\" >v2<\/span> are the same array, and the source and\n   destination chunks overlap.<br><\/br>\n   Raise <span class=\"code\" >Invalid_argument \"Array.blit\"<\/span> if <span class=\"code\" >o1<\/span> and <span class=\"code\" >len<\/span> do not\n   designate a valid subarray of <span class=\"code\" >v1<\/span>, or if <span class=\"code\" >o2<\/span> and <span class=\"code\" >len<\/span> do not\n   designate a valid subarray of <span class=\"code\" >v2<\/span>."}, "type": "'a array -> int -> 'a array -> int -> int -> unit", "params": [{"name": "", "type": "'a array"}, {"name": "", "type": "int"}, {"name": "", "type": "'a array"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Array.to_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|5310"}, "info": {"description": "<span class=\"code\" >Array.to_list a<\/span> returns the list of all the elements of <span class=\"code\" >a<\/span>."}, "type": "'a array -> 'a list", "params": [{"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.of_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|5415"}, "info": {"description": "<span class=\"code\" >Array.of_list l<\/span> returns a fresh array containing the elements\n   of <span class=\"code\" >l<\/span>."}, "type": "'a list -> 'a array", "params": [{"name": "", "type": "'a list"}]}}, {"value": {"name": "Array.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|5532"}, "info": {"description": "<span class=\"code\" >Array.iter f a<\/span> applies function <span class=\"code\" >f<\/span> in turn to all\n   the elements of <span class=\"code\" >a<\/span>.  It is equivalent to\n   <span class=\"code\" >f a.(0); f a.(1); ...; f a.(Array.length a - 1); ()<\/span>."}, "type": "('a -> unit) -> 'a array -> unit", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|5740"}, "info": {"description": "<span class=\"code\" >Array.map f a<\/span> applies function <span class=\"code\" >f<\/span> to all the elements of <span class=\"code\" >a<\/span>,\n   and builds an array with the results returned by <span class=\"code\" >f<\/span>:\n   <span class=\"code\" >[| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]<\/span>."}, "type": "('a -> 'b) -> 'a array -> 'b array", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.iteri", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|5975"}, "info": {"description": "Same as <a href=\"{value|Array.iter}\" ><span class=\"code\" >Array.iter<\/span><\/a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument."}, "type": "(int -> 'a -> unit) -> 'a array -> unit", "params": [{"name": "", "type": "int -> 'a -> unit"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.mapi", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|6182"}, "info": {"description": "Same as <a href=\"{value|Array.map}\" ><span class=\"code\" >Array.map<\/span><\/a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument."}, "type": "(int -> 'a -> 'b) -> 'a array -> 'b array", "params": [{"name": "", "type": "int -> 'a -> 'b"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.fold_left", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|6389"}, "info": {"description": "<span class=\"code\" >Array.fold_left f x a<\/span> computes\n   <span class=\"code\" >f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)<\/span>,\n   where <span class=\"code\" >n<\/span> is the length of the array <span class=\"code\" >a<\/span>."}, "type": "('a -> 'b -> 'a) -> 'a -> 'b array -> 'a", "params": [{"name": "", "type": "'a -> 'b -> 'a"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.fold_right", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|6580"}, "info": {"description": "<span class=\"code\" >Array.fold_right f a x<\/span> computes\n   <span class=\"code\" >f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))<\/span>,\n   where <span class=\"code\" >n<\/span> is the length of the array <span class=\"code\" >a<\/span>."}, "type": "('a -> 'b -> 'b) -> 'a array -> 'b -> 'b", "params": [{"name": "", "type": "'a -> 'b -> 'b"}, {"name": "", "type": "'a array"}, {"name": "", "type": "'a"}]}}, {"comment": "<h6>Sorting<\/h6>"}, {"value": {"name": "Array.sort", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|6796"}, "info": {"description": "Sort an array in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see below for a\n   complete specification).  For example, <a href=\"{value|Pervasives.compare}\" ><span class=\"code\" >Pervasives.compare<\/span><\/a> is\n   a suitable comparison function, provided there are no floating-point\n   NaN values in the data.  After calling <span class=\"code\" >Array.sort<\/span>, the\n   array is sorted in place in increasing order.\n   <span class=\"code\" >Array.sort<\/span> is guaranteed to run in constant heap space\n   and (at most) logarithmic stack space.<br><\/br>\n   The current implementation uses Heap Sort.  It runs in constant\n   stack space.<br><\/br>\n   Specification of the comparison function:\n   Let <span class=\"code\" >a<\/span> be the array and <span class=\"code\" >cmp<\/span> the comparison function.  The following\n   must be true for all x, y, z in a :<ul><li>  <span class=\"code\" >cmp x y<\/span> &gt; 0 if and only if <span class=\"code\" >cmp y x<\/span> &lt; 0<\/li><li>  if <span class=\"code\" >cmp x y<\/span> &gt;= 0 and <span class=\"code\" >cmp y z<\/span> &gt;= 0 then <span class=\"code\" >cmp x z<\/span> &gt;= 0<\/li><\/ul>\n   When <span class=\"code\" >Array.sort<\/span> returns, <span class=\"code\" >a<\/span> contains the same elements as before,\n   reordered in such a way that for all i and j valid indices of <span class=\"code\" >a<\/span> :<ul><li>  <span class=\"code\" >cmp a.(i) a.(j)<\/span> &gt;= 0 if and only if i &gt;= j<\/li><\/ul>"}, "type": "('a -> 'a -> int) -> 'a array -> unit", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.stable_sort", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|8008"}, "info": {"description": "Same as <a href=\"{value|Array.sort}\" ><span class=\"code\" >Array.sort<\/span><\/a>, but the sorting algorithm is stable (i.e.\n   elements that compare equal are kept in their original order) and\n   not guaranteed to run in constant heap space.<br><\/br>\n   The current implementation uses Merge Sort. It uses <span class=\"code\" >n\/2<\/span>\n   words of heap space, where <span class=\"code\" >n<\/span> is the length of the array.\n   It is usually faster than the current implementation of <a href=\"{value|Array.sort}\" ><span class=\"code\" >Array.sort<\/span><\/a>."}, "type": "('a -> 'a -> int) -> 'a array -> unit", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a array"}]}}, {"value": {"name": "Array.fast_sort", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/array.mli|8453"}, "info": {"description": "Same as <a href=\"{value|Array.sort}\" ><span class=\"code\" >Array.sort<\/span><\/a> or <a href=\"{value|Array.stable_sort}\" ><span class=\"code\" >Array.stable_sort<\/span><\/a>, whichever is faster\n    on typical input."}, "type": "('a -> 'a -> int) -> 'a array -> unit", "params": [{"name": "", "type": "'a -> 'a -> int"}, {"name": "", "type": "'a array"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Weak": {"module": {"name": "Weak", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|0"}, "info": {"description": "Arrays of weak pointers and hash tables of weak pointers."}, "type": "sig  end", "module_structure": [{"comment": "<h6>Low-level functions<\/h6>"}, {"type": {"name": "Weak.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|1657"}, "info": {"description": "The type of arrays of weak pointers (weak arrays).  A weak\n   pointer is a value that the garbage collector may erase whenever\n   the value is not used any more (through normal pointers) by the\n   program.  Note that finalisation functions are run after the\n   weak pointers are erased.<br><\/br>\n   A weak pointer is said to be full if it points to a value,\n   empty if the value was erased by the GC.<br><\/br>\n   Notes:<ul><li>Integers are not allocated and cannot be stored in weak arrays.<\/li><li>Weak arrays cannot be marshaled using <a href=\"{value|Pervasives.output_value}\" ><span class=\"code\" >Pervasives.output_value<\/span><\/a>\n     nor the functions of the <a href=\"{module|Marshal}\" ><span class=\"code\" >Marshal<\/span><\/a> module.<\/li><\/ul>"}, "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Weak.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|1657"}, "info": {"description": "<span class=\"code\" >Weak.create n<\/span> returns a new weak array of length <span class=\"code\" >n<\/span>.\n   All the pointers are initially empty.  Raise <span class=\"code\" >Invalid_argument<\/span>\n   if <span class=\"code\" >n<\/span> is negative or greater than <a href=\"{value|Sys.max_array_length}\" ><span class=\"code\" >Sys.max_array_length<\/span><\/a><span class=\"code\" >-1<\/span>."}, "type": "int -> 'a Weak.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Weak.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|1879"}, "info": {"description": "<span class=\"code\" >Weak.length ar<\/span> returns the length (number of elements) of\n   <span class=\"code\" >ar<\/span>."}, "type": "'a Weak.t -> int", "params": [{"name": "", "type": "'a Weak.t"}]}}, {"value": {"name": "Weak.set", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|1980"}, "info": {"description": "<span class=\"code\" >Weak.set ar n (Some el)<\/span> sets the <span class=\"code\" >n<\/span>th cell of <span class=\"code\" >ar<\/span> to be a\n   (full) pointer to <span class=\"code\" >el<\/span>; <span class=\"code\" >Weak.set ar n None<\/span> sets the <span class=\"code\" >n<\/span>th\n   cell of <span class=\"code\" >ar<\/span> to empty.\n   Raise <span class=\"code\" >Invalid_argument \"Weak.set\"<\/span> if <span class=\"code\" >n<\/span> is not in the range\n   0 to <a href=\"{value|Weak.length}\" ><span class=\"code\" >Weak.length<\/span><\/a><span class=\"code\" > a - 1<\/span>."}, "type": "'a Weak.t -> int -> 'a option -> unit", "params": [{"name": "", "type": "'a Weak.t"}, {"name": "", "type": "int"}, {"name": "", "type": "'a option"}]}}, {"value": {"name": "Weak.get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|2279"}, "info": {"description": "<span class=\"code\" >Weak.get ar n<\/span> returns None if the <span class=\"code\" >n<\/span>th cell of <span class=\"code\" >ar<\/span> is\n   empty, <span class=\"code\" >Some x<\/span> (where <span class=\"code\" >x<\/span> is the value) if it is full.\n   Raise <span class=\"code\" >Invalid_argument \"Weak.get\"<\/span> if <span class=\"code\" >n<\/span> is not in the range\n   0 to <a href=\"{value|Weak.length}\" ><span class=\"code\" >Weak.length<\/span><\/a><span class=\"code\" > a - 1<\/span>."}, "type": "'a Weak.t -> int -> 'a option", "params": [{"name": "", "type": "'a Weak.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Weak.get_copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|2536"}, "info": {"description": "<span class=\"code\" >Weak.get_copy ar n<\/span> returns None if the <span class=\"code\" >n<\/span>th cell of <span class=\"code\" >ar<\/span> is\n   empty, <span class=\"code\" >Some x<\/span> (where <span class=\"code\" >x<\/span> is a (shallow) copy of the value) if\n   it is full.\n   In addition to pitfalls with mutable values, the interesting\n   difference with <span class=\"code\" >get<\/span> is that <span class=\"code\" >get_copy<\/span> does not prevent\n   the incremental GC from erasing the value in its current cycle\n   (<span class=\"code\" >get<\/span> may delay the erasure to the next GC cycle).\n   Raise <span class=\"code\" >Invalid_argument \"Weak.get\"<\/span> if <span class=\"code\" >n<\/span> is not in the range\n   0 to <a href=\"{value|Weak.length}\" ><span class=\"code\" >Weak.length<\/span><\/a><span class=\"code\" > a - 1<\/span>."}, "type": "'a Weak.t -> int -> 'a option", "params": [{"name": "", "type": "'a Weak.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Weak.check", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|3073"}, "info": {"description": "<span class=\"code\" >Weak.check ar n<\/span> returns <span class=\"code\" >true<\/span> if the <span class=\"code\" >n<\/span>th cell of <span class=\"code\" >ar<\/span> is\n   full, <span class=\"code\" >false<\/span> if it is empty.  Note that even if <span class=\"code\" >Weak.check ar n<\/span>\n   returns <span class=\"code\" >true<\/span>, a subsequent <a href=\"{value|Weak.get}\" ><span class=\"code\" >Weak.get<\/span><\/a><span class=\"code\" > ar n<\/span> can return <span class=\"code\" >None<\/span>."}, "type": "'a Weak.t -> int -> bool", "params": [{"name": "", "type": "'a Weak.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Weak.fill", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|3314"}, "info": {"description": "<span class=\"code\" >Weak.fill ar ofs len el<\/span> sets to <span class=\"code\" >el<\/span> all pointers of <span class=\"code\" >ar<\/span> from\n   <span class=\"code\" >ofs<\/span> to <span class=\"code\" >ofs + len - 1<\/span>.  Raise <span class=\"code\" >Invalid_argument \"Weak.fill\"<\/span>\n   if <span class=\"code\" >ofs<\/span> and <span class=\"code\" >len<\/span> do not designate a valid subarray of <span class=\"code\" >a<\/span>."}, "type": "'a Weak.t -> int -> int -> 'a option -> unit", "params": [{"name": "", "type": "'a Weak.t"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "'a option"}]}}, {"value": {"name": "Weak.blit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|3568"}, "info": {"description": "<span class=\"code\" >Weak.blit ar1 off1 ar2 off2 len<\/span> copies <span class=\"code\" >len<\/span> weak pointers\n   from <span class=\"code\" >ar1<\/span> (starting at <span class=\"code\" >off1<\/span>) to <span class=\"code\" >ar2<\/span> (starting at <span class=\"code\" >off2<\/span>).\n   It works correctly even if <span class=\"code\" >ar1<\/span> and <span class=\"code\" >ar2<\/span> are the same.\n   Raise <span class=\"code\" >Invalid_argument \"Weak.blit\"<\/span> if <span class=\"code\" >off1<\/span> and <span class=\"code\" >len<\/span> do\n   not designate a valid subarray of <span class=\"code\" >ar1<\/span>, or if <span class=\"code\" >off2<\/span> and <span class=\"code\" >len<\/span>\n   do not designate a valid subarray of <span class=\"code\" >ar2<\/span>."}, "type": "'a Weak.t -> int -> 'a Weak.t -> int -> int -> unit", "params": [{"name": "", "type": "'a Weak.t"}, {"name": "", "type": "int"}, {"name": "", "type": "'a Weak.t"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"comment": "<h6>Weak hash tables<\/h6>"}, {"comment": "A weak hash table is a hashed set of values.  Each value may\n    magically disappear from the set when it is not used by the\n    rest of the program any more.  This is normally used to share\n    data structures without inducing memory leaks.\n    Weak hash tables are defined on values from a <a href=\"{module_type|Hashtbl.HashedType}\" ><span class=\"code\" >Hashtbl.HashedType<\/span><\/a>\n    module; the <span class=\"code\" >equal<\/span> relation and <span class=\"code\" >hash<\/span> function are taken from that\n    module.  We will say that <span class=\"code\" >v<\/span> is an instance of <span class=\"code\" >x<\/span> if <span class=\"code\" >equal x v<\/span>\n    is <span class=\"code\" >true<\/span>.<br><\/br>\n    The <span class=\"code\" >equal<\/span> relation must be able to work on a shallow copy of\n    the values and give the same result as with the values themselves."}, {"module_type": {"name": "Weak.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|4646"}, "info": {"description": "The output signature of the functor <a href=\"{module|Weak.Make}\" ><span class=\"code\" >Weak.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Weak.S.data", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|4737"}, "info": {"description": "The type of the elements stored in the table."}, "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Weak.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|4961"}, "info": {"description": "The type of tables that contain elements of type <span class=\"code\" >data<\/span>.\n        Note that weak hash tables cannot be marshaled using\n        <a href=\"{value|Pervasives.output_value}\" ><span class=\"code\" >Pervasives.output_value<\/span><\/a> or the functions of the <a href=\"{module|Marshal}\" ><span class=\"code\" >Marshal<\/span><\/a>\n        module."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Weak.S.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|4961"}, "info": {"description": "<span class=\"code\" >create n<\/span> creates a new empty weak hash table, of initial\n        size <span class=\"code\" >n<\/span>.  The table will grow as needed."}, "type": "int -> Weak.S.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Weak.S.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5105"}, "info": {"description": "Remove all elements from the table."}, "type": "Weak.S.t -> unit", "params": [{"name": "", "type": "Weak.S.t"}]}}, {"value": {"name": "Weak.S.merge", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5176"}, "info": {"description": "<span class=\"code\" >merge t x<\/span> returns an instance of <span class=\"code\" >x<\/span> found in <span class=\"code\" >t<\/span> if any,\n        or else adds <span class=\"code\" >x<\/span> to <span class=\"code\" >t<\/span> and return <span class=\"code\" >x<\/span>."}, "type": "Weak.S.t -> Weak.S.data -> Weak.S.data", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5327"}, "info": {"description": "<span class=\"code\" >add t x<\/span> adds <span class=\"code\" >x<\/span> to <span class=\"code\" >t<\/span>.  If there is already an instance\n        of <span class=\"code\" >x<\/span> in <span class=\"code\" >t<\/span>, it is unspecified which one will be\n        returned by subsequent calls to <span class=\"code\" >find<\/span> and <span class=\"code\" >merge<\/span>."}, "type": "Weak.S.t -> Weak.S.data -> unit", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5547"}, "info": {"description": "<span class=\"code\" >remove t x<\/span> removes from <span class=\"code\" >t<\/span> one instance of <span class=\"code\" >x<\/span>.  Does\n        nothing if there is no instance of <span class=\"code\" >x<\/span> in <span class=\"code\" >t<\/span>."}, "type": "Weak.S.t -> Weak.S.data -> unit", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5703"}, "info": {"description": "<span class=\"code\" >find t x<\/span> returns an instance of <span class=\"code\" >x<\/span> found in <span class=\"code\" >t<\/span>.\n        Raise <span class=\"code\" >Not_found<\/span> if there is no such element."}, "type": "Weak.S.t -> Weak.S.data -> Weak.S.data", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.find_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5852"}, "info": {"description": "<span class=\"code\" >find_all t x<\/span> returns a list of all the instances of <span class=\"code\" >x<\/span>\n        found in <span class=\"code\" >t<\/span>."}, "type": "Weak.S.t -> Weak.S.data -> Weak.S.data list", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5983"}, "info": {"description": "<span class=\"code\" >mem t x<\/span> returns <span class=\"code\" >true<\/span> if there is at least one instance\n        of <span class=\"code\" >x<\/span> in <span class=\"code\" >t<\/span>, false otherwise."}, "type": "Weak.S.t -> Weak.S.data -> bool", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|6123"}, "info": {"description": "<span class=\"code\" >iter f t<\/span> calls <span class=\"code\" >f<\/span> on each element of <span class=\"code\" >t<\/span>, in some unspecified\n        order.  It is not specified what happens if <span class=\"code\" >f<\/span> tries to change\n        <span class=\"code\" >t<\/span> itself."}, "type": "(Weak.S.data -> unit) -> Weak.S.t -> unit", "params": [{"name": "", "type": "Weak.S.data -> unit"}, {"name": "", "type": "Weak.S.t"}]}}, {"value": {"name": "Weak.S.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|6332"}, "info": {"description": "<span class=\"code\" >fold f t init<\/span> computes <span class=\"code\" >(f d1 (... (f dN init)))<\/span> where\n        <span class=\"code\" >d1 ... dN<\/span> are the elements of <span class=\"code\" >t<\/span> in some unspecified order.\n        It is not specified what happens if <span class=\"code\" >f<\/span> tries to change <span class=\"code\" >t<\/span>\n        itself."}, "type": "(Weak.S.data -> 'a -> 'a) -> Weak.S.t -> 'a -> 'a", "params": [{"name": "", "type": "Weak.S.data -> 'a -> 'a"}, {"name": "", "type": "Weak.S.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Weak.S.count", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|6605"}, "info": {"description": "Count the number of elements in the table.  <span class=\"code\" >count t<\/span> gives the\n        same result as <span class=\"code\" >fold (fun _ n -&gt; n+1) t 0<\/span> but does not delay the\n        deallocation of the dead elements."}, "type": "Weak.S.t -> int", "params": [{"name": "", "type": "Weak.S.t"}]}}, {"value": {"name": "Weak.S.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|6820"}, "info": {"description": "Return statistics on the table.  The numbers are, in order:\n        table length, number of entries, sum of bucket lengths,\n        smallest bucket length, median bucket length, biggest bucket length."}, "type": "Weak.S.t -> int * int * int * int * int * int", "params": [{"name": "", "type": "Weak.S.t"}]}}]}}, {"module": {"name": "Weak.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|7147"}, "info": {"description": "Functor building an implementation of the weak hash table structure."}, "type": "functor (H : Hashtbl.HashedType) -> sig  end", "module_functor": {"parameter": {"name": "H", "module_alias": {"name": "Hashtbl.HashedType"}}, "module_with": {"module_alias": {"name": "Weak.S", "module_type": {"name": "Weak.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|4646"}, "info": {"description": "The output signature of the functor <a href=\"{module|Weak.Make}\" ><span class=\"code\" >Weak.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"type": {"name": "Weak.S.data", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|4737"}, "info": {"description": "The type of the elements stored in the table."}, "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Weak.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|4961"}, "info": {"description": "The type of tables that contain elements of type <span class=\"code\" >data<\/span>.\n        Note that weak hash tables cannot be marshaled using\n        <a href=\"{value|Pervasives.output_value}\" ><span class=\"code\" >Pervasives.output_value<\/span><\/a> or the functions of the <a href=\"{module|Marshal}\" ><span class=\"code\" >Marshal<\/span><\/a>\n        module."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Weak.S.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|4961"}, "info": {"description": "<span class=\"code\" >create n<\/span> creates a new empty weak hash table, of initial\n        size <span class=\"code\" >n<\/span>.  The table will grow as needed."}, "type": "int -> Weak.S.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Weak.S.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5105"}, "info": {"description": "Remove all elements from the table."}, "type": "Weak.S.t -> unit", "params": [{"name": "", "type": "Weak.S.t"}]}}, {"value": {"name": "Weak.S.merge", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5176"}, "info": {"description": "<span class=\"code\" >merge t x<\/span> returns an instance of <span class=\"code\" >x<\/span> found in <span class=\"code\" >t<\/span> if any,\n        or else adds <span class=\"code\" >x<\/span> to <span class=\"code\" >t<\/span> and return <span class=\"code\" >x<\/span>."}, "type": "Weak.S.t -> Weak.S.data -> Weak.S.data", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5327"}, "info": {"description": "<span class=\"code\" >add t x<\/span> adds <span class=\"code\" >x<\/span> to <span class=\"code\" >t<\/span>.  If there is already an instance\n        of <span class=\"code\" >x<\/span> in <span class=\"code\" >t<\/span>, it is unspecified which one will be\n        returned by subsequent calls to <span class=\"code\" >find<\/span> and <span class=\"code\" >merge<\/span>."}, "type": "Weak.S.t -> Weak.S.data -> unit", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5547"}, "info": {"description": "<span class=\"code\" >remove t x<\/span> removes from <span class=\"code\" >t<\/span> one instance of <span class=\"code\" >x<\/span>.  Does\n        nothing if there is no instance of <span class=\"code\" >x<\/span> in <span class=\"code\" >t<\/span>."}, "type": "Weak.S.t -> Weak.S.data -> unit", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5703"}, "info": {"description": "<span class=\"code\" >find t x<\/span> returns an instance of <span class=\"code\" >x<\/span> found in <span class=\"code\" >t<\/span>.\n        Raise <span class=\"code\" >Not_found<\/span> if there is no such element."}, "type": "Weak.S.t -> Weak.S.data -> Weak.S.data", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.find_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5852"}, "info": {"description": "<span class=\"code\" >find_all t x<\/span> returns a list of all the instances of <span class=\"code\" >x<\/span>\n        found in <span class=\"code\" >t<\/span>."}, "type": "Weak.S.t -> Weak.S.data -> Weak.S.data list", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|5983"}, "info": {"description": "<span class=\"code\" >mem t x<\/span> returns <span class=\"code\" >true<\/span> if there is at least one instance\n        of <span class=\"code\" >x<\/span> in <span class=\"code\" >t<\/span>, false otherwise."}, "type": "Weak.S.t -> Weak.S.data -> bool", "params": [{"name": "", "type": "Weak.S.t"}, {"name": "", "type": "Weak.S.data"}]}}, {"value": {"name": "Weak.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|6123"}, "info": {"description": "<span class=\"code\" >iter f t<\/span> calls <span class=\"code\" >f<\/span> on each element of <span class=\"code\" >t<\/span>, in some unspecified\n        order.  It is not specified what happens if <span class=\"code\" >f<\/span> tries to change\n        <span class=\"code\" >t<\/span> itself."}, "type": "(Weak.S.data -> unit) -> Weak.S.t -> unit", "params": [{"name": "", "type": "Weak.S.data -> unit"}, {"name": "", "type": "Weak.S.t"}]}}, {"value": {"name": "Weak.S.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|6332"}, "info": {"description": "<span class=\"code\" >fold f t init<\/span> computes <span class=\"code\" >(f d1 (... (f dN init)))<\/span> where\n        <span class=\"code\" >d1 ... dN<\/span> are the elements of <span class=\"code\" >t<\/span> in some unspecified order.\n        It is not specified what happens if <span class=\"code\" >f<\/span> tries to change <span class=\"code\" >t<\/span>\n        itself."}, "type": "(Weak.S.data -> 'a -> 'a) -> Weak.S.t -> 'a -> 'a", "params": [{"name": "", "type": "Weak.S.data -> 'a -> 'a"}, {"name": "", "type": "Weak.S.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Weak.S.count", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|6605"}, "info": {"description": "Count the number of elements in the table.  <span class=\"code\" >count t<\/span> gives the\n        same result as <span class=\"code\" >fold (fun _ n -&gt; n+1) t 0<\/span> but does not delay the\n        deallocation of the dead elements."}, "type": "Weak.S.t -> int", "params": [{"name": "", "type": "Weak.S.t"}]}}, {"value": {"name": "Weak.S.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/weak.mli|6820"}, "info": {"description": "Return statistics on the table.  The numbers are, in order:\n        table length, number of entries, sum of bucket lengths,\n        smallest bucket length, median bucket length, biggest bucket length."}, "type": "Weak.S.t -> int * int * int * int * int * int", "params": [{"name": "", "type": "Weak.S.t"}]}}]}}, "with": " with type data = H.t"}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Hashtbl"], "used_by": []}}}, "Sys": {"module": {"name": "Sys", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sys.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sys.mli|0"}, "info": {"description": "System interface."}, "type": "sig  end", "module_structure": [{"comment": "System interface."}, {"value": {"name": "Sys.os_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sys.mli|991"}, "info": {"description": "Operating system currently executing the Caml program. One of<ul><li> <span class=\"code\" >\"Unix\"<\/span> (for all Unix versions, including Linux and Mac OS X),<\/li><li> <span class=\"code\" >\"Win32\"<\/span> (for MS-Windows, OCaml compiled with MSVC++ or Mingw),<\/li><li> <span class=\"code\" >\"Cygwin\"<\/span> (for MS-Windows, OCaml compiled with Cygwin).<\/li><\/ul>"}, "type": "string", "params": []}}, {"value": {"name": "Sys.word_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sys.mli|1277"}, "info": {"description": "Size of one word on the machine currently executing the Caml\n   program, in bits: 32 or 64."}, "type": "int", "params": []}}, {"value": {"name": "Sys.max_string_length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sys.mli|1397"}, "info": {"description": "Maximum length of a string."}, "type": "int", "params": []}}, {"value": {"name": "Sys.max_array_length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/sys.mli|1461"}, "info": {"description": "Maximum length of a normal array.  The maximum length of a float\n    array is <span class=\"code\" >max_array_length\/2<\/span> on 32-bit machines and\n    <span class=\"code\" >max_array_length<\/span> on 64-bit machines."}, "type": "int", "params": []}}], "dependencies": {"uses": ["Pervasives"], "used_by": []}}}, "Scanf": {"module": {"name": "Scanf", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|0"}, "info": {"description": "Formatted input functions."}, "type": "sig  end", "module_structure": [{"comment": "<h6>Introduction<\/h6>"}, {"comment": "<h7>Functional input with format strings<\/h7>"}, {"comment": "The module <span class=\"code\" >Scanf<\/span> provides formatted input functions or <em>scanners<\/em>.<br><\/br>\n    The formatted input functions can read from any kind of input, including\n    strings, files, or anything that can return characters. The more general\n    source of characters is named a <em>formatted input channel<\/em> (or <em>    scanning buffer<\/em>) and has type <a href=\"{type|Scanf.Scanning.in_channel}\" ><span class=\"code\" >Scanf.Scanning.in_channel<\/span><\/a>. The more general\n    formatted input function reads from any scanning buffer and is named <span class=\"code\" >bscanf<\/span>.<br><\/br>\n    Generally speaking, the formatted input functions have 3 arguments:<ul><li>the first argument is a source of characters for the input,<\/li><li>the second argument is a format string that specifies the values to\n      read,<\/li><li>the third argument is a <em>receiver function<\/em> that is applied to the\n      values read.<\/li><\/ul>\n    Hence, a typical call to the formatted input function <a href=\"{value|Scanf.bscanf}\" ><span class=\"code\" >Scanf.bscanf<\/span><\/a> is\n    <span class=\"code\" >bscanf ic fmt f<\/span>, where:<br><\/br><ul><li><span class=\"code\" >ic<\/span> is a source of characters (typically a <em>    formatted input channel<\/em> with type <a href=\"{type|Scanf.Scanning.in_channel}\" ><span class=\"code\" >Scanf.Scanning.in_channel<\/span><\/a>),<\/li><\/ul><ul><li><span class=\"code\" >fmt<\/span> is a format string (the same format strings as those used to print\n    material with module <a href=\"{module|Printf}\" ><span class=\"code\" >Printf<\/span><\/a> or <a href=\"{module|Format}\" ><span class=\"code\" >Format<\/span><\/a>),<\/li><\/ul><ul><li><span class=\"code\" >f<\/span> is a function that has as many arguments as the number of values to\n    read in the input.<\/li><\/ul>"}, {"comment": "<h7>A simple example<\/h7>"}, {"comment": "As suggested above, the expression <span class=\"code\" >bscanf ic \"%d\" f<\/span> reads a decimal\n    integer <span class=\"code\" >n<\/span> from the source of characters <span class=\"code\" >ic<\/span> and returns <span class=\"code\" >f n<\/span>.<br><\/br>\n    For instance,<br><\/br><ul><li>if we use <span class=\"code\" >stdin<\/span> as the source of characters (<a href=\"{value|Scanf.Scanning.stdin}\" ><span class=\"code\" >Scanf.Scanning.stdin<\/span><\/a> is\n    the predefined formatted input channel that reads from standard input),<\/li><\/ul><ul><li>if we define the receiver <span class=\"code\" >f<\/span> as <span class=\"code\" >let f x = x + 1<\/span>,<\/li><\/ul>\n    then <span class=\"code\" >bscanf Scanning.stdin \"%d\" f<\/span> reads an integer <span class=\"code\" >n<\/span> from the standard input\n    and returns <span class=\"code\" >f n<\/span> (that is <span class=\"code\" >n + 1<\/span>). Thus, if we evaluate <span class=\"code\" >bscanf stdin\n    \"%d\" f<\/span>, and then enter <span class=\"code\" >41<\/span> at the keyboard, we get <span class=\"code\" >42<\/span> as the final\n    result."}, {"comment": "<h7>Formatted input as a functional feature<\/h7>"}, {"comment": "The Caml scanning facility is reminiscent of the corresponding C feature.\n    However, it is also largely different, simpler, and yet more powerful:\n    the formatted input functions are higher-order functionals and the\n    parameter passing mechanism is just the regular function application not\n    the variable assignment based mechanism which is typical for formatted\n    input in imperative languages; the Caml format strings also feature\n    useful additions to easily define complex tokens; as expected within a\n    functional programming language, the formatted input functions also\n    support polymorphism, in particular arbitrary interaction with\n    polymorphic user-defined scanners.  Furthermore, the Caml formatted input\n    facility is fully type-checked at compile time."}, {"module": {"name": "Scanf.Scanning", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|3836"}, "info": {"description": "<h6>Formatted input channel<\/h6>"}, "type": "sig  end", "module_structure": [{"type": {"name": "Scanf.Scanning.in_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|3874"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Scanf.Scanning.scanbuf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|4261"}, "info": {"description": "The type of scanning buffers. A scanning buffer is the source from which a\n    formatted input function gets characters. The scanning buffer holds the\n    current state of the scan, plus a function to get the next char from the\n    input, and a token buffer to store the string matched so far.<br><\/br>\n    Note: a scanning action may often require to examine one character in\n    advance; when this ``lookahead'' character does not belong to the token\n    read, it is stored back in the scanning buffer and becomes the next\n    character read."}, "params": [], "kind": {"type": "abstract"}, "manifest": "Scanf.Scanning.in_channel"}}, {"value": {"name": "Scanf.Scanning.stdin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|4819"}, "info": {"description": "The standard input notion for the module <span class=\"code\" >Scanf<\/span>.\n    <span class=\"code\" >stdin<\/span> is equivalent to <span class=\"code\" >Scanning.from_channel Pervasives.stdin<\/span>.<br><\/br>\n    Note: when input is read interactively from <span class=\"code\" >stdin<\/span>, the newline character\n    that triggers the evaluation is incorporated in the input; thus, scanning\n    specifications must properly skip this character (simply add a <span class=\"code\" >'\\n'<\/span>\n    as the last character of the format string).", "since": "3.12.0"}, "type": "Scanf.Scanning.in_channel", "params": []}}, {"value": {"name": "Scanf.Scanning.open_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|5272"}, "info": {"description": "Bufferized file reading in text mode. The efficient and usual\n    way to scan text mode files (in effect, <span class=\"code\" >from_file<\/span> returns a\n    scanning buffer that reads characters in large chunks, rather than one\n    character at a time as buffers returned by <span class=\"code\" >from_channel<\/span> below do).\n    <span class=\"code\" >Scanning.from_file fname<\/span> returns a scanning buffer which reads\n    from the given file <span class=\"code\" >fname<\/span> in text mode.", "since": "3.12.0"}, "type": "string -> Scanf.Scanning.in_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Scanf.Scanning.open_in_bin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|5726"}, "info": {"description": "Bufferized file reading in binary mode.", "since": "3.12.0"}, "type": "string -> Scanf.Scanning.in_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Scanf.Scanning.close_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|5829"}, "info": {"description": "Close the <span class=\"code\" >Pervasives.input_channel<\/span> associated with the given\n  <span class=\"code\" >Scanning.in_channel<\/span>.", "since": "3.12.0"}, "type": "Scanf.Scanning.in_channel -> unit", "params": [{"name": "", "type": "Scanf.Scanning.in_channel"}]}}, {"value": {"name": "Scanf.Scanning.from_file", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|5977"}, "info": {"description": "An alias for <span class=\"code\" >open_in<\/span> above."}, "type": "string -> Scanf.Scanning.in_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Scanf.Scanning.from_file_bin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|6053"}, "info": {"description": "An alias for <span class=\"code\" >open_in_bin<\/span> above."}, "type": "string -> Scanf.Scanning.in_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Scanf.Scanning.from_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|6138"}, "info": {"description": "<span class=\"code\" >Scanning.from_string s<\/span> returns a formatted input channel which reads\n    from the given string.\n    Reading starts from the first character in the string.\n    The end-of-input condition is set when the end of the string is reached."}, "type": "string -> Scanf.Scanning.in_channel", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Scanf.Scanning.from_function", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|6421"}, "info": {"description": "<span class=\"code\" >Scanning.from_function f<\/span> returns a scanning buffer with the given\n    function as its reading method.<br><\/br>\n    When scanning needs one more character, the given function is called.<br><\/br>\n    When the function has no more character to provide, it <em>must<\/em> signal an\n    end-of-input condition by raising the exception <span class=\"code\" >End_of_file<\/span>."}, "type": "(unit -> char) -> Scanf.Scanning.in_channel", "params": [{"name": "", "type": "unit -> char"}]}}, {"value": {"name": "Scanf.Scanning.from_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|6805"}, "info": {"description": "<span class=\"code\" >Scanning.from_channel ic<\/span> returns a formatted input channel which reads\n    from the regular input channel <span class=\"code\" >ic<\/span> argument, starting at the current\n    reading position."}, "type": "Pervasives.in_channel -> Scanf.Scanning.in_channel", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Scanf.Scanning.end_of_input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|7039"}, "info": {"description": "<span class=\"code\" >Scanning.end_of_input ic<\/span> tests the end-of-input condition of the given\n    formatted input channel."}, "type": "Scanf.Scanning.in_channel -> bool", "params": [{"name": "", "type": "Scanf.Scanning.in_channel"}]}}, {"value": {"name": "Scanf.Scanning.beginning_of_input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|7189"}, "info": {"description": "<span class=\"code\" >Scanning.beginning_of_input ic<\/span> tests the beginning of input condition of\n    the given formatted input channel."}, "type": "Scanf.Scanning.in_channel -> bool", "params": [{"name": "", "type": "Scanf.Scanning.in_channel"}]}}, {"value": {"name": "Scanf.Scanning.name_of_input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|7357"}, "info": {"description": "<span class=\"code\" >Scanning.file_name_of_input ic<\/span> returns the name of the character source\n    for the formatted input channel <span class=\"code\" >ic<\/span>.", "since": "3.09.0"}, "type": "Scanf.Scanning.in_channel -> string", "params": [{"name": "", "type": "Scanf.Scanning.in_channel"}]}}, {"value": {"name": "Scanf.Scanning.stdib", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|7542"}, "info": {"description": "A deprecated alias for <span class=\"code\" >Scanning.stdin<\/span>, the scanning buffer reading from\n    <span class=\"code\" >Pervasives.stdin<\/span>."}, "type": "Scanf.Scanning.in_channel", "params": []}}], "dependencies": {"uses": []}}}, {"comment": "<h6>Type of formatted input functions<\/h6>"}, {"type": {"name": "Scanf.scanner", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|7763"}, "info": {"description": "The type of formatted input scanners: <span class=\"code\" >('a, 'b, 'c, 'd) scanner<\/span> is the\n    type of a formatted input function that reads from some formatted input channel\n    according to some format string; more precisely, if <span class=\"code\" >scan<\/span> is some\n    formatted input function, then <span class=\"code\" >scan ic fmt f<\/span> applies <span class=\"code\" >f<\/span> to the arguments\n    specified by the format string <span class=\"code\" >fmt<\/span>, when <span class=\"code\" >scan<\/span> has read those arguments\n    from the formatted input channel <span class=\"code\" >ic<\/span>.<br><\/br>\n    For instance, the <span class=\"code\" >scanf<\/span> function below has type <span class=\"code\" >('a, 'b, 'c, 'd)\n    scanner<\/span>, since it is a formatted input function that reads from\n    <span class=\"code\" >Scanning.stdin<\/span>: <span class=\"code\" >scanf fmt f<\/span> applies <span class=\"code\" >f<\/span> to the arguments specified by\n    <span class=\"code\" >fmt<\/span>, reading those arguments from <span class=\"code\" >Pervasives.stdin<\/span> as expected.<br><\/br>\n    If the format <span class=\"code\" >fmt<\/span> has some <span class=\"code\" >%r<\/span> indications, the corresponding input\n    functions must be provided before the receiver <span class=\"code\" >f<\/span> argument. For\n    instance, if <span class=\"code\" >read_elem<\/span> is an input function for values of type <span class=\"code\" >t<\/span>,\n    then <span class=\"code\" >bscanf ic \"%r;\" read_elem f<\/span> reads a value <span class=\"code\" >v<\/span> of type <span class=\"code\" >t<\/span> followed\n    by a <span class=\"code\" >';'<\/span> character, and returns <span class=\"code\" >f v<\/span>.", "since": "3.10.0"}, "params": [{"covariant": true, "contravariant": true, "type": "'a"}, {"covariant": true, "contravariant": true, "type": "'b"}, {"covariant": true, "contravariant": true, "type": "'c"}, {"covariant": true, "contravariant": true, "type": "'d"}], "kind": {"type": "abstract"}, "manifest": "('a, Scanf.Scanning.in_channel, 'b, 'c, 'a -> 'd, 'd) format6 -> 'c"}}, {"exception": {"name": "Scanf.Scan_failure", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|8916"}, "info": {"description": "The exception that formatted input functions raise when the input cannot be\n    read according to the given format."}, "exception_args": ["string"]}}, {"comment": "<h6>The general formatted input function<\/h6>"}, {"value": {"name": "Scanf.bscanf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|9124"}, "info": {"description": "<span class=\"code\" >bscanf ic fmt r1 ... rN f<\/span> reads arguments for the function <span class=\"code\" >f<\/span>, from the\n    formatted input channel <span class=\"code\" >ic<\/span>, according to the format string <span class=\"code\" >fmt<\/span>, and\n    applies <span class=\"code\" >f<\/span> to these values.\n    The result of this call to <span class=\"code\" >f<\/span> is returned as the result of the entire\n    <span class=\"code\" >bscanf<\/span> call.\n    For instance, if <span class=\"code\" >f<\/span> is the function <span class=\"code\" >fun s i -&gt; i + 1<\/span>, then\n    <span class=\"code\" >Scanf.sscanf \"x=  1\" \"%s = %i\" f<\/span> returns <span class=\"code\" >2<\/span>.<br><\/br>\n    Arguments <span class=\"code\" >r1<\/span> to <span class=\"code\" >rN<\/span> are user-defined input functions that read the\n    argument corresponding to a <span class=\"code\" >%r<\/span> conversion."}, "type": "Scanf.Scanning.in_channel -> ('a, 'b, 'c, 'd) Scanf.scanner", "params": [{"name": "", "type": "Scanf.Scanning.in_channel"}]}}, {"comment": "<h6>Format string description<\/h6>"}, {"comment": "The format is a character string which contains three types of\n    objects:<ul><li>plain characters, which are simply matched with the characters of the\n      input (with a special case for <a href=\"{section|Scanf.space}\" ><span class=\"code\" >Scanf.space<\/span><\/a> and line feed),<\/li><li>conversion specifications, each of which causes reading and conversion of\n      one argument for the function <span class=\"code\" >f<\/span> (see <a href=\"{section|Scanf.conversion}\" ><span class=\"code\" >Scanf.conversion<\/span><\/a>),<\/li><li>scanning indications to specify boundaries of tokens\n      (see scanning <a href=\"{section|Scanf.indication}\" ><span class=\"code\" >Scanf.indication<\/span><\/a>).<\/li><\/ul>"}, {"comment": "<h7>The space character in format strings<\/h7>"}, {"comment": "As mentioned above, a plain character in the format string is just\n    matched with the next character of the input; however, two characters are\n    special exceptions to this rule: the space character (<span class=\"code\" >' '<\/span> or ASCII code\n    32) and the line feed character (<span class=\"code\" >'\\n'<\/span> or ASCII code 10).\n    A space does not match a single space character, but any amount of\n    ``whitespace'' in the input. More precisely, a space inside the format\n    string matches <em>any number<\/em> of tab, space, line feed and carriage\n    return characters. Similarly, a line feed character in the format string\n    matches either a single line feed or a carriage return followed by a line\n    feed.<br><\/br>\n    Matching <em>any<\/em> amount of whitespace, a space in the format string\n    also matches no amount of whitespace at all; hence, the call <span class=\"code\" >bscanf ib\n    \"Price = %d $\" (fun p -&gt; p)<\/span> succeeds and returns <span class=\"code\" >1<\/span> when reading an\n    input with various whitespace in it, such as <span class=\"code\" >Price = 1 $<\/span>,\n    <span class=\"code\" >Price  =  1    $<\/span>, or even <span class=\"code\" >Price=1$<\/span>."}, {"comment": "<h7>Conversion specifications in format strings<\/h7>"}, {"comment": "Conversion specifications consist in the <span class=\"code\" >%<\/span> character, followed by\n    an optional flag, an optional field width, and followed by one or\n    two conversion characters. The conversion characters and their\n    meanings are:<br><\/br><ul><li><span class=\"code\" >d<\/span>: reads an optionally signed decimal integer.<\/li><li><span class=\"code\" >i<\/span>: reads an optionally signed integer\n      (usual input conventions for decimal (<span class=\"code\" >0-9<\/span>+), hexadecimal\n       (<span class=\"code\" >0x[0-9a-f]+<\/span> and <span class=\"code\" >0X[0-9A-F]+<\/span>), octal (<span class=\"code\" >0o[0-7]+<\/span>), and binary\n       (<span class=\"code\" >0b[0-1]+<\/span>) notations are understood).<\/li><li><span class=\"code\" >u<\/span>: reads an unsigned decimal integer.<\/li><li><span class=\"code\" >x<\/span> or <span class=\"code\" >X<\/span>: reads an unsigned hexadecimal integer (<span class=\"code\" >[0-9a-f]+<\/span> or <span class=\"code\" >[0-9A-F]+<\/span>).<\/li><li><span class=\"code\" >o<\/span>: reads an unsigned octal integer (<span class=\"code\" >[0-7]+<\/span>).<\/li><li><span class=\"code\" >s<\/span>: reads a string argument that spreads as much as possible, until the\n      following bounding condition holds:<\/li><li>a whitespace has been found (see <a href=\"{section|Scanf.space}\" ><span class=\"code\" >Scanf.space<\/span><\/a>),<\/li><li>a scanning indication (see scanning <a href=\"{section|Scanf.indication}\" ><span class=\"code\" >Scanf.indication<\/span><\/a>) has been\n        encountered,<\/li><li>the end-of-input has been reached.\n      Hence, this conversion always succeeds: it returns an empty\n      string, if the bounding condition holds when the scan begins.<\/li><li><span class=\"code\" >S<\/span>: reads a delimited string argument (delimiters and special\n      escaped characters follow the lexical conventions of Caml).<\/li><li><span class=\"code\" >c<\/span>: reads a single character. To test the current input character\n      without reading it, specify a null field width, i.e. use\n      specification <span class=\"code\" >%0c<\/span>. Raise <span class=\"code\" >Invalid_argument<\/span>, if the field width\n      specification is greater than 1.<\/li><li><span class=\"code\" >C<\/span>: reads a single delimited character (delimiters and special\n      escaped characters follow the lexical conventions of Caml).<\/li><li><span class=\"code\" >f<\/span>, <span class=\"code\" >e<\/span>, <span class=\"code\" >E<\/span>, <span class=\"code\" >g<\/span>, <span class=\"code\" >G<\/span>: reads an optionally signed\n      floating-point number in decimal notation, in the style <span class=\"code\" >dddd.ddd\n      e\/E+-dd<\/span>.<\/li><li><span class=\"code\" >F<\/span>: reads a floating point number according to the lexical\n      conventions of Caml (hence the decimal point is mandatory if the\n      exponent part is not mentioned).<\/li><li><span class=\"code\" >B<\/span>: reads a boolean argument (<span class=\"code\" >true<\/span> or <span class=\"code\" >false<\/span>).<\/li><li><span class=\"code\" >b<\/span>: reads a boolean argument (for backward compatibility; do not use\n      in new programs).<\/li><li><span class=\"code\" >ld<\/span>, <span class=\"code\" >li<\/span>, <span class=\"code\" >lu<\/span>, <span class=\"code\" >lx<\/span>, <span class=\"code\" >lX<\/span>, <span class=\"code\" >lo<\/span>: reads an <span class=\"code\" >int32<\/span> argument to\n      the format specified by the second letter for regular integers.<\/li><li><span class=\"code\" >nd<\/span>, <span class=\"code\" >ni<\/span>, <span class=\"code\" >nu<\/span>, <span class=\"code\" >nx<\/span>, <span class=\"code\" >nX<\/span>, <span class=\"code\" >no<\/span>: reads a <span class=\"code\" >nativeint<\/span> argument to\n      the format specified by the second letter for regular integers.<\/li><li><span class=\"code\" >Ld<\/span>, <span class=\"code\" >Li<\/span>, <span class=\"code\" >Lu<\/span>, <span class=\"code\" >Lx<\/span>, <span class=\"code\" >LX<\/span>, <span class=\"code\" >Lo<\/span>: reads an <span class=\"code\" >int64<\/span> argument to\n      the format specified by the second letter for regular integers.<\/li><li><span class=\"code\" >[ range ]<\/span>: reads characters that matches one of the characters\n      mentioned in the range of characters <span class=\"code\" >range<\/span> (or not mentioned in\n      it, if the range starts with <span class=\"code\" >^<\/span>). Reads a <span class=\"code\" >string<\/span> that can be\n      empty, if the next input character does not match the range. The set of\n      characters from <span class=\"code\" >c1<\/span> to <span class=\"code\" >c2<\/span> (inclusively) is denoted by <span class=\"code\" >c1-c2<\/span>.\n      Hence, <span class=\"code\" >%[0-9]<\/span> returns a string representing a decimal number\n      or an empty string if no decimal digit is found; similarly,\n      <span class=\"code\" >%[\\\\048-\\\\057\\\\065-\\\\070]<\/span> returns a string of hexadecimal digits.\n      If a closing bracket appears in a range, it must occur as the\n      first character of the range (or just after the <span class=\"code\" >^<\/span> in case of\n      range negation); hence <span class=\"code\" >[]]<\/span> matches a <span class=\"code\" >]<\/span> character and\n      <span class=\"code\" >[^]]<\/span> matches any character that is not <span class=\"code\" >]<\/span>.<\/li><li><span class=\"code\" >r<\/span>: user-defined reader. Takes the next <span class=\"code\" >ri<\/span> formatted input function and\n      applies it to the scanning buffer <span class=\"code\" >ib<\/span> to read the next argument. The\n      input function <span class=\"code\" >ri<\/span> must therefore have type <span class=\"code\" >Scanning.in_channel -&gt; 'a<\/span> and\n      the argument read has type <span class=\"code\" >'a<\/span>.<\/li><li><span class=\"code\" >{ fmt %}<\/span>: reads a format string argument.\n      The format string read must have the same type as the format string\n      specification <span class=\"code\" >fmt<\/span>.\n      For instance, <span class=\"code\" >\"%{ %i %}\"<\/span> reads any format string that can read a value of\n      type <span class=\"code\" >int<\/span>; hence <span class=\"code\" >Scanf.sscanf \"fmt:\\\"number is %u\\\"\" \"fmt:%{%i%}\"<\/span>\n      succeeds and returns the format string <span class=\"code\" >\"number is %u\"<\/span>.<\/li><li><span class=\"code\" >\\( fmt %\\)<\/span>: scanning format substitution.\n      Reads a format string to read with it instead of <span class=\"code\" >fmt<\/span>.\n      The format string read must have the same type as the format string\n      specification <span class=\"code\" >fmt<\/span> that is replaces.\n      For instance, <span class=\"code\" >\"%( %i %)\"<\/span> reads any format string that can read a value\n      of type <span class=\"code\" >int<\/span>.\n      Returns the format string read, and the value read using the format\n      string read.\n      Hence, <span class=\"code\" >Scanf.sscanf \"\\\"%4d\\\"1234.00\" \"%(%i%)\"\n                (fun fmt i -&gt; fmt, i)<\/span> evaluates to <span class=\"code\" >(\"%4d\", 1234)<\/span>.\n      If the special flag <span class=\"code\" >_<\/span> is used, the conversion discards the\n      format string read and only returns the value read with the format\n      string read.\n      Hence, <span class=\"code\" >Scanf.sscanf \"\\\"%4d\\\"1234.00\" \"%_(%i%)\"<\/span> is simply\n      equivalent to <span class=\"code\" >Scanf.sscanf \"1234.00\" \"%4d\"<\/span>.<\/li><li><span class=\"code\" >l<\/span>: returns the number of lines read so far.<\/li><li><span class=\"code\" >n<\/span>: returns the number of characters read so far.<\/li><li><span class=\"code\" >N<\/span> or <span class=\"code\" >L<\/span>: returns the number of tokens read so far.<\/li><li><span class=\"code\" >!<\/span>: matches the end of input condition.<\/li><li><span class=\"code\" >%<\/span>: matches one <span class=\"code\" >%<\/span> character in the input.<\/li><li><span class=\"code\" >,<\/span>: the no-op delimiter for conversion specifications.<\/li><\/ul>\n    Following the <span class=\"code\" >%<\/span> character that introduces a conversion, there may be\n    the special flag <span class=\"code\" >_<\/span>: the conversion that follows occurs as usual,\n    but the resulting value is discarded.\n    For instance, if <span class=\"code\" >f<\/span> is the function <span class=\"code\" >fun i -&gt; i + 1<\/span>, then\n    <span class=\"code\" >Scanf.sscanf \"x = 1\" \"%_s = %i\" f<\/span> returns <span class=\"code\" >2<\/span>.<br><\/br>\n    The field width is composed of an optional integer literal\n    indicating the maximal width of the token to read.\n    For instance, <span class=\"code\" >%6d<\/span> reads an integer, having at most 6 decimal digits;\n    <span class=\"code\" >%4f<\/span> reads a float with at most 4 characters; and <span class=\"code\" >%8[\\\\000-\\\\255]<\/span>\n    returns the next 8 characters (or all the characters still available,\n    if fewer than 8 characters are available in the input).<br><\/br>\n    Notes:<br><\/br><ul><li>as mentioned above, a <span class=\"code\" >%s<\/span> conversion always succeeds, even if there is\n      nothing to read in the input: in this case, it simply returns <span class=\"code\" >\"\"<\/span>.<\/li><\/ul><ul><li>in addition to the relevant digits, <span class=\"code\" >'_'<\/span> characters may appear\n    inside numbers (this is reminiscent to the usual Caml lexical\n    conventions). If stricter scanning is desired, use the range\n    conversion facility instead of the number conversions.<\/li><\/ul><ul><li>the <span class=\"code\" >scanf<\/span> facility is not intended for heavy duty lexical\n    analysis and parsing. If it appears not expressive enough for your\n    needs, several alternative exists: regular expressions (module\n    <span class=\"code\" >Str<\/span>), stream parsers, <span class=\"code\" >ocamllex<\/span>-generated lexers,\n    <span class=\"code\" >ocamlyacc<\/span>-generated parsers.<\/li><\/ul>"}, {"comment": "<h7>Scanning indications in format strings<\/h7>"}, {"comment": "Scanning indications appear just after the string conversions <span class=\"code\" >%s<\/span>\n    and <span class=\"code\" >%[ range ]<\/span> to delimit the end of the token. A scanning\n    indication is introduced by a <span class=\"code\" >@<\/span> character, followed by some\n    constant character <span class=\"code\" >c<\/span>. It means that the string token should end\n    just before the next matching <span class=\"code\" >c<\/span> (which is skipped). If no <span class=\"code\" >c<\/span>\n    character is encountered, the string token spreads as much as\n    possible. For instance, <span class=\"code\" >\"%s@\\t\"<\/span> reads a string up to the next\n    tab character or to the end of input. If a scanning\n    indication <span class=\"code\" >@c<\/span> does not follow a string conversion, it is treated\n    as a plain <span class=\"code\" >c<\/span> character.<br><\/br>\n    Note:<br><\/br><ul><li>the scanning indications introduce slight differences in the syntax of\n    <span class=\"code\" >Scanf<\/span> format strings, compared to those used for the <span class=\"code\" >Printf<\/span>\n    module. However, the scanning indications are similar to those used in\n    the <span class=\"code\" >Format<\/span> module; hence, when producing formatted text to be scanned\n    by <span class=\"code\" >!Scanf.bscanf<\/span>, it is wise to use printing functions from the\n    <span class=\"code\" >Format<\/span> module (or, if you need to use functions from <span class=\"code\" >Printf<\/span>, banish\n    or carefully double check the format strings that contain <span class=\"code\" >'@'<\/span>\n    characters).<\/li><\/ul>"}, {"comment": "<h7>Exceptions during scanning<\/h7>"}, {"comment": "Scanners may raise the following exceptions when the input cannot be read\n    according to the format string:<br><\/br><ul><li>Raise <span class=\"code\" >Scanf.Scan_failure<\/span> if the input does not match the format.<\/li><\/ul><ul><li>Raise <span class=\"code\" >Failure<\/span> if a conversion to a number is not possible.<\/li><\/ul><ul><li>Raise <span class=\"code\" >End_of_file<\/span> if the end of input is encountered while some more\n      characters are needed to read the current conversion specification.<\/li><\/ul><ul><li>Raise <span class=\"code\" >Invalid_argument<\/span> if the format string is invalid.<\/li><\/ul>\n    Note:<br><\/br><ul><li>as a consequence, scanning a <span class=\"code\" >%s<\/span> conversion never raises exception\n    <span class=\"code\" >End_of_file<\/span>: if the end of input is reached the conversion succeeds and\n    simply returns the characters read so far, or <span class=\"code\" >\"\"<\/span> if none were ever read.<\/li><\/ul>"}, {"comment": "<h6>Specialised formatted input functions<\/h6>"}, {"value": {"name": "Scanf.fscanf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|20060"}, "info": {"description": "Same as <a href=\"{value|Scanf.bscanf}\" ><span class=\"code\" >Scanf.bscanf<\/span><\/a>, but reads from the given regular input channel.<br><\/br>\n    Warning: since all formatted input functions operate from a <em>formatted\n    input channel<\/em>, be aware that each <span class=\"code\" >fscanf<\/span> invocation will operate with a\n    formatted input channel reading from the given channel. This extra level\n    of bufferization can lead to strange scanning behaviour if you use low\n    level primitives on the channel (reading characters, seeking the reading\n    position, and so on).<br><\/br>\n    As a consequence, never mix direct low level reading and high level\n    scanning from the same regular input channel."}, "type": "Pervasives.in_channel -> ('a, 'b, 'c, 'd) Scanf.scanner", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Scanf.sscanf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|20741"}, "info": {"description": "Same as <a href=\"{value|Scanf.bscanf}\" ><span class=\"code\" >Scanf.bscanf<\/span><\/a>, but reads from the given string."}, "type": "string -> ('a, 'b, 'c, 'd) Scanf.scanner", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Scanf.scanf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|20857"}, "info": {"description": "Same as <a href=\"{value|Scanf.bscanf}\" ><span class=\"code\" >Scanf.bscanf<\/span><\/a>, but reads from the predefined formatted input\n    channel <a href=\"{value|Scanf.Scanning.stdin}\" ><span class=\"code\" >Scanf.Scanning.stdin<\/span><\/a> that is connected to <span class=\"code\" >Pervasives.stdin<\/span>."}, "type": "('a, 'b, 'c, 'd) Scanf.scanner", "params": []}}, {"value": {"name": "Scanf.kscanf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|21052"}, "info": {"description": "Same as <a href=\"{value|Scanf.bscanf}\" ><span class=\"code\" >Scanf.bscanf<\/span><\/a>, but takes an additional function argument\n    <span class=\"code\" >ef<\/span> that is called in case of error: if the scanning process or\n    some conversion fails, the scanning function aborts and calls the\n    error handling function <span class=\"code\" >ef<\/span> with the scanning buffer and the\n    exception that aborted the scanning process as arguments."}, "type": "Scanf.Scanning.in_channel ->\n  (Scanf.Scanning.in_channel -> exn -> 'a) -> ('b, 'c, 'd, 'a) Scanf.scanner", "params": [{"name": "", "type": "Scanf.Scanning.in_channel"}, {"name": "", "type": "Scanf.Scanning.in_channel -> exn -> 'a"}]}}, {"comment": "<h6>Reading format strings from input<\/h6>"}, {"value": {"name": "Scanf.bscanf_format", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|21547"}, "info": {"description": "<span class=\"code\" >bscanf_format ic fmt f<\/span> reads a format string token from the formatted\n    input channel <span class=\"code\" >ic<\/span>, according to the given format string <span class=\"code\" >fmt<\/span>, and\n    applies <span class=\"code\" >f<\/span> to the resulting format string value.\n    Raise <span class=\"code\" >Scan_failure<\/span> if the format string value read does not have the\n    same type as <span class=\"code\" >fmt<\/span>.", "since": "3.09.0"}, "type": "Scanf.Scanning.in_channel ->\n  ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g", "params": [{"name": "", "type": "Scanf.Scanning.in_channel"}, {"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6"}, {"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g"}]}}, {"value": {"name": "Scanf.sscanf_format", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|22004"}, "info": {"description": "Same as <a href=\"{value|Scanf.bscanf_format}\" ><span class=\"code\" >Scanf.bscanf_format<\/span><\/a>, but reads from the given string.", "since": "3.09.0"}, "type": "string ->\n  ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g", "params": [{"name": "", "type": "string"}, {"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6"}, {"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g"}]}}, {"value": {"name": "Scanf.format_from_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/scanf.mli|22216"}, "info": {"description": "<span class=\"code\" >format_from_string s fmt<\/span> converts a string argument to a format string,\n    according to the given format string <span class=\"code\" >fmt<\/span>.\n    Raise <span class=\"code\" >Scan_failure<\/span> if <span class=\"code\" >s<\/span>, considered as a format string, does not\n    have the same type as <span class=\"code\" >fmt<\/span>.", "since": "3.10.0"}, "type": "string ->\n  ('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f) format6", "params": [{"name": "", "type": "string"}, {"name": "", "type": "('a, 'b, 'c, 'd, 'e, 'f) format6"}]}}], "dependencies": {"uses": ["Pervasives"], "used_by": []}}}, "Random": {"module": {"name": "Random", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|0"}, "info": {"description": "Pseudo-random number generators (PRNG)."}, "type": "sig  end", "module_structure": [{"comment": "<h6>Basic functions<\/h6>"}, {"value": {"name": "Random.init", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|1025"}, "info": {"description": "Initialize the generator, using the argument as a seed.\n     The same seed will always yield the same sequence of numbers."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Random.full_init", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|1179"}, "info": {"description": "Same as <a href=\"{value|Random.init}\" ><span class=\"code\" >Random.init<\/span><\/a> but takes more data as seed."}, "type": "int array -> unit", "params": [{"name": "", "type": "int array"}]}}, {"value": {"name": "Random.self_init", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|1273"}, "info": {"description": "Initialize the generator with a more-or-less random seed chosen\n   in a system-dependent way."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Random.bits", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|1404"}, "info": {"description": "Return 30 random bits in a nonnegative integer."}, "type": "unit -> int", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Random.int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|1586"}, "info": {"description": "<span class=\"code\" >Random.int bound<\/span> returns a random integer between 0 (inclusive)\n     and <span class=\"code\" >bound<\/span> (exclusive).  <span class=\"code\" >bound<\/span> must be greater than 0 and less\n     than 2<sup>30<\/sup>."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Random.int32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|1770"}, "info": {"description": "<span class=\"code\" >Random.int32 bound<\/span> returns a random integer between 0 (inclusive)\n     and <span class=\"code\" >bound<\/span> (exclusive).  <span class=\"code\" >bound<\/span> must be greater than 0."}, "type": "Int32.t -> Int32.t", "params": [{"name": "", "type": "Int32.t"}]}}, {"value": {"name": "Random.nativeint", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|1942"}, "info": {"description": "<span class=\"code\" >Random.nativeint bound<\/span> returns a random integer between 0 (inclusive)\n     and <span class=\"code\" >bound<\/span> (exclusive).  <span class=\"code\" >bound<\/span> must be greater than 0."}, "type": "Nativeint.t -> Nativeint.t", "params": [{"name": "", "type": "Nativeint.t"}]}}, {"value": {"name": "Random.int64", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|2130"}, "info": {"description": "<span class=\"code\" >Random.int64 bound<\/span> returns a random integer between 0 (inclusive)\n     and <span class=\"code\" >bound<\/span> (exclusive).  <span class=\"code\" >bound<\/span> must be greater than 0."}, "type": "Int64.t -> Int64.t", "params": [{"name": "", "type": "Int64.t"}]}}, {"value": {"name": "Random.float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|2302"}, "info": {"description": "<span class=\"code\" >Random.float bound<\/span> returns a random floating-point number\n   between 0 (inclusive) and <span class=\"code\" >bound<\/span> (exclusive).  If <span class=\"code\" >bound<\/span> is\n   negative, the result is negative or zero.  If <span class=\"code\" >bound<\/span> is 0,\n   the result is 0."}, "type": "float -> float", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Random.bool", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|2545"}, "info": {"description": "<span class=\"code\" >Random.bool ()<\/span> returns <span class=\"code\" >true<\/span> or <span class=\"code\" >false<\/span> with probability 0.5 each."}, "type": "unit -> bool", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Advanced functions<\/h6>"}, {"comment": "The functions from module <span class=\"code\" >State<\/span> manipulate the current state\n    of the random generator explicitely.\n    This allows using one or several deterministic PRNGs,\n    even in a multi-threaded program, without interference from\n    other parts of the program."}, {"module": {"name": "Random.State", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|2945"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Random.State.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3010"}, "info": {"description": "The type of PRNG states."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Random.State.make", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3010"}, "info": {"description": "Create a new state and initialize it with the given seed."}, "type": "int array -> Random.State.t", "params": [{"name": "", "type": "int array"}]}}, {"value": {"name": "Random.State.make_self_init", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3106"}, "info": {"description": "Create a new state and initialize it with a system-dependent\n      low-entropy seed."}, "type": "unit -> Random.State.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Random.State.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3234"}, "info": {"description": "Return a copy of the given state."}, "type": "Random.State.t -> Random.State.t", "params": [{"name": "", "type": "Random.State.t"}]}}, {"value": {"name": "Random.State.bits", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3298"}, "info": "", "type": "Random.State.t -> int", "params": [{"name": "", "type": "Random.State.t"}]}}, {"value": {"name": "Random.State.int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3320"}, "info": "", "type": "Random.State.t -> int -> int", "params": [{"name": "", "type": "Random.State.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Random.State.int32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3348"}, "info": "", "type": "Random.State.t -> Int32.t -> Int32.t", "params": [{"name": "", "type": "Random.State.t"}, {"name": "", "type": "Int32.t"}]}}, {"value": {"name": "Random.State.nativeint", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3386"}, "info": "", "type": "Random.State.t -> Nativeint.t -> Nativeint.t", "params": [{"name": "", "type": "Random.State.t"}, {"name": "", "type": "Nativeint.t"}]}}, {"value": {"name": "Random.State.int64", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3436"}, "info": "", "type": "Random.State.t -> Int64.t -> Int64.t", "params": [{"name": "", "type": "Random.State.t"}, {"name": "", "type": "Int64.t"}]}}, {"value": {"name": "Random.State.float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3474"}, "info": "", "type": "Random.State.t -> float -> float", "params": [{"name": "", "type": "Random.State.t"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Random.State.bool", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3508"}, "info": {"description": "These functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one."}, "type": "Random.State.t -> bool", "params": [{"name": "", "type": "Random.State.t"}]}}], "dependencies": {"uses": []}}}, {"value": {"name": "Random.get_state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3690"}, "info": {"description": "Return the current state of the generator used by the basic functions."}, "type": "unit -> Random.State.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Random.set_state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/random.mli|3801"}, "info": {"description": "Set the state of the generator used by the basic functions."}, "type": "Random.State.t -> unit", "params": [{"name": "", "type": "Random.State.t"}]}}], "dependencies": {"uses": ["Nativeint", "Int64", "Int32"], "used_by": []}}}, "Obj": {"module": {"name": "Obj", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|0"}, "info": {"description": "Operations on internal representations of values.<br><\/br>\n   Not for the casual user."}, "type": "sig  end", "module_structure": [{"type": {"name": "Obj.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1041"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Obj.repr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1041"}, "info": "", "type": "'a -> Obj.t", "params": [{"name": "", "type": "'a"}]}}, {"value": {"name": "Obj.obj", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1079"}, "info": "", "type": "Obj.t -> 'a", "params": [{"name": "", "type": "Obj.t"}]}}, {"value": {"name": "Obj.magic", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1116"}, "info": "", "type": "'a -> 'b", "params": [{"name": "", "type": "'a"}]}}, {"value": {"name": "Obj.is_block", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1156"}, "info": "", "type": "Obj.t -> bool", "params": [{"name": "", "type": "Obj.t"}]}}, {"value": {"name": "Obj.is_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1208"}, "info": "", "type": "Obj.t -> bool", "params": [{"name": "", "type": "Obj.t"}]}}, {"value": {"name": "Obj.tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1252"}, "info": "", "type": "Obj.t -> int", "params": [{"name": "", "type": "Obj.t"}]}}, {"value": {"name": "Obj.set_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1293"}, "info": "", "type": "Obj.t -> int -> unit", "params": [{"name": "", "type": "Obj.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Obj.size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1350"}, "info": "", "type": "Obj.t -> int", "params": [{"name": "", "type": "Obj.t"}]}}, {"value": {"name": "Obj.field", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1389"}, "info": "", "type": "Obj.t -> int -> Obj.t", "params": [{"name": "", "type": "Obj.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Obj.set_field", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1435"}, "info": "", "type": "Obj.t -> int -> Obj.t -> unit", "params": [{"name": "", "type": "Obj.t"}, {"name": "", "type": "int"}, {"name": "", "type": "Obj.t"}]}}, {"value": {"name": "Obj.double_field", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1497"}, "info": "", "type": "Obj.t -> int -> float", "params": [{"name": "", "type": "Obj.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Obj.set_double_field", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1555"}, "info": "", "type": "Obj.t -> int -> float -> unit", "params": [{"name": "", "type": "Obj.t"}, {"name": "", "type": "int"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Obj.new_block", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1625"}, "info": "", "type": "int -> int -> Obj.t", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Obj.dup", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1681"}, "info": "", "type": "Obj.t -> Obj.t", "params": [{"name": "", "type": "Obj.t"}]}}, {"value": {"name": "Obj.truncate", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1720"}, "info": "", "type": "Obj.t -> int -> unit", "params": [{"name": "", "type": "Obj.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Obj.add_offset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1779"}, "info": "", "type": "Obj.t -> Int32.t -> Obj.t", "params": [{"name": "", "type": "Obj.t"}, {"name": "", "type": "Int32.t"}]}}, {"value": {"name": "Obj.lazy_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1873"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.closure_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1892"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.object_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1914"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.infix_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1935"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.forward_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1955"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.no_scan_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1977"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.abstract_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|1999"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.string_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2022"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.double_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2043"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.double_array_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2064"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.custom_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2091"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.final_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2112"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.int_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2151"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.out_of_heap_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2169"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Obj.unaligned_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2195"}, "info": "", "type": "int", "params": []}}, {"comment": "The following two functions are deprecated.  Use module <a href=\"{module|Marshal}\" ><span class=\"code\" >Marshal<\/span><\/a>\n    instead."}, {"value": {"name": "Obj.marshal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2350"}, "info": "", "type": "Obj.t -> string", "params": [{"name": "", "type": "Obj.t"}]}}, {"value": {"name": "Obj.unmarshal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/obj.mli|2376"}, "info": "", "type": "string -> int -> Obj.t * int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}]}}], "dependencies": {"uses": ["Int32"], "used_by": ["Printf", "Parsing", "CamlinternalOO", "CamlinternalMod"]}}}, "Format": {"module": {"name": "Format", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|0"}, "info": {"description": "Pretty printing.<br><\/br>\n   This module implements a pretty-printing facility to format text\n   within ``pretty-printing boxes''. The pretty-printer breaks lines\n   at specified break hints, and indents lines according to the box\n   structure.<br><\/br>\n   For a gentle introduction to the basics of pretty-printing using\n   <span class=\"code\" >Format<\/span>, read\n   <a href=\"http:\/\/caml.inria.fr\/resources\/doc\/guides\/format.html\" >http:\/\/caml.inria.fr\/resources\/doc\/guides\/format.html<\/a>.<br><\/br>\n   You may consider this module as providing an extension to the\n   <span class=\"code\" >printf<\/span> facility to provide automatic line breaking. The addition of\n   pretty-printing annotations to your regular <span class=\"code\" >printf<\/span> formats gives you\n   fancy indentation and line breaks.\n   Pretty-printing annotations are described below in the documentation of\n   the function <a href=\"{value|Format.fprintf}\" ><span class=\"code\" >Format.fprintf<\/span><\/a>.<br><\/br>\n   You may also use the explicit box management and printing functions\n   provided by this module. This style is more basic but more verbose\n   than the <span class=\"code\" >fprintf<\/span> concise formats.<br><\/br>\n   For instance, the sequence\n   <span class=\"code\" >open_box 0; print_string \"x =\"; print_space ();\n    print_int 1; close_box (); print_newline ()<\/span>\n   that prints <span class=\"code\" >x = 1<\/span> within a pretty-printing box, can be\n   abbreviated as <span class=\"code\" >printf \"@[%s@ %i@]@.\" \"x =\" 1<\/span>, or even shorter\n   <span class=\"code\" >printf \"@[x =@ %i@]@.\" 1<\/span>.<br><\/br>\n   Rule of thumb for casual users of this library:<ul><li>use simple boxes (as obtained by <span class=\"code\" >open_box 0<\/span>);<\/li><li>use simple break hints (as obtained by <span class=\"code\" >print_cut ()<\/span> that outputs a\n   simple break hint, or by <span class=\"code\" >print_space ()<\/span> that outputs a space\n   indicating a break hint);<\/li><li>once a box is opened, display its material with basic printing\n   functions (e. g. <span class=\"code\" >print_int<\/span> and <span class=\"code\" >print_string<\/span>);<\/li><li>when the material for a box has been printed, call <span class=\"code\" >close_box ()<\/span> to\n   close the box;<\/li><li>at the end of your routine, flush the pretty-printer to display all the\n   remaining material, e.g. evaluate <span class=\"code\" >print_newline ()<\/span>.<\/li><\/ul>\n   The behaviour of pretty-printing commands is unspecified\n   if there is no opened pretty-printing box. Each box opened via\n   one of the <span class=\"code\" >open_<\/span> functions below must be closed using <span class=\"code\" >close_box<\/span>\n   for proper formatting. Otherwise, some of the material printed in the\n   boxes may not be output, or may be formatted incorrectly.<br><\/br>\n   In case of interactive use, the system closes all opened boxes and\n   flushes all pending text (as with the <span class=\"code\" >print_newline<\/span> function)\n   after each phrase. Each phrase is therefore executed in the initial\n   state of the pretty-printer.<br><\/br>\n   Warning: the material output by the following functions is delayed\n   in the pretty-printer queue in order to compute the proper line\n   breaking. Hence, you should not mix calls to the printing functions\n   of the basic I\/O system with calls to the functions of this module:\n   this could result in some strange output seemingly unrelated with\n   the evaluation order of printing commands."}, "type": "sig  end", "module_structure": [{"comment": "Pretty printing.<br><\/br>\n   This module implements a pretty-printing facility to format text\n   within ``pretty-printing boxes''. The pretty-printer breaks lines\n   at specified break hints, and indents lines according to the box\n   structure.<br><\/br>\n   For a gentle introduction to the basics of pretty-printing using\n   <span class=\"code\" >Format<\/span>, read\n   <a href=\"http:\/\/caml.inria.fr\/resources\/doc\/guides\/format.html\" >http:\/\/caml.inria.fr\/resources\/doc\/guides\/format.html<\/a>.<br><\/br>\n   You may consider this module as providing an extension to the\n   <span class=\"code\" >printf<\/span> facility to provide automatic line breaking. The addition of\n   pretty-printing annotations to your regular <span class=\"code\" >printf<\/span> formats gives you\n   fancy indentation and line breaks.\n   Pretty-printing annotations are described below in the documentation of\n   the function <a href=\"{value|Format.fprintf}\" ><span class=\"code\" >Format.fprintf<\/span><\/a>.<br><\/br>\n   You may also use the explicit box management and printing functions\n   provided by this module. This style is more basic but more verbose\n   than the <span class=\"code\" >fprintf<\/span> concise formats.<br><\/br>\n   For instance, the sequence\n   <span class=\"code\" >open_box 0; print_string \"x =\"; print_space ();\n    print_int 1; close_box (); print_newline ()<\/span>\n   that prints <span class=\"code\" >x = 1<\/span> within a pretty-printing box, can be\n   abbreviated as <span class=\"code\" >printf \"@[%s@ %i@]@.\" \"x =\" 1<\/span>, or even shorter\n   <span class=\"code\" >printf \"@[x =@ %i@]@.\" 1<\/span>.<br><\/br>\n   Rule of thumb for casual users of this library:<ul><li>use simple boxes (as obtained by <span class=\"code\" >open_box 0<\/span>);<\/li><li>use simple break hints (as obtained by <span class=\"code\" >print_cut ()<\/span> that outputs a\n   simple break hint, or by <span class=\"code\" >print_space ()<\/span> that outputs a space\n   indicating a break hint);<\/li><li>once a box is opened, display its material with basic printing\n   functions (e. g. <span class=\"code\" >print_int<\/span> and <span class=\"code\" >print_string<\/span>);<\/li><li>when the material for a box has been printed, call <span class=\"code\" >close_box ()<\/span> to\n   close the box;<\/li><li>at the end of your routine, flush the pretty-printer to display all the\n   remaining material, e.g. evaluate <span class=\"code\" >print_newline ()<\/span>.<\/li><\/ul>\n   The behaviour of pretty-printing commands is unspecified\n   if there is no opened pretty-printing box. Each box opened via\n   one of the <span class=\"code\" >open_<\/span> functions below must be closed using <span class=\"code\" >close_box<\/span>\n   for proper formatting. Otherwise, some of the material printed in the\n   boxes may not be output, or may be formatted incorrectly.<br><\/br>\n   In case of interactive use, the system closes all opened boxes and\n   flushes all pending text (as with the <span class=\"code\" >print_newline<\/span> function)\n   after each phrase. Each phrase is therefore executed in the initial\n   state of the pretty-printer.<br><\/br>\n   Warning: the material output by the following functions is delayed\n   in the pretty-printer queue in order to compute the proper line\n   breaking. Hence, you should not mix calls to the printing functions\n   of the basic I\/O system with calls to the functions of this module:\n   this could result in some strange output seemingly unrelated with\n   the evaluation order of printing commands."}, {"comment": "<h6>Boxes<\/h6>"}, {"value": {"name": "Format.open_box", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|3842"}, "info": {"description": "<span class=\"code\" >open_box d<\/span> opens a new pretty-printing box\n   with offset <span class=\"code\" >d<\/span>.\n   This box is the general purpose pretty-printing box.\n   Material in this box is displayed ``horizontal or vertical'':\n   break hints inside the box may lead to a new line, if there\n   is no more room on the line to print the remainder of the box,\n   or if a new line may lead to a new indentation\n   (demonstrating the indentation of the box).\n   When a new line is printed in the box, <span class=\"code\" >d<\/span> is added to the\n   current indentation."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Format.close_box", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|4377"}, "info": {"description": "Closes the most recently opened pretty-printing box."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Formatting functions<\/h6>"}, {"value": {"name": "Format.print_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|4502"}, "info": {"description": "<span class=\"code\" >print_string str<\/span> prints <span class=\"code\" >str<\/span> in the current box."}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Format.print_as", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|4598"}, "info": {"description": "<span class=\"code\" >print_as len str<\/span> prints <span class=\"code\" >str<\/span> in the\n   current box. The pretty-printer formats <span class=\"code\" >str<\/span> as if\n   it were of length <span class=\"code\" >len<\/span>."}, "type": "int -> string -> unit", "params": [{"name": "", "type": "int"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Format.print_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|4767"}, "info": {"description": "Prints an integer in the current box."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Format.print_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|4843"}, "info": {"description": "Prints a floating point number in the current box."}, "type": "float -> unit", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Format.print_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|4936"}, "info": {"description": "Prints a character in the current box."}, "type": "char -> unit", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Format.print_bool", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|5015"}, "info": {"description": "Prints a boolean in the current box."}, "type": "bool -> unit", "params": [{"name": "", "type": "bool"}]}}, {"comment": "<h6>Break hints<\/h6>"}, {"value": {"name": "Format.print_space", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|5116"}, "info": {"description": "<span class=\"code\" >print_space ()<\/span> is used to separate items (typically to print\n   a space between two words).\n   It indicates that the line may be split at this\n   point. It either prints one space or splits the line.\n   It is equivalent to <span class=\"code\" >print_break 1 0<\/span>."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.print_cut", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|5401"}, "info": {"description": "<span class=\"code\" >print_cut ()<\/span> is used to mark a good break position.\n   It indicates that the line may be split at this\n   point. It either prints nothing or splits the line.\n   This allows line splitting at the current\n   point, without printing spaces or adding indentation.\n   It is equivalent to <span class=\"code\" >print_break 0 0<\/span>."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.print_break", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|5744"}, "info": {"description": "Inserts a break hint in a pretty-printing box.\n   <span class=\"code\" >print_break nspaces offset<\/span> indicates that the line may\n   be split (a newline character is printed) at this point,\n   if the contents of the current box does not fit on the\n   current line.\n   If the line is split at that point, <span class=\"code\" >offset<\/span> is added to\n   the current indentation. If the line is not split,\n   <span class=\"code\" >nspaces<\/span> spaces are printed."}, "type": "int -> int -> unit", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.print_flush", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|6180"}, "info": {"description": "Flushes the pretty printer: all opened boxes are closed,\n   and all pending text is displayed."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.print_newline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|6316"}, "info": {"description": "Equivalent to <span class=\"code\" >print_flush<\/span> followed by a new line."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.force_newline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|6411"}, "info": {"description": "Forces a newline in the current box. Not the normal way of\n   pretty-printing, you should prefer break hints."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.print_if_newline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|6564"}, "info": {"description": "Executes the next formatting command if the preceding line\n   has just been split. Otherwise, ignore the next formatting\n   command."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Margin<\/h6>"}, {"value": {"name": "Format.set_margin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|6762"}, "info": {"description": "<span class=\"code\" >set_margin d<\/span> sets the value of the right margin\n   to <span class=\"code\" >d<\/span> (in characters): this value is used to detect line\n   overflows that leads to split lines.\n   Nothing happens if <span class=\"code\" >d<\/span> is smaller than 2.\n   If <span class=\"code\" >d<\/span> is too large, the right margin is set to the maximum\n   admissible value (which is greater than <span class=\"code\" >10^10<\/span>)."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Format.get_margin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|7113"}, "info": {"description": "Returns the position of the right margin."}, "type": "unit -> int", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Maximum indentation limit<\/h6>"}, {"value": {"name": "Format.set_max_indent", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|7232"}, "info": {"description": "<span class=\"code\" >set_max_indent d<\/span> sets the value of the maximum\n   indentation limit to <span class=\"code\" >d<\/span> (in characters):\n   once this limit is reached, boxes are rejected to the left,\n   if they do not fit on the current line.\n   Nothing happens if <span class=\"code\" >d<\/span> is smaller than 2.\n   If <span class=\"code\" >d<\/span> is too large, the limit is set to the maximum\n   admissible value (which is greater than <span class=\"code\" >10^10<\/span>)."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Format.get_max_indent", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|7629"}, "info": {"description": "Return the value of the maximum indentation limit (in characters)."}, "type": "unit -> int", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Formatting depth: maximum number of boxes allowed before ellipsis<\/h6>"}, {"value": {"name": "Format.set_max_boxes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|7817"}, "info": {"description": "<span class=\"code\" >set_max_boxes max<\/span> sets the maximum number\n   of boxes simultaneously opened.\n   Material inside boxes nested deeper is printed as an\n   ellipsis (more precisely as the text returned by\n   <span class=\"code\" >get_ellipsis_text ()<\/span>).\n   Nothing happens if <span class=\"code\" >max<\/span> is smaller than 2."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Format.get_max_boxes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|8121"}, "info": {"description": "Returns the maximum number of boxes allowed before ellipsis."}, "type": "unit -> int", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.over_max_boxes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|8224"}, "info": {"description": "Tests if the maximum number of boxes allowed have already been opened."}, "type": "unit -> bool", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Advanced formatting<\/h6>"}, {"value": {"name": "Format.open_hbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|8371"}, "info": {"description": "<span class=\"code\" >open_hbox ()<\/span> opens a new pretty-printing box.\n   This box is ``horizontal'': the line is not split in this box\n   (new lines may still occur inside boxes nested deeper)."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.open_vbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|8582"}, "info": {"description": "<span class=\"code\" >open_vbox d<\/span> opens a new pretty-printing box\n   with offset <span class=\"code\" >d<\/span>.\n   This box is ``vertical'': every break hint inside this\n   box leads to a new line.\n   When a new line is printed in the box, <span class=\"code\" >d<\/span> is added to the\n   current indentation."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Format.open_hvbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|8858"}, "info": {"description": "<span class=\"code\" >open_hvbox d<\/span> opens a new pretty-printing box\n   with offset <span class=\"code\" >d<\/span>.\n   This box is ``horizontal-vertical'': it behaves as an\n   ``horizontal'' box if it fits on a single line,\n   otherwise it behaves as a ``vertical'' box.\n   When a new line is printed in the box, <span class=\"code\" >d<\/span> is added to the\n   current indentation."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Format.open_hovbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|9205"}, "info": {"description": "<span class=\"code\" >open_hovbox d<\/span> opens a new pretty-printing box\n   with offset <span class=\"code\" >d<\/span>.\n   This box is ``horizontal or vertical'': break hints\n   inside this box may lead to a new line, if there is no more room\n   on the line to print the remainder of the box.\n   When a new line is printed in the box, <span class=\"code\" >d<\/span> is added to the\n   current indentation."}, "type": "int -> unit", "params": [{"name": "", "type": "int"}]}}, {"comment": "<h6>Tabulations<\/h6>"}, {"value": {"name": "Format.open_tbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|9596"}, "info": {"description": "Opens a tabulation box."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.close_tbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|9659"}, "info": {"description": "Closes the most recently opened tabulation box."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.print_tbreak", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|9747"}, "info": {"description": "Break hint in a tabulation box.\n   <span class=\"code\" >print_tbreak spaces offset<\/span> moves the insertion point to\n   the next tabulation (<span class=\"code\" >spaces<\/span> being added to this position).\n   Nothing occurs if insertion point is already on a\n   tabulation mark.\n   If there is no next tabulation on the line, then a newline\n   is printed and the insertion point moves to the first\n   tabulation of the box.\n   If a new line is printed, <span class=\"code\" >offset<\/span> is added to the current\n   indentation."}, "type": "int -> int -> unit", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.set_tab", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|10248"}, "info": {"description": "Sets a tabulation mark at the current insertion point."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.print_tab", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|10340"}, "info": {"description": "<span class=\"code\" >print_tab ()<\/span> is equivalent to <span class=\"code\" >print_tbreak 0 0<\/span>."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Ellipsis<\/h6>"}, {"value": {"name": "Format.set_ellipsis_text", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|10452"}, "info": {"description": "Set the text of the ellipsis printed when too many boxes\n   are opened (a single dot, <span class=\"code\" >.<\/span>, by default)."}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Format.get_ellipsis_text", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|10605"}, "info": {"description": "Return the text of the ellipsis."}, "type": "unit -> string", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Semantics Tags<\/h6>"}, {"type": {"name": "Format.tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|10730"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"comment": "<i>Semantics tags<\/i> (or simply <em>tags<\/em>) are used to decorate printed\n   entities for user's defined purposes, e.g. setting font and giving size\n   indications for a display device, or marking delimitation of semantics\n   entities (e.g. HTML or TeX elements or terminal escape sequences).<br><\/br>\n   By default, those tags do not influence line breaking calculation:\n   the tag ``markers'' are not considered as part of the printing\n   material that drives line breaking (in other words, the length of\n   those strings is considered as zero for line breaking).<br><\/br>\n   Thus, tag handling is in some sense transparent to pretty-printing\n   and does not interfere with usual pretty-printing. Hence, a single\n   pretty printing routine can output both simple ``verbatim''\n   material or richer decorated output depending on the treatment of\n   tags. By default, tags are not active, hence the output is not\n   decorated with tag information. Once <span class=\"code\" >set_tags<\/span> is set to <span class=\"code\" >true<\/span>,\n   the pretty printer engine honours tags and decorates the output\n   accordingly.<br><\/br>\n   When a tag has been opened (or closed), it is both and successively\n   ``printed'' and ``marked''. Printing a tag means calling a\n   formatter specific function with the name of the tag as argument:\n   that ``tag printing'' function can then print any regular material\n   to the formatter (so that this material is enqueued as usual in the\n   formatter queue for further line-breaking computation). Marking a\n   tag means to output an arbitrary string (the ``tag marker''),\n   directly into the output device of the formatter. Hence, the\n   formatter specific ``tag marking'' function must return the tag\n   marker string associated to its tag argument. Being flushed\n   directly into the output device of the formatter, tag marker\n   strings are not considered as part of the printing material that\n   drives line breaking (in other words, the length of the strings\n   corresponding to tag markers is considered as zero for line\n   breaking). In addition, advanced users may take advantage of\n   the specificity of tag markers to be precisely output when the\n   pretty printer has already decided where to break the lines, and\n   precisely when the queue is flushed into the output device.<br><\/br>\n   In the spirit of HTML tags, the default tag marking functions\n   output tags enclosed in \"&lt;\" and \"&gt;\": hence, the opening marker of\n   tag <span class=\"code\" >t<\/span> is <span class=\"code\" >\"&lt;t&gt;\"<\/span> and the closing marker <span class=\"code\" >\"&lt;\/t&gt;\"<\/span>.<br><\/br>\n   Default tag printing functions just do nothing.<br><\/br>\n   Tag marking and tag printing functions are user definable and can\n   be set by calling <span class=\"code\" >set_formatter_tag_functions<\/span>."}, {"value": {"name": "Format.open_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|13351"}, "info": {"description": "<span class=\"code\" >open_tag t<\/span> opens the tag named <span class=\"code\" >t<\/span>; the <span class=\"code\" >print_open_tag<\/span>\n   function of the formatter is called with <span class=\"code\" >t<\/span> as argument;\n   the tag marker <span class=\"code\" >mark_open_tag t<\/span> will be flushed into the output\n   device of the formatter."}, "type": "Format.tag -> unit", "params": [{"name": "", "type": "Format.tag"}]}}, {"value": {"name": "Format.close_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|13603"}, "info": {"description": "<span class=\"code\" >close_tag ()<\/span> closes the most recently opened tag <span class=\"code\" >t<\/span>.\n   In addition, the <span class=\"code\" >print_close_tag<\/span> function of the formatter is called\n   with <span class=\"code\" >t<\/span> as argument. The marker <span class=\"code\" >mark_close_tag t<\/span> will be flushed\n   into the output device of the formatter."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.set_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|13887"}, "info": {"description": "<span class=\"code\" >set_tags b<\/span> turns on or off the treatment of tags (default is off)."}, "type": "bool -> unit", "params": [{"name": "", "type": "bool"}]}}, {"value": {"name": "Format.set_print_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|13993"}, "info": "", "type": "bool -> unit", "params": [{"name": "", "type": "bool"}]}}, {"value": {"name": "Format.set_mark_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|14029"}, "info": {"description": "<span class=\"code\" >set_print_tags b<\/span> turns on or off the printing of tags, while\n    <span class=\"code\" >set_mark_tags b<\/span> turns on or off the output of tag markers."}, "type": "bool -> unit", "params": [{"name": "", "type": "bool"}]}}, {"value": {"name": "Format.get_print_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|14199"}, "info": "", "type": "unit -> bool", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.get_mark_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|14235"}, "info": {"description": "Return the current status of tags printing and tags marking."}, "type": "unit -> bool", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Redirecting the standard formatter output<\/h6>"}, {"value": {"name": "Format.set_formatter_out_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|14393"}, "info": {"description": "Redirect the pretty-printer output to the given channel.\n    (All the output functions of the standard formatter are set to the\n     default output functions printing to the given channel.)"}, "type": "Pervasives.out_channel -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Format.set_formatter_output_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|14656"}, "info": {"description": "<span class=\"code\" >set_formatter_output_functions out flush<\/span> redirects the\n   relevant pretty-printer output functions to the functions <span class=\"code\" >out<\/span> and\n   <span class=\"code\" >flush<\/span>.<br><\/br>\n   The <span class=\"code\" >out<\/span> function performs the pretty-printer string output. It is called\n   with a string <span class=\"code\" >s<\/span>, a start position <span class=\"code\" >p<\/span>, and a number of characters\n   <span class=\"code\" >n<\/span>; it is supposed to output characters <span class=\"code\" >p<\/span> to <span class=\"code\" >p + n - 1<\/span> of\n   <span class=\"code\" >s<\/span>. The <span class=\"code\" >flush<\/span> function is called whenever the pretty-printer is\n   flushed (via conversion <span class=\"code\" >%!<\/span>, pretty-printing indications <span class=\"code\" >@?<\/span> or <span class=\"code\" >@.<\/span>,\n   or using low level function <span class=\"code\" >print_flush<\/span> or <span class=\"code\" >print_newline<\/span>)."}, "type": "(string -> int -> int -> unit) -> (unit -> unit) -> unit", "params": [{"name": "", "type": "string -> int -> int -> unit"}, {"name": "", "type": "unit -> unit"}]}}, {"value": {"name": "Format.get_formatter_output_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|15330"}, "info": {"description": "Return the current output functions of the pretty-printer."}, "type": "unit -> (string -> int -> int -> unit) * (unit -> unit)", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Changing the meaning of standard formatter pretty printing<\/h6>"}, {"comment": "The <span class=\"code\" >Format<\/span> module is versatile enough to let you completely redefine\n the meaning of pretty printing: you may provide your own functions to define\n how to handle indentation, line breaking, and even printing of all the\n characters that have to be printed!"}, {"value": {"name": "Format.set_all_formatter_output_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|15840"}, "info": {"description": "<span class=\"code\" >set_all_formatter_output_functions out flush outnewline outspace<\/span>\n   redirects the pretty-printer output to the functions <span class=\"code\" >out<\/span> and\n   <span class=\"code\" >flush<\/span> as described in <span class=\"code\" >set_formatter_output_functions<\/span>. In\n   addition, the pretty-printer function that outputs a newline is set\n   to the function <span class=\"code\" >outnewline<\/span> and the function that outputs\n   indentation spaces is set to the function <span class=\"code\" >outspace<\/span>.<br><\/br>\n   This way, you can change the meaning of indentation (which can be\n   something else than just printing space characters) and the\n   meaning of new lines opening (which can be connected to any other\n   action needed by the application at hand). The two functions\n   <span class=\"code\" >outspace<\/span> and <span class=\"code\" >outnewline<\/span> are normally connected to <span class=\"code\" >out<\/span> and\n   <span class=\"code\" >flush<\/span>: respective default values for <span class=\"code\" >outspace<\/span> and <span class=\"code\" >outnewline<\/span>\n   are <span class=\"code\" >out (String.make n ' ') 0 n<\/span> and <span class=\"code\" >out \"\\n\" 0 1<\/span>."}, "type": "out:(string -> int -> int -> unit) ->\n  flush:(unit -> unit) ->\n  newline:(unit -> unit) -> spaces:(int -> unit) -> unit", "params": [{"name": "out", "type": "string -> int -> int -> unit"}, {"name": "flush", "type": "unit -> unit"}, {"name": "newline", "type": "unit -> unit"}, {"name": "spaces", "type": "int -> unit"}]}}, {"value": {"name": "Format.get_all_formatter_output_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|16866"}, "info": {"description": "Return the current output functions of the pretty-printer,\n   including line breaking and indentation functions. Useful to record the\n   current setting and restore it afterwards."}, "type": "unit ->\n  (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *\n  (int -> unit)", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Changing the meaning of printing semantics tags<\/h6>"}, {"type": {"name": "Format.formatter_tag_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|17293"}, "info": {"description": "The tag handling functions specific to a formatter:\n   <span class=\"code\" >mark<\/span> versions are the ``tag marking'' functions that associate a string\n   marker to a tag in order for the pretty-printing engine to flush\n   those markers as 0 length tokens in the output device of the formatter.\n   <span class=\"code\" >print<\/span> versions are the ``tag printing'' functions that can perform\n   regular printing when a tag is closed or opened."}, "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "mark_open_tag", "mutable": false, "type": "Format.tag -> string"}, {"name": "mark_close_tag", "mutable": false, "type": "Format.tag -> string"}, {"name": "print_open_tag", "mutable": false, "type": "Format.tag -> unit"}, {"name": "print_close_tag", "mutable": false, "type": "Format.tag -> unit"}]}}}, {"value": {"name": "Format.set_formatter_tag_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|17836"}, "info": "", "type": "Format.formatter_tag_functions -> unit", "params": [{"name": "", "type": "Format.formatter_tag_functions"}]}}, {"comment": "<span class=\"code\" >set_formatter_tag_functions tag_funs<\/span> changes the meaning of\n   opening and closing tags to use the functions in <span class=\"code\" >tag_funs<\/span>.<br><\/br>\n   When opening a tag name <span class=\"code\" >t<\/span>, the string <span class=\"code\" >t<\/span> is passed to the\n   opening tag marking function (the <span class=\"code\" >mark_open_tag<\/span> field of the\n   record <span class=\"code\" >tag_funs<\/span>), that must return the opening tag marker for\n   that name. When the next call to <span class=\"code\" >close_tag ()<\/span> happens, the tag\n   name <span class=\"code\" >t<\/span> is sent back to the closing tag marking function (the\n   <span class=\"code\" >mark_close_tag<\/span> field of record <span class=\"code\" >tag_funs<\/span>), that must return a\n   closing tag marker for that name.<br><\/br>\n   The <span class=\"code\" >print_<\/span> field of the record contains the functions that are\n   called at tag opening and tag closing time, to output regular\n   material in the pretty-printer queue."}, {"value": {"name": "Format.get_formatter_tag_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|18654"}, "info": {"description": "Return the current tag functions of the pretty-printer."}, "type": "unit -> Format.formatter_tag_functions", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h6>Multiple formatted output<\/h6>"}, {"type": {"name": "Format.formatter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|18841"}, "info": {"description": "Abstract data corresponding to a pretty-printer (also called a\n  formatter) and all its machinery.<br><\/br>\n  Defining new pretty-printers permits unrelated output of material in\n  parallel on several output channels.\n  All the parameters of a pretty-printer are local to this pretty-printer:\n  margin, maximum indentation limit, maximum number of boxes\n  simultaneously opened, ellipsis, and so on, are specific to\n  each pretty-printer and may be fixed independently.\n  Given a <span class=\"code\" >Pervasives.out_channel<\/span> output channel <span class=\"code\" >oc<\/span>, a new formatter\n  writing to that channel is simply obtained by calling\n  <span class=\"code\" >formatter_of_out_channel oc<\/span>.\n  Alternatively, the <span class=\"code\" >make_formatter<\/span> function allocates a new\n  formatter with explicit output and flushing functions\n  (convenient to output material to strings for instance)."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Format.formatter_of_out_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|19653"}, "info": {"description": "<span class=\"code\" >formatter_of_out_channel oc<\/span> returns a new formatter that\n   writes to the corresponding channel <span class=\"code\" >oc<\/span>."}, "type": "Pervasives.out_channel -> Format.formatter", "params": [{"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Format.std_formatter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|19823"}, "info": {"description": "The standard formatter used by the formatting functions\n   above. It is defined as <span class=\"code\" >formatter_of_out_channel stdout<\/span>."}, "type": "Format.formatter", "params": []}}, {"value": {"name": "Format.err_formatter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|19981"}, "info": {"description": "A formatter to use with formatting functions below for\n   output to standard error. It is defined as\n   <span class=\"code\" >formatter_of_out_channel stderr<\/span>."}, "type": "Format.formatter", "params": []}}, {"value": {"name": "Format.formatter_of_buffer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|20160"}, "info": {"description": "<span class=\"code\" >formatter_of_buffer b<\/span> returns a new formatter writing to\n   buffer <span class=\"code\" >b<\/span>. As usual, the formatter has to be flushed at\n   the end of pretty printing, using <span class=\"code\" >pp_print_flush<\/span> or\n   <span class=\"code\" >pp_print_newline<\/span>, to display all the pending material."}, "type": "Buffer.t -> Format.formatter", "params": [{"name": "", "type": "Buffer.t"}]}}, {"value": {"name": "Format.stdbuf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|20454"}, "info": {"description": "The string buffer in which <span class=\"code\" >str_formatter<\/span> writes."}, "type": "Buffer.t", "params": []}}, {"value": {"name": "Format.str_formatter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|20537"}, "info": {"description": "A formatter to use with formatting functions below for\n   output to the <span class=\"code\" >stdbuf<\/span> string buffer.\n   <span class=\"code\" >str_formatter<\/span> is defined as <span class=\"code\" >formatter_of_buffer stdbuf<\/span>."}, "type": "Format.formatter", "params": []}}, {"value": {"name": "Format.flush_str_formatter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|20736"}, "info": {"description": "Returns the material printed with <span class=\"code\" >str_formatter<\/span>, flushes\n   the formatter and resets the corresponding buffer."}, "type": "unit -> string", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Format.make_formatter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|20900"}, "info": {"description": "<span class=\"code\" >make_formatter out flush<\/span> returns a new formatter that writes according\n  to the output function <span class=\"code\" >out<\/span>, and the flushing function <span class=\"code\" >flush<\/span>. For\n  instance, a formatter to the <span class=\"code\" >Pervasives.out_channel<\/span> <span class=\"code\" >oc<\/span> is returned by\n  <span class=\"code\" >make_formatter (Pervasives.output oc) (fun () -&gt; Pervasives.flush oc)<\/span>."}, "type": "(string -> int -> int -> unit) -> (unit -> unit) -> Format.formatter", "params": [{"name": "", "type": "string -> int -> int -> unit"}, {"name": "", "type": "unit -> unit"}]}}, {"comment": "<h6>Basic functions to use with formatters<\/h6>"}, {"value": {"name": "Format.pp_open_hbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21342"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_open_vbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21389"}, "info": "", "type": "Format.formatter -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_open_hvbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21435"}, "info": "", "type": "Format.formatter -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_open_hovbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21482"}, "info": "", "type": "Format.formatter -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_open_box", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21530"}, "info": "", "type": "Format.formatter -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_close_box", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21575"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_open_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21622"}, "info": "", "type": "Format.formatter -> string -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Format.pp_close_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21670"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_print_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21717"}, "info": "", "type": "Format.formatter -> string -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Format.pp_print_as", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21769"}, "info": "", "type": "Format.formatter -> int -> string -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Format.pp_print_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21824"}, "info": "", "type": "Format.formatter -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_print_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21870"}, "info": "", "type": "Format.formatter -> float -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "float"}]}}, {"value": {"name": "Format.pp_print_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21920"}, "info": "", "type": "Format.formatter -> char -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Format.pp_print_bool", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|21968"}, "info": "", "type": "Format.formatter -> bool -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Format.pp_print_break", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22016"}, "info": "", "type": "Format.formatter -> int -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_print_cut", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22071"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_print_space", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22118"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_force_newline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22167"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_print_flush", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22218"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_print_newline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22267"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_print_if_newline", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22318"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_open_tbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22372"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_close_tbox", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22419"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_print_tbreak", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22467"}, "info": "", "type": "Format.formatter -> int -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_set_tab", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22523"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_print_tab", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22568"}, "info": "", "type": "Format.formatter -> unit -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_set_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22615"}, "info": "", "type": "Format.formatter -> bool -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Format.pp_set_print_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22661"}, "info": "", "type": "Format.formatter -> bool -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Format.pp_set_mark_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22713"}, "info": "", "type": "Format.formatter -> bool -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Format.pp_get_print_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22764"}, "info": "", "type": "Format.formatter -> unit -> bool", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_get_mark_tags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22816"}, "info": "", "type": "Format.formatter -> unit -> bool", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_set_margin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22867"}, "info": "", "type": "Format.formatter -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_get_margin", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22914"}, "info": "", "type": "Format.formatter -> unit -> int", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_set_max_indent", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|22961"}, "info": "", "type": "Format.formatter -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_get_max_indent", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23012"}, "info": "", "type": "Format.formatter -> unit -> int", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_set_max_boxes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23063"}, "info": "", "type": "Format.formatter -> int -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Format.pp_get_max_boxes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23113"}, "info": "", "type": "Format.formatter -> unit -> int", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_over_max_boxes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23163"}, "info": "", "type": "Format.formatter -> unit -> bool", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_set_ellipsis_text", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23215"}, "info": "", "type": "Format.formatter -> string -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Format.pp_get_ellipsis_text", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23272"}, "info": "", "type": "Format.formatter -> unit -> string", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_set_formatter_out_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23329"}, "info": "", "type": "Format.formatter -> Pervasives.out_channel -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "Pervasives.out_channel"}]}}, {"value": {"name": "Format.pp_set_formatter_output_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23410"}, "info": "", "type": "Format.formatter -> (string -> int -> int -> unit) -> (unit -> unit) -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "string -> int -> int -> unit"}, {"name": "", "type": "unit -> unit"}]}}, {"value": {"name": "Format.pp_get_formatter_output_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23525"}, "info": "", "type": "Format.formatter -> unit -> (string -> int -> int -> unit) * (unit -> unit)", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_set_all_formatter_output_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23639"}, "info": "", "type": "Format.formatter ->\n  out:(string -> int -> int -> unit) ->\n  flush:(unit -> unit) ->\n  newline:(unit -> unit) -> spaces:(int -> unit) -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "out", "type": "string -> int -> int -> unit"}, {"name": "flush", "type": "unit -> unit"}, {"name": "newline", "type": "unit -> unit"}, {"name": "spaces", "type": "int -> unit"}]}}, {"value": {"name": "Format.pp_get_all_formatter_output_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23820"}, "info": "", "type": "Format.formatter ->\n  unit ->\n  (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *\n  (int -> unit)", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Format.pp_set_formatter_tag_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|23975"}, "info": "", "type": "Format.formatter -> Format.formatter_tag_functions -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "Format.formatter_tag_functions"}]}}, {"value": {"name": "Format.pp_get_formatter_tag_functions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|24062"}, "info": {"description": "These functions are the basic ones: usual functions\n   operating on the standard formatter are defined via partial\n   evaluation of these primitives. For instance,\n   <span class=\"code\" >print_string<\/span> is equal to <span class=\"code\" >pp_print_string std_formatter<\/span>."}, "type": "Format.formatter -> unit -> Format.formatter_tag_functions", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "unit"}]}}, {"comment": "<h6><span class=\"code\" >printf<\/span> like functions for pretty-printing.<\/h6>"}, {"value": {"name": "Format.fprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|24441"}, "info": "", "type": "Format.formatter -> ('a, Format.formatter, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "('a, Format.formatter, unit) Pervasives.format"}]}}, {"comment": "<span class=\"code\" >fprintf ff fmt arg1 ... argN<\/span> formats the arguments <span class=\"code\" >arg1<\/span> to <span class=\"code\" >argN<\/span>\n   according to the format string <span class=\"code\" >fmt<\/span>, and outputs the resulting string on\n   the formatter <span class=\"code\" >ff<\/span>.<br><\/br>\n   The format <span class=\"code\" >fmt<\/span> is a character string which contains three types of\n   objects: plain characters and conversion specifications as specified in\n   the <span class=\"code\" >Printf<\/span> module, and pretty-printing indications specific to the\n   <span class=\"code\" >Format<\/span> module.<br><\/br>\n   The pretty-printing indication characters are introduced by\n   a <span class=\"code\" >@<\/span> character, and their meanings are:<ul><li><span class=\"code\" >@[<\/span>: open a pretty-printing box. The type and offset of the\n     box may be optionally specified with the following syntax:\n     the <span class=\"code\" >&lt;<\/span> character, followed by an optional box type indication,\n     then an optional integer offset, and the closing <span class=\"code\" >&gt;<\/span> character.\n     Box type is one of <span class=\"code\" >h<\/span>, <span class=\"code\" >v<\/span>, <span class=\"code\" >hv<\/span>, <span class=\"code\" >b<\/span>, or <span class=\"code\" >hov<\/span>,\n     which stand respectively for an horizontal box, a vertical box,\n     an ``horizontal-vertical'' box, or an ``horizontal or\n     vertical'' box (<span class=\"code\" >b<\/span> standing for an ``horizontal or\n     vertical'' box demonstrating indentation and <span class=\"code\" >hov<\/span> standing\n     for a regular``horizontal or vertical'' box).\n     For instance, <span class=\"code\" >@[&lt;hov 2&gt;<\/span> opens an ``horizontal or vertical''\n     box with indentation 2 as obtained with <span class=\"code\" >open_hovbox 2<\/span>.\n     For more details about boxes, see the various box opening\n     functions <span class=\"code\" >open_*box<\/span>.<\/li><li><span class=\"code\" >@]<\/span>: close the most recently opened pretty-printing box.<\/li><li><span class=\"code\" >@,<\/span>: output a good break as with <span class=\"code\" >print_cut ()<\/span>.<\/li><li><span class=\"code\" >@ <\/span>: output a space, as with <span class=\"code\" >print_space ()<\/span>.<\/li><li><span class=\"code\" >@\\n<\/span>: force a newline, as with <span class=\"code\" >force_newline ()<\/span>.<\/li><li><span class=\"code\" >@;<\/span>: output a good break as with <span class=\"code\" >print_break<\/span>. The\n     <span class=\"code\" >nspaces<\/span> and <span class=\"code\" >offset<\/span> parameters of the break may be\n     optionally specified with the following syntax:\n     the <span class=\"code\" >&lt;<\/span> character, followed by an integer <span class=\"code\" >nspaces<\/span> value,\n     then an integer <span class=\"code\" >offset<\/span>, and a closing <span class=\"code\" >&gt;<\/span> character.\n     If no parameters are provided, the good break defaults to a\n     space.<\/li><li><span class=\"code\" >@?<\/span>: flush the pretty printer as with <span class=\"code\" >print_flush ()<\/span>.\n     This is equivalent to the conversion <span class=\"code\" >%!<\/span>.<\/li><li><span class=\"code\" >@.<\/span>: flush the pretty printer and output a new line, as with\n     <span class=\"code\" >print_newline ()<\/span>.<\/li><li><span class=\"code\" >@&lt;n&gt;<\/span>: print the following item as if it were of length <span class=\"code\" >n<\/span>.\n     Hence, <span class=\"code\" >printf \"@&lt;0&gt;%s\" arg<\/span> is equivalent to <span class=\"code\" >print_as 0 arg<\/span>.\n     If <span class=\"code\" >@&lt;n&gt;<\/span> is not followed by a conversion specification,\n     then the following character of the format is printed as if\n     it were of length <span class=\"code\" >n<\/span>.<\/li><li><span class=\"code\" >@{<\/span>: open a tag. The name of the tag may be optionally\n     specified with the following syntax:\n     the <span class=\"code\" >&lt;<\/span> character, followed by an optional string\n     specification, and the closing <span class=\"code\" >&gt;<\/span> character. The string\n     specification is any character string that does not contain the\n     closing character <span class=\"code\" >'&gt;'<\/span>. If omitted, the tag name defaults to the\n     empty string.\n     For more details about tags, see the functions <span class=\"code\" >open_tag<\/span> and\n     <span class=\"code\" >close_tag<\/span>.<\/li><li><span class=\"code\" >@}<\/span>: close the most recently opened tag.<\/li><li><span class=\"code\" >@@<\/span>: print a plain <span class=\"code\" >@<\/span> character.<\/li><\/ul>\n   Example: <span class=\"code\" >printf \"@[%s@ %d@]@.\" \"x =\" 1<\/span> is equivalent to\n   <span class=\"code\" >open_box (); print_string \"x =\"; print_space ();\n    print_int 1; close_box (); print_newline ()<\/span>.\n   It prints <span class=\"code\" >x = 1<\/span> within a pretty-printing box."}, {"value": {"name": "Format.printf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|27740"}, "info": {"description": "Same as <span class=\"code\" >fprintf<\/span> above, but output on <span class=\"code\" >std_formatter<\/span>."}, "type": "('a, Format.formatter, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "('a, Format.formatter, unit) Pervasives.format"}]}}, {"value": {"name": "Format.eprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|27854"}, "info": {"description": "Same as <span class=\"code\" >fprintf<\/span> above, but output on <span class=\"code\" >err_formatter<\/span>."}, "type": "('a, Format.formatter, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "('a, Format.formatter, unit) Pervasives.format"}]}}, {"value": {"name": "Format.sprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|27969"}, "info": {"description": "Same as <span class=\"code\" >printf<\/span> above, but instead of printing on a formatter,\n   returns a string containing the result of formatting the arguments.\n   Note that the pretty-printer queue is flushed at the end of <em>each\n   call<\/em> to <span class=\"code\" >sprintf<\/span>.<br><\/br>\n   In case of multiple and related calls to <span class=\"code\" >sprintf<\/span> to output\n   material on a single string, you should consider using <span class=\"code\" >fprintf<\/span>\n   with the predefined formatter <span class=\"code\" >str_formatter<\/span> and call\n   <span class=\"code\" >flush_str_formatter ()<\/span> to get the final result.<br><\/br>\n   Alternatively, you can use <span class=\"code\" >Format.fprintf<\/span> with a formatter writing to a\n   buffer of your own: flushing the formatter and the buffer at the end of\n   pretty-printing returns the desired string."}, "type": "('a, unit, string) Pervasives.format -> 'a", "params": [{"name": "", "type": "('a, unit, string) Pervasives.format"}]}}, {"value": {"name": "Format.ifprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|28698"}, "info": {"description": "Same as <span class=\"code\" >fprintf<\/span> above, but does not print anything.\n   Useful to ignore some material when conditionally printing.", "since": "3.10.0"}, "type": "Format.formatter -> ('a, Format.formatter, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "('a, Format.formatter, unit) Pervasives.format"}]}}, {"comment": "Formatted output functions with continuations."}, {"value": {"name": "Format.kfprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|28960"}, "info": {"description": "Same as <span class=\"code\" >fprintf<\/span> above, but instead of returning immediately,\n   passes the formatter to its first argument at the end of printing."}, "type": "(Format.formatter -> 'a) ->\n  Format.formatter -> ('b, Format.formatter, unit, 'a) Pervasives.format4 -> 'b", "params": [{"name": "", "type": "Format.formatter -> 'a"}, {"name": "", "type": "Format.formatter"}, {"name": "", "type": "('a, Format.formatter, unit, 'b) Pervasives.format4"}]}}, {"value": {"name": "Format.ikfprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|29207"}, "info": {"description": "Same as <span class=\"code\" >kfprintf<\/span> above, but does not print anything.\n   Useful to ignore some material when conditionally printing.", "since": "3.12.0"}, "type": "(Format.formatter -> 'a) ->\n  Format.formatter -> ('b, Format.formatter, unit, 'a) Pervasives.format4 -> 'b", "params": [{"name": "", "type": "Format.formatter -> 'a"}, {"name": "", "type": "Format.formatter"}, {"name": "", "type": "('a, Format.formatter, unit, 'b) Pervasives.format4"}]}}, {"value": {"name": "Format.ksprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|29457"}, "info": {"description": "Same as <span class=\"code\" >sprintf<\/span> above, but instead of returning the string,\n   passes it to the first argument."}, "type": "(string -> 'a) -> ('b, unit, string, 'a) Pervasives.format4 -> 'b", "params": [{"name": "", "type": "string -> 'a"}, {"name": "", "type": "('a, unit, string, 'b) Pervasives.format4"}]}}, {"comment": "<h6>Deprecated<\/h6>"}, {"value": {"name": "Format.bprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|29658"}, "info": {"description": "Deprecated and error prone function. Do not use it.<br><\/br>\n  If you need to print to some buffer <span class=\"code\" >b<\/span>, you must first define a\n  formatter writing to <span class=\"code\" >b<\/span>, using <span class=\"code\" >let to_b = formatter_of_buffer b<\/span>; then\n  use regular calls to <span class=\"code\" >Format.fprintf<\/span> on formatter <span class=\"code\" >to_b<\/span>."}, "type": "Buffer.t -> ('a, Format.formatter, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "('a, Format.formatter, unit) Pervasives.format"}]}}, {"value": {"name": "Format.kprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/format.mli|29985"}, "info": {"description": "Deprecated name. A synonym for <span class=\"code\" >ksprintf<\/span>."}, "type": "(string -> 'a) -> ('b, unit, string, 'a) Pervasives.format4 -> 'b", "params": [{"name": "", "type": "string -> 'a"}, {"name": "", "type": "('a, unit, string, 'b) Pervasives.format4"}]}}], "dependencies": {"uses": ["Pervasives", "Buffer"], "used_by": ["Regexp", "OUnit"]}}}, "Printf": {"module": {"name": "Printf", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|0"}, "info": {"description": "Formatted output functions."}, "type": "sig  end", "module_structure": [{"comment": "Formatted output functions."}, {"value": {"name": "Printf.fprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|1001"}, "info": {"description": "<span class=\"code\" >fprintf outchan format arg1 ... argN<\/span> formats the arguments\n   <span class=\"code\" >arg1<\/span> to <span class=\"code\" >argN<\/span> according to the format string <span class=\"code\" >format<\/span>, and\n   outputs the resulting string on the channel <span class=\"code\" >outchan<\/span>.<br><\/br>\n   The format is a character string which contains two types of\n   objects: plain characters, which are simply copied to the output\n   channel, and conversion specifications, each of which causes\n   conversion and printing of arguments.<br><\/br>\n   Conversion specifications have the following form:<br><\/br>\n   <span class=\"code\" >% [flags] [width] [.precision] type<\/span><br><\/br>\n   In short, a conversion specification consists in the <span class=\"code\" >%<\/span> character,\n   followed by optional modifiers and a type which is made of one or\n   two characters. The types and their meanings are:<br><\/br><ul><li><span class=\"code\" >d<\/span>, <span class=\"code\" >i<\/span>, <span class=\"code\" >n<\/span>, <span class=\"code\" >l<\/span>, <span class=\"code\" >L<\/span>, or <span class=\"code\" >N<\/span>: convert an integer argument to\n     signed decimal.<\/li><li><span class=\"code\" >u<\/span>: convert an integer argument to unsigned decimal.<\/li><li><span class=\"code\" >x<\/span>: convert an integer argument to unsigned hexadecimal,\n     using lowercase letters.<\/li><li><span class=\"code\" >X<\/span>: convert an integer argument to unsigned hexadecimal,\n     using uppercase letters.<\/li><li><span class=\"code\" >o<\/span>: convert an integer argument to unsigned octal.<\/li><li><span class=\"code\" >s<\/span>: insert a string argument.<\/li><li><span class=\"code\" >S<\/span>: insert a string argument in Caml syntax (double quotes, escapes).<\/li><li><span class=\"code\" >c<\/span>: insert a character argument.<\/li><li><span class=\"code\" >C<\/span>: insert a character argument in Caml syntax (single quotes, escapes).<\/li><li><span class=\"code\" >f<\/span>: convert a floating-point argument to decimal notation,\n     in the style <span class=\"code\" >dddd.ddd<\/span>.<\/li><li><span class=\"code\" >F<\/span>: convert a floating-point argument to Caml syntax (<span class=\"code\" >dddd.<\/span>\n     or <span class=\"code\" >dddd.ddd<\/span> or <span class=\"code\" >d.ddd e+-dd<\/span>).<\/li><li><span class=\"code\" >e<\/span> or <span class=\"code\" >E<\/span>: convert a floating-point argument to decimal notation,\n     in the style <span class=\"code\" >d.ddd e+-dd<\/span> (mantissa and exponent).<\/li><li><span class=\"code\" >g<\/span> or <span class=\"code\" >G<\/span>: convert a floating-point argument to decimal notation,\n     in style <span class=\"code\" >f<\/span> or <span class=\"code\" >e<\/span>, <span class=\"code\" >E<\/span> (whichever is more compact).<\/li><li><span class=\"code\" >B<\/span>: convert a boolean argument to the string <span class=\"code\" >true<\/span> or <span class=\"code\" >false<\/span><\/li><li><span class=\"code\" >b<\/span>: convert a boolean argument (for backward compatibility; do not\n     use in new programs).<\/li><li><span class=\"code\" >ld<\/span>, <span class=\"code\" >li<\/span>, <span class=\"code\" >lu<\/span>, <span class=\"code\" >lx<\/span>, <span class=\"code\" >lX<\/span>, <span class=\"code\" >lo<\/span>: convert an <span class=\"code\" >int32<\/span> argument to\n     the format specified by the second letter (decimal, hexadecimal, etc).<\/li><li><span class=\"code\" >nd<\/span>, <span class=\"code\" >ni<\/span>, <span class=\"code\" >nu<\/span>, <span class=\"code\" >nx<\/span>, <span class=\"code\" >nX<\/span>, <span class=\"code\" >no<\/span>: convert a <span class=\"code\" >nativeint<\/span> argument to\n     the format specified by the second letter.<\/li><li><span class=\"code\" >Ld<\/span>, <span class=\"code\" >Li<\/span>, <span class=\"code\" >Lu<\/span>, <span class=\"code\" >Lx<\/span>, <span class=\"code\" >LX<\/span>, <span class=\"code\" >Lo<\/span>: convert an <span class=\"code\" >int64<\/span> argument to\n     the format specified by the second letter.<\/li><li><span class=\"code\" >a<\/span>: user-defined printer. Takes two arguments and applies the\n     first one to <span class=\"code\" >outchan<\/span> (the current output channel) and to the\n     second argument. The first argument must therefore have type\n     <span class=\"code\" >out_channel -&gt; 'b -&gt; unit<\/span> and the second <span class=\"code\" >'b<\/span>.\n     The output produced by the function is inserted in the output of\n     <span class=\"code\" >fprintf<\/span> at the current point.<\/li><li><span class=\"code\" >t<\/span>: same as <span class=\"code\" >%a<\/span>, but takes only one argument (with type\n     <span class=\"code\" >out_channel -&gt; unit<\/span>) and apply it to <span class=\"code\" >outchan<\/span>.<\/li><li><span class=\"code\" >{ fmt %}<\/span>: convert a format string argument. The argument must\n     have the same type as the internal format string <span class=\"code\" >fmt<\/span>.<\/li><li><span class=\"code\" >( fmt %)<\/span>: format string substitution. Takes a format string\n     argument and substitutes it to the internal format string <span class=\"code\" >fmt<\/span>\n     to print following arguments. The argument must have the same\n     type as <span class=\"code\" >fmt<\/span>.<\/li><li><span class=\"code\" >!<\/span>: take no argument and flush the output.<\/li><li><span class=\"code\" >%<\/span>: take no argument and output one <span class=\"code\" >%<\/span> character.<\/li><li><span class=\"code\" >,<\/span>: the no-op delimiter for conversion specifications.<\/li><\/ul>\n   The optional <span class=\"code\" >flags<\/span> are:<ul><li><span class=\"code\" >-<\/span>: left-justify the output (default is right justification).<\/li><li><span class=\"code\" >0<\/span>: for numerical conversions, pad with zeroes instead of spaces.<\/li><li><span class=\"code\" >+<\/span>: for numerical conversions, prefix number with a <span class=\"code\" >+<\/span> sign if positive.<\/li><li>space: for numerical conversions, prefix number with a space if positive.<\/li><li><span class=\"code\" >#<\/span>: request an alternate formatting style for numbers.<\/li><\/ul>\n   The optional <span class=\"code\" >width<\/span> is an integer indicating the minimal\n   width of the result. For instance, <span class=\"code\" >%6d<\/span> prints an integer,\n   prefixing it with spaces to fill at least 6 characters.<br><\/br>\n   The optional <span class=\"code\" >precision<\/span> is a dot <span class=\"code\" >.<\/span> followed by an integer\n   indicating how many digits follow the decimal point in the <span class=\"code\" >%f<\/span>,\n   <span class=\"code\" >%e<\/span>, and <span class=\"code\" >%E<\/span> conversions. For instance, <span class=\"code\" >%.4f<\/span> prints a <span class=\"code\" >float<\/span> with\n   4 fractional digits.<br><\/br>\n   The integer in a <span class=\"code\" >width<\/span> or <span class=\"code\" >precision<\/span> can also be specified as\n   <span class=\"code\" >*<\/span>, in which case an extra integer argument is taken to specify\n   the corresponding <span class=\"code\" >width<\/span> or <span class=\"code\" >precision<\/span>. This integer argument\n   precedes immediately the argument to print.\n   For instance, <span class=\"code\" >%.*f<\/span> prints a <span class=\"code\" >float<\/span> with as many fractional\n   digits as the value of the argument given before the float."}, "type": "Pervasives.out_channel ->\n  ('a, Pervasives.out_channel, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "('a, Pervasives.out_channel, unit) Pervasives.format"}]}}, {"value": {"name": "Printf.printf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|5625"}, "info": {"description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf<\/span><\/a>, but output on <span class=\"code\" >stdout<\/span>."}, "type": "('a, Pervasives.out_channel, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "('a, Pervasives.out_channel, unit) Pervasives.format"}]}}, {"value": {"name": "Printf.eprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|5734"}, "info": {"description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf<\/span><\/a>, but output on <span class=\"code\" >stderr<\/span>."}, "type": "('a, Pervasives.out_channel, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "('a, Pervasives.out_channel, unit) Pervasives.format"}]}}, {"value": {"name": "Printf.ifprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|5844"}, "info": {"description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf<\/span><\/a>, but does not print anything.\n    Useful to ignore some material when conditionally printing.", "since": "3.10.0"}, "type": "'a -> ('b, 'a, unit) Pervasives.format -> 'b", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "('a, 'b, unit) Pervasives.format"}]}}, {"value": {"name": "Printf.sprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|6039"}, "info": {"description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf<\/span><\/a>, but instead of printing on an output channel,\n   return a string containing the result of formatting the arguments."}, "type": "('a, unit, string) Pervasives.format -> 'a", "params": [{"name": "", "type": "('a, unit, string) Pervasives.format"}]}}, {"value": {"name": "Printf.bprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|6236"}, "info": {"description": "Same as <a href=\"{value|Printf.fprintf}\" ><span class=\"code\" >Printf.fprintf<\/span><\/a>, but instead of printing on an output channel,\n   append the formatted arguments to the given extensible buffer\n   (see module <a href=\"{module|Buffer}\" ><span class=\"code\" >Buffer<\/span><\/a>)."}, "type": "Buffer.t -> ('a, Buffer.t, unit) Pervasives.format -> 'a", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "('a, Buffer.t, unit) Pervasives.format"}]}}, {"comment": "Formatted output functions with continuations."}, {"value": {"name": "Printf.kfprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|6524"}, "info": {"description": "Same as <span class=\"code\" >fprintf<\/span>, but instead of returning immediately,\n   passes the out channel to its first argument at the end of printing.", "since": "3.09.0"}, "type": "(Pervasives.out_channel -> 'a) ->\n  Pervasives.out_channel ->\n  ('b, Pervasives.out_channel, unit, 'a) Pervasives.format4 -> 'b", "params": [{"name": "", "type": "Pervasives.out_channel -> 'a"}, {"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "('a, Pervasives.out_channel, unit, 'b) Pervasives.format4"}]}}, {"value": {"name": "Printf.ksprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|6789"}, "info": {"description": "Same as <span class=\"code\" >sprintf<\/span> above, but instead of returning the string,\n   passes it to the first argument.", "since": "3.09.0"}, "type": "(string -> 'a) -> ('b, unit, string, 'a) Pervasives.format4 -> 'b", "params": [{"name": "", "type": "string -> 'a"}, {"name": "", "type": "('a, unit, string, 'b) Pervasives.format4"}]}}, {"value": {"name": "Printf.kbprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|6984"}, "info": {"description": "Same as <span class=\"code\" >bprintf<\/span>, but instead of returning immediately,\n   passes the buffer to its first argument at the end of printing.", "since": "3.10.0"}, "type": "(Buffer.t -> 'a) ->\n  Buffer.t -> ('b, Buffer.t, unit, 'a) Pervasives.format4 -> 'b", "params": [{"name": "", "type": "Buffer.t -> 'a"}, {"name": "", "type": "Buffer.t"}, {"name": "", "type": "('a, Buffer.t, unit, 'b) Pervasives.format4"}]}}, {"value": {"name": "Printf.kprintf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/printf.mli|7235"}, "info": {"description": "A deprecated synonym for <span class=\"code\" >ksprintf<\/span>."}, "type": "(string -> 'a) -> ('b, unit, string, 'a) Pervasives.format4 -> 'b", "params": [{"name": "", "type": "string -> 'a"}, {"name": "", "type": "('a, unit, string, 'b) Pervasives.format4"}]}}], "dependencies": {"uses": ["Pervasives", "Obj", "Buffer"], "used_by": ["Net"]}}}, "Parsing": {"module": {"name": "Parsing", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|0"}, "info": {"description": "The run-time library for parsers generated by <span class=\"code\" >ocamlyacc<\/span>."}, "type": "sig  end", "module_structure": [{"value": {"name": "Parsing.symbol_start", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|1017"}, "info": {"description": "<span class=\"code\" >symbol_start<\/span> and <a href=\"{value|Parsing.symbol_end}\" ><span class=\"code\" >Parsing.symbol_end<\/span><\/a> are to be called in the\n   action part of a grammar rule only. They return the offset of the\n   string that matches the left-hand side of the rule: <span class=\"code\" >symbol_start()<\/span>\n   returns the offset of the first character; <span class=\"code\" >symbol_end()<\/span> returns the\n   offset after the last character. The first character in a file is at\n   offset 0."}, "type": "unit -> int", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Parsing.symbol_end", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|1420"}, "info": {"description": "See <a href=\"{value|Parsing.symbol_start}\" ><span class=\"code\" >Parsing.symbol_start<\/span><\/a>."}, "type": "unit -> int", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Parsing.rhs_start", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|1486"}, "info": {"description": "Same as <a href=\"{value|Parsing.symbol_start}\" ><span class=\"code\" >Parsing.symbol_start<\/span><\/a> and <a href=\"{value|Parsing.symbol_end}\" ><span class=\"code\" >Parsing.symbol_end<\/span><\/a>, but\n   return the offset of the string matching the <span class=\"code\" >n<\/span>th item on the\n   right-hand side of the rule, where <span class=\"code\" >n<\/span> is the integer parameter\n   to <span class=\"code\" >rhs_start<\/span> and <span class=\"code\" >rhs_end<\/span>. <span class=\"code\" >n<\/span> is 1 for the leftmost item."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Parsing.rhs_end", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|1782"}, "info": {"description": "See <a href=\"{value|Parsing.rhs_start}\" ><span class=\"code\" >Parsing.rhs_start<\/span><\/a>."}, "type": "int -> int", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Parsing.symbol_start_pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|1841"}, "info": {"description": "Same as <span class=\"code\" >symbol_start<\/span>, but return a <span class=\"code\" >position<\/span> instead of an offset."}, "type": "unit -> Lexing.position", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Parsing.symbol_end_pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|1968"}, "info": {"description": "Same as <span class=\"code\" >symbol_end<\/span>, but return a <span class=\"code\" >position<\/span> instead of an offset."}, "type": "unit -> Lexing.position", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Parsing.rhs_start_pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|2089"}, "info": {"description": "Same as <span class=\"code\" >rhs_start<\/span>, but return a <span class=\"code\" >position<\/span> instead of an offset."}, "type": "int -> Lexing.position", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Parsing.rhs_end_pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|2207"}, "info": {"description": "Same as <span class=\"code\" >rhs_end<\/span>, but return a <span class=\"code\" >position<\/span> instead of an offset."}, "type": "int -> Lexing.position", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Parsing.clear_parser", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|2321"}, "info": {"description": "Empty the parser stack. Call it just after a parsing function\n   has returned, to remove all pointers from the parser stack\n   to structures that were built by semantic actions during parsing.\n   This is optional, but lowers the memory requirements of the\n   programs."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"exception": {"name": "Parsing.Parse_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|2630"}, "info": {"description": "Raised when a parser encounters a syntax error.\n   Can also be raised from the action part of a grammar rule,\n   to initiate error recovery."}}}, {"value": {"name": "Parsing.set_trace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/parsing.mli|2801"}, "info": {"description": "Control debugging support for <span class=\"code\" >ocamlyacc<\/span>-generated parsers.\n    After <span class=\"code\" >Parsing.set_trace true<\/span>, the pushdown automaton that\n    executes the parsers prints a trace of its actions (reading a token,\n    shifting a state, reducing by a rule) on standard output.\n    <span class=\"code\" >Parsing.set_trace false<\/span> turns this debugging trace off.\n    The boolean returned is the previous state of the trace flag.", "since": "3.11.0"}, "type": "bool -> bool", "params": [{"name": "", "type": "bool"}]}}], "dependencies": {"uses": ["Obj", "Lexing"], "used_by": []}}}, "CamlinternalOO": {"module": {"name": "CamlinternalOO", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|0"}, "info": {"description": "Run-time support for objects and classes.\n    All functions in this module are for system use only, not for the\n    casual user."}, "type": "sig  end", "module_structure": [{"comment": "<h6>Classes<\/h6>"}, {"type": {"name": "CamlinternalOO.tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1123"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "CamlinternalOO.label", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1134"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "CamlinternalOO.table", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1145"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "CamlinternalOO.meth", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1155"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "CamlinternalOO.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1162"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "CamlinternalOO.obj", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1171"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "CamlinternalOO.closure", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1184"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "CamlinternalOO.public_method_label", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1184"}, "info": "", "type": "string -> CamlinternalOO.tag", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "CamlinternalOO.new_method", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1224"}, "info": "", "type": "CamlinternalOO.table -> CamlinternalOO.label", "params": [{"name": "", "type": "CamlinternalOO.table"}]}}, {"value": {"name": "CamlinternalOO.new_variable", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1256"}, "info": "", "type": "CamlinternalOO.table -> string -> int", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "string"}]}}, {"value": {"name": "CamlinternalOO.new_methods_variables", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1298"}, "info": "", "type": "CamlinternalOO.table ->\n  string array -> string array -> CamlinternalOO.label array", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "string array"}, {"name": "", "type": "string array"}]}}, {"value": {"name": "CamlinternalOO.get_variable", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1383"}, "info": "", "type": "CamlinternalOO.table -> string -> int", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "string"}]}}, {"value": {"name": "CamlinternalOO.get_variables", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1425"}, "info": "", "type": "CamlinternalOO.table -> string array -> int array", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "string array"}]}}, {"value": {"name": "CamlinternalOO.get_method_label", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1480"}, "info": "", "type": "CamlinternalOO.table -> string -> CamlinternalOO.label", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "string"}]}}, {"value": {"name": "CamlinternalOO.get_method_labels", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1528"}, "info": "", "type": "CamlinternalOO.table -> string array -> CamlinternalOO.label array", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "string array"}]}}, {"value": {"name": "CamlinternalOO.get_method", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1589"}, "info": "", "type": "CamlinternalOO.table -> CamlinternalOO.label -> CamlinternalOO.meth", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "CamlinternalOO.label"}]}}, {"value": {"name": "CamlinternalOO.set_method", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1629"}, "info": "", "type": "CamlinternalOO.table -> CamlinternalOO.label -> CamlinternalOO.meth -> unit", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "CamlinternalOO.label"}, {"name": "", "type": "CamlinternalOO.meth"}]}}, {"value": {"name": "CamlinternalOO.set_methods", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1677"}, "info": "", "type": "CamlinternalOO.table -> CamlinternalOO.label array -> unit", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "CamlinternalOO.label array"}]}}, {"value": {"name": "CamlinternalOO.narrow", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1724"}, "info": "", "type": "CamlinternalOO.table -> string array -> string array -> string array -> unit", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "string array"}, {"name": "", "type": "string array"}, {"name": "", "type": "string array"}]}}, {"value": {"name": "CamlinternalOO.widen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1799"}, "info": "", "type": "CamlinternalOO.table -> unit", "params": [{"name": "", "type": "CamlinternalOO.table"}]}}, {"value": {"name": "CamlinternalOO.add_initializer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1825"}, "info": "", "type": "CamlinternalOO.table -> (CamlinternalOO.obj -> unit) -> unit", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "CamlinternalOO.obj -> unit"}]}}, {"value": {"name": "CamlinternalOO.dummy_table", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1878"}, "info": "", "type": "CamlinternalOO.table", "params": []}}, {"value": {"name": "CamlinternalOO.create_table", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1902"}, "info": "", "type": "string array -> CamlinternalOO.table", "params": [{"name": "", "type": "string array"}]}}, {"value": {"name": "CamlinternalOO.init_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1943"}, "info": "", "type": "CamlinternalOO.table -> unit", "params": [{"name": "", "type": "CamlinternalOO.table"}]}}, {"value": {"name": "CamlinternalOO.inherits", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|1974"}, "info": "", "type": "CamlinternalOO.table ->\n  string array ->\n  string array ->\n  string array ->\n  CamlinternalOO.t * (CamlinternalOO.table -> CamlinternalOO.obj -> Obj.t) *\n  CamlinternalOO.t * CamlinternalOO.obj -> bool -> Obj.t array", "params": [{"name": "", "type": "CamlinternalOO.table"}, {"name": "", "type": "string array"}, {"name": "", "type": "string array"}, {"name": "", "type": "string array"}, {"tuple": {"type": "CamlinternalOO.t * (CamlinternalOO.table -> CamlinternalOO.obj -> Obj.t) *\n  CamlinternalOO.t * CamlinternalOO.obj", "contents": [{"name": "", "type": "CamlinternalOO.t"}, {"name": "", "type": "CamlinternalOO.table -> CamlinternalOO.obj -> Obj.t"}, {"name": "", "type": "CamlinternalOO.t"}, {"name": "", "type": "CamlinternalOO.obj"}]}}, {"name": "", "type": "bool"}]}}, {"value": {"name": "CamlinternalOO.make_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2117"}, "info": "", "type": "string array ->\n  (CamlinternalOO.table -> Obj.t -> CamlinternalOO.t) ->\n  CamlinternalOO.t * (CamlinternalOO.table -> Obj.t -> CamlinternalOO.t) *\n  (Obj.t -> CamlinternalOO.t) * Obj.t", "params": [{"name": "", "type": "string array"}, {"name": "", "type": "CamlinternalOO.table -> Obj.t -> CamlinternalOO.t"}]}}, {"type": {"name": "CamlinternalOO.init_table", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2250"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "CamlinternalOO.make_class_store", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2250"}, "info": "", "type": "string array ->\n  (CamlinternalOO.table -> CamlinternalOO.t) ->\n  CamlinternalOO.init_table -> unit", "params": [{"name": "", "type": "string array"}, {"name": "", "type": "CamlinternalOO.table -> CamlinternalOO.t"}, {"name": "", "type": "CamlinternalOO.init_table"}]}}, {"value": {"name": "CamlinternalOO.dummy_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2328"}, "info": "", "type": "string * int * int ->\n  CamlinternalOO.t * (CamlinternalOO.table -> Obj.t -> CamlinternalOO.t) *\n  (Obj.t -> CamlinternalOO.t) * Obj.t", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"comment": "<h6>Objects<\/h6>"}, {"value": {"name": "CamlinternalOO.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2448"}, "info": "", "type": "(< .. > as 'a) -> 'a", "params": [{"name": "", "type": "< .. >"}]}}, {"value": {"name": "CamlinternalOO.create_object", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2480"}, "info": "", "type": "CamlinternalOO.table -> CamlinternalOO.obj", "params": [{"name": "", "type": "CamlinternalOO.table"}]}}, {"value": {"name": "CamlinternalOO.create_object_opt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2513"}, "info": "", "type": "CamlinternalOO.obj -> CamlinternalOO.table -> CamlinternalOO.obj", "params": [{"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.table"}]}}, {"value": {"name": "CamlinternalOO.run_initializers", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2557"}, "info": "", "type": "CamlinternalOO.obj -> CamlinternalOO.table -> unit", "params": [{"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.table"}]}}, {"value": {"name": "CamlinternalOO.run_initializers_opt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2601"}, "info": "", "type": "CamlinternalOO.obj ->\n  CamlinternalOO.obj -> CamlinternalOO.table -> CamlinternalOO.obj", "params": [{"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.table"}]}}, {"value": {"name": "CamlinternalOO.create_object_and_run_initializers", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2655"}, "info": "", "type": "CamlinternalOO.obj -> CamlinternalOO.table -> CamlinternalOO.obj", "params": [{"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.table"}]}}, {"value": {"name": "CamlinternalOO.send", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2716"}, "info": "", "type": "CamlinternalOO.obj -> CamlinternalOO.tag -> CamlinternalOO.t", "params": [{"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.tag"}]}}, {"value": {"name": "CamlinternalOO.sendcache", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2758"}, "info": "", "type": "CamlinternalOO.obj ->\n  CamlinternalOO.tag -> CamlinternalOO.t -> int -> CamlinternalOO.t", "params": [{"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.tag"}, {"name": "", "type": "CamlinternalOO.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "CamlinternalOO.sendself", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2822"}, "info": "", "type": "CamlinternalOO.obj -> CamlinternalOO.label -> CamlinternalOO.t", "params": [{"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.label"}]}}, {"value": {"name": "CamlinternalOO.get_public_method", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|2874"}, "info": "", "type": "CamlinternalOO.obj -> CamlinternalOO.tag -> CamlinternalOO.closure", "params": [{"name": "", "type": "CamlinternalOO.obj"}, {"name": "", "type": "CamlinternalOO.tag"}]}}, {"comment": "<h6>Table cache<\/h6>"}, {"type": {"name": "CamlinternalOO.tables", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|3003"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "CamlinternalOO.lookup_tables", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|3003"}, "info": "", "type": "CamlinternalOO.tables ->\n  CamlinternalOO.closure array -> CamlinternalOO.tables", "params": [{"name": "", "type": "CamlinternalOO.tables"}, {"name": "", "type": "CamlinternalOO.closure array"}]}}, {"comment": "<h6>Builtins to reduce code size<\/h6>"}, {"type": {"name": "CamlinternalOO.impl", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|4240"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "GetConst", "type": []}, {"name": "GetVar", "type": []}, {"name": "GetEnv", "type": []}, {"name": "GetMeth", "type": []}, {"name": "SetVar", "type": []}, {"name": "AppConst", "type": []}, {"name": "AppVar", "type": []}, {"name": "AppEnv", "type": []}, {"name": "AppMeth", "type": []}, {"name": "AppConstConst", "type": []}, {"name": "AppConstVar", "type": []}, {"name": "AppConstEnv", "type": []}, {"name": "AppConstMeth", "type": []}, {"name": "AppVarConst", "type": []}, {"name": "AppEnvConst", "type": []}, {"name": "AppMethConst", "type": []}, {"name": "MethAppConst", "type": []}, {"name": "MethAppVar", "type": []}, {"name": "MethAppEnv", "type": []}, {"name": "MethAppMeth", "type": []}, {"name": "SendConst", "type": []}, {"name": "SendVar", "type": []}, {"name": "SendEnv", "type": []}, {"name": "SendMeth", "type": []}, {"name": "Closure", "type": ["CamlinternalOO.closure"]}]}}}, {"comment": "<h6>Parameters<\/h6>"}, {"type": {"name": "CamlinternalOO.params", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|4659"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "compact_table", "mutable": true, "type": "bool"}, {"name": "copy_parent", "mutable": true, "type": "bool"}, {"name": "clean_when_copying", "mutable": true, "type": "bool"}, {"name": "retry_count", "mutable": true, "type": "int"}, {"name": "bucket_small_size", "mutable": true, "type": "int"}]}}}, {"value": {"name": "CamlinternalOO.params", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|4832"}, "info": "", "type": "CamlinternalOO.params", "params": []}}, {"comment": "<h6>Statistics<\/h6>"}, {"type": {"name": "CamlinternalOO.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|4891"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "classes", "mutable": false, "type": "int"}, {"name": "methods", "mutable": false, "type": "int"}, {"name": "inst_vars", "mutable": false, "type": "int"}]}}}, {"value": {"name": "CamlinternalOO.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalOO.mli|4949"}, "info": "", "type": "unit -> CamlinternalOO.stats", "params": [{"name": "", "type": "unit"}]}}], "dependencies": {"uses": ["Obj"], "used_by": ["Oo"]}}}, "CamlinternalMod": {"module": {"name": "CamlinternalMod", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalMod.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalMod.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "CamlinternalMod.shape", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalMod.mli|971"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Function", "type": []}, {"name": "Lazy", "type": []}, {"name": "Class", "type": []}, {"name": "Module", "type": ["CamlinternalMod.shape array"]}]}}}, {"value": {"name": "CamlinternalMod.init_mod", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalMod.mli|1028"}, "info": "", "type": "string * int * int -> CamlinternalMod.shape -> Obj.t", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"name": "", "type": "CamlinternalMod.shape"}]}}, {"value": {"name": "CamlinternalMod.update_mod", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/camlinternalMod.mli|1079"}, "info": "", "type": "CamlinternalMod.shape -> Obj.t -> Obj.t -> unit", "params": [{"name": "", "type": "CamlinternalMod.shape"}, {"name": "", "type": "Obj.t"}, {"name": "", "type": "Obj.t"}]}}], "dependencies": {"uses": ["Obj"], "used_by": []}}}, "Std_exit": {"module": {"name": "Std_exit", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/std_exit.ml", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/std_exit.ml|0", "interface": "unknown"}, "info": "", "type": "sig  end", "module_structure": [], "dependencies": {"uses": [], "used_by": []}}}, "Log": {"module": {"name": "Log", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|0"}, "info": {"description": "<h2>Loggers<\/h2>"}, "type": "sig  end", "module_structure": [{"type": {"name": "Log.level", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|667"}, "info": {"description": "The level for log event"}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `debug | `error | `info | `warn ]"}}, {"type": {"name": "Log.logger", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|750"}, "info": {"description": "Logger arguments"}, "params": [], "kind": {"type": "abstract"}, "manifest": "date:string ->\n  id:int ->\n  level:Log.level ->\n  section:string -> ?backtrace:string -> message:string -> unit"}}, {"value": {"name": "Log.add_logger", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|977"}, "info": {"description": "Add a named logger, which will be called on each new log event"}, "type": "string -> Log.logger -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "Log.logger"}]}}, {"value": {"name": "Log.rm_logger", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1049"}, "info": {"description": "Remove a named logger"}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Log.get_loggers", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1115"}, "info": {"description": "Get all the active loggers"}, "type": "unit -> string list", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Log.text_logger", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1211"}, "info": {"description": "Default logger : display all the result to stdout"}, "type": "Log.logger", "params": []}}, {"value": {"name": "Log.text_logger_name", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1315"}, "info": {"description": "Name of the default text logger (usefull if one wants to uninstall it)"}, "type": "string", "params": []}}, {"comment": "<h2>Log functions<\/h2>"}, {"value": {"name": "Log.debug", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1372"}, "info": "", "type": "string -> ('a, unit, string, unit) Pervasives.format4 -> 'a", "params": [{"name": "", "type": "string"}, {"name": "", "type": "('a, unit, string, unit) Pervasives.format4"}]}}, {"value": {"name": "Log.info", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1432"}, "info": "", "type": "string -> ('a, unit, string, unit) Pervasives.format4 -> 'a", "params": [{"name": "", "type": "string"}, {"name": "", "type": "('a, unit, string, unit) Pervasives.format4"}]}}, {"value": {"name": "Log.warn", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1492"}, "info": "", "type": "string -> ('a, unit, string, unit) Pervasives.format4 -> 'a", "params": [{"name": "", "type": "string"}, {"name": "", "type": "('a, unit, string, unit) Pervasives.format4"}]}}, {"value": {"name": "Log.error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1552"}, "info": "", "type": "string -> ('a, unit, string, unit) Pervasives.format4 -> 'a", "params": [{"name": "", "type": "string"}, {"name": "", "type": "('a, unit, string, unit) Pervasives.format4"}]}}, {"comment": "<h2>Date functions<\/h2>"}, {"value": {"name": "Log.set_date", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1695"}, "info": {"description": "Hook to get the date (OS modules might init it)"}, "type": "(unit -> string) -> unit", "params": [{"name": "", "type": "unit -> string"}]}}, {"value": {"name": "Log.set_id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/log.mli|1779"}, "info": {"description": "Hook to get the current thread's id"}, "type": "(unit -> int) -> unit", "params": [{"name": "", "type": "unit -> int"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Oo": {"module": {"name": "Oo", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oo.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oo.mli|0"}, "info": {"description": "Operations on objects"}, "type": "sig  end", "module_structure": [{"value": {"name": "Oo.copy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oo.mli|975"}, "info": {"description": "<span class=\"code\" >Oo.copy o<\/span> returns a copy of object <span class=\"code\" >o<\/span>, that is a fresh\n   object with the same methods and instance variables as <span class=\"code\" >o<\/span>"}, "type": "(< .. > as 'a) -> 'a", "params": [{"name": "", "type": "< .. >"}]}}, {"value": {"name": "Oo.id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oo.mli|1136"}, "info": {"description": "Return an integer identifying this object, unique for\n    the current execution of the program."}, "type": "< .. > -> int", "params": [{"name": "", "type": "< .. >"}]}}], "dependencies": {"uses": ["CamlinternalOO"], "used_by": []}}}, "Lwt": {"module": {"name": "Lwt", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|0"}, "info": {"description": "Module <span class=\"code\" >Lwt<\/span>: cooperative light-weight threads."}, "type": "sig  end", "module_structure": [{"comment": "This module defines <em>cooperative light-weight threads<\/em> with\n    their primitives. A <em>light-weight thread<\/em> represent a\n    computation that may be not terminated, for example because it is\n    waiting for some event to happen.<br><\/br>\n    Lwt threads are cooperative in the sense that switching to another\n    thread is awlays explicit (with <a href=\"{value|Lwt.wakeup}\" ><span class=\"code\" >Lwt.wakeup<\/span><\/a> or <a href=\"{none|wekup_exn}\" ><span class=\"code\" >wekup_exn<\/span><\/a>). When a\n    thread is running, it executes as much as possible, and then\n    returns (a value or an eror) or sleeps.<br><\/br>\n    Note that inside a Lwt thread, exceptions must be raised with\n    <a href=\"{value|Lwt.fail}\" ><span class=\"code\" >Lwt.fail<\/span><\/a> instead of <span class=\"code\" >raise<\/span>. Also the <span class=\"code\" >try ... with ...<\/span>\n    construction will not catch Lwt errors. You must use <a href=\"{value|Lwt.catch}\" ><span class=\"code\" >Lwt.catch<\/span><\/a>\n    instead.<br><\/br>\n    Lwt also provides the syntax extension <a href=\"{none|Pa_lwt}\" ><span class=\"code\" >Pa_lwt<\/span><\/a> to make code\n    using Lwt more readable."}, {"comment": "<h6>Definitions and basics<\/h6>"}, {"type": {"name": "Lwt.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|1953"}, "info": {"description": "The type of threads returning a result of type <span class=\"code\" >'a<\/span>."}, "params": [{"covariant": true, "contravariant": false, "type": "'a"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt.return", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|1953"}, "info": {"description": "<span class=\"code\" >return e<\/span> is a thread whose return value is the value of the\n      expression <span class=\"code\" >e<\/span>."}, "type": "'a -> 'a Lwt.t", "params": [{"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt.fail", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|2071"}, "info": {"description": "<span class=\"code\" >fail e<\/span> is a thread that fails with the exception <span class=\"code\" >e<\/span>."}, "type": "exn -> 'a Lwt.t", "params": [{"name": "", "type": "exn"}]}}, {"value": {"name": "Lwt.bind", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|2160"}, "info": {"description": "<span class=\"code\" >bind t f<\/span> is a thread which first waits for the thread <span class=\"code\" >t<\/span> to\n      terminate and then, if the thread succeeds, behaves as the\n      application of function <span class=\"code\" >f<\/span> to the return value of <span class=\"code\" >t<\/span>.  If the\n      thread <span class=\"code\" >t<\/span> fails, <span class=\"code\" >bind t f<\/span> also fails, with the same\n      exception.<br><\/br>\n      The expression <span class=\"code\" >bind t (fun x -&gt; t')<\/span> can intuitively be read as\n      <span class=\"code\" >let x = t in t'<\/span>, and if you use the <em>lwt.syntax<\/em> syntax\n      extension, you can write a bind operation like that: <span class=\"code\" >lwt x = t in t'<\/span>.<br><\/br>\n      Note that <span class=\"code\" >bind<\/span> is also often used just for synchronization\n      purpose: <span class=\"code\" >t'<\/span> will not execute before <span class=\"code\" >t<\/span> is terminated.<br><\/br>\n      The result of a thread can be bound several time."}, "type": "'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t", "params": [{"name": "", "type": "'a Lwt.t"}, {"name": "", "type": "'a -> 'b Lwt.t"}]}}, {"value": {"name": "Lwt.(>>=)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|2890"}, "info": {"description": "<span class=\"code\" >t &gt;&gt;= f<\/span> is an alternative notation for <span class=\"code\" >bind t f<\/span>."}, "type": "'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t", "params": [{"name": "", "type": "'a Lwt.t"}, {"name": "", "type": "'a -> 'b Lwt.t"}]}}, {"value": {"name": "Lwt.(=<<)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|2994"}, "info": {"description": "<span class=\"code\" >f =&lt;&lt; t<\/span> is <span class=\"code\" >t &gt;&gt;= f<\/span>"}, "type": "('a -> 'b Lwt.t) -> 'a Lwt.t -> 'b Lwt.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a Lwt.t"}]}}, {"value": {"name": "Lwt.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|3068"}, "info": {"description": "<span class=\"code\" >map f m<\/span> map the result of a thread. This is the same as <span class=\"code\" >bind\n      m (fun x -&gt; return (f x))<\/span>"}, "type": "('a -> 'b) -> 'a Lwt.t -> 'b Lwt.t", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a Lwt.t"}]}}, {"value": {"name": "Lwt.(>|=)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|3212"}, "info": {"description": "<span class=\"code\" >m &gt;|= f<\/span> is <span class=\"code\" >map f m<\/span>"}, "type": "'a Lwt.t -> ('a -> 'b) -> 'b Lwt.t", "params": [{"name": "", "type": "'a Lwt.t"}, {"name": "", "type": "'a -> 'b"}]}}, {"value": {"name": "Lwt.(=|<)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|3284"}, "info": {"description": "<span class=\"code\" >f =|&lt; m<\/span> is <span class=\"code\" >map f m<\/span>"}, "type": "('a -> 'b) -> 'a Lwt.t -> 'b Lwt.t", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a Lwt.t"}]}}, {"comment": "<h6>Thread storage<\/h6>"}, {"type": {"name": "Lwt.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|3475"}, "info": {"description": "Type of a key. Keys are used to store local values into\n      threads"}, "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt.new_key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|3475"}, "info": {"description": "<span class=\"code\" >new_key ()<\/span> creates a new key."}, "type": "unit -> 'a Lwt.key", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt.get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|3546"}, "info": {"description": "<span class=\"code\" >get key<\/span> returns the value associated with <span class=\"code\" >key<\/span> in the current\n      thread."}, "type": "'a Lwt.key -> 'a option", "params": [{"name": "", "type": "'a Lwt.key"}]}}, {"value": {"name": "Lwt.with_value", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|3665"}, "info": {"description": "<span class=\"code\" >with_value key value f<\/span> executes <span class=\"code\" >f<\/span> with <span class=\"code\" >value<\/span> associated to\n      <span class=\"code\" >key<\/span>. The previous value associated to <span class=\"code\" >key<\/span> is restored after\n      <span class=\"code\" >f<\/span> terminates."}, "type": "'a Lwt.key -> 'a option -> (unit -> 'b) -> 'b", "params": [{"name": "", "type": "'a Lwt.key"}, {"name": "", "type": "'a option"}, {"name": "", "type": "unit -> 'a"}]}}, {"comment": "<h6>Exceptions handling<\/h6>"}, {"value": {"name": "Lwt.catch", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|3923"}, "info": {"description": "<span class=\"code\" >catch t f<\/span> is a thread that behaves as the thread <span class=\"code\" >t ()<\/span> if\n      this thread succeeds.  If the thread <span class=\"code\" >t ()<\/span> fails with some\n      exception, <span class=\"code\" >catch t f<\/span> behaves as the application of <span class=\"code\" >f<\/span> to this\n      exception."}, "type": "(unit -> 'a Lwt.t) -> (exn -> 'a Lwt.t) -> 'a Lwt.t", "params": [{"name": "", "type": "unit -> 'a Lwt.t"}, {"name": "", "type": "exn -> 'a Lwt.t"}]}}, {"value": {"name": "Lwt.try_bind", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|4200"}, "info": {"description": "<span class=\"code\" >try_bind t f g<\/span> behaves as <span class=\"code\" >bind (t ()) f<\/span> if <span class=\"code\" >t<\/span> does not\n      fail.  Otherwise, it behaves as the application of <span class=\"code\" >g<\/span> to the\n      exception associated to <span class=\"code\" >t ()<\/span>."}, "type": "(unit -> 'a Lwt.t) -> ('a -> 'b Lwt.t) -> (exn -> 'b Lwt.t) -> 'b Lwt.t", "params": [{"name": "", "type": "unit -> 'a Lwt.t"}, {"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "exn -> 'a Lwt.t"}]}}, {"value": {"name": "Lwt.finalize", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|4447"}, "info": {"description": "<span class=\"code\" >finalize f g<\/span> returns the same result as <span class=\"code\" >f ()<\/span> whether it\n      fails or not. In both cases, <span class=\"code\" >g ()<\/span> is executed after <span class=\"code\" >f<\/span>."}, "type": "(unit -> 'a Lwt.t) -> (unit -> unit Lwt.t) -> 'a Lwt.t", "params": [{"name": "", "type": "unit -> 'a Lwt.t"}, {"name": "", "type": "unit -> unit Lwt.t"}]}}, {"comment": "<h6>Multi-threads composition<\/h6>"}, {"value": {"name": "Lwt.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|4678"}, "info": {"description": "<span class=\"code\" >choose l<\/span> behaves as the first thread in <span class=\"code\" >l<\/span> to terminate.  If\n      several threads are already terminated, one is choosen at\n      random.<br><\/br>\n      Note: <a href=\"{value|Lwt.choose}\" ><span class=\"code\" >Lwt.choose<\/span><\/a> leaves the local values of the current thread\n      unchanged."}, "type": "'a Lwt.t list -> 'a Lwt.t", "params": [{"name": "", "type": "'a Lwt.t list"}]}}, {"value": {"name": "Lwt.nchoose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|4947"}, "info": {"description": "<span class=\"code\" >nchoose l<\/span> returns the value of all that have succcessfully\n      terminated. If all threads are sleeping, it waits for at least\n      one to terminates. If one the threads of <span class=\"code\" >l<\/span> fails, <span class=\"code\" >nchoose<\/span>\n      fails with the same exception.<br><\/br>\n      Note: <a href=\"{value|Lwt.nchoose}\" ><span class=\"code\" >Lwt.nchoose<\/span><\/a> leaves the local values of the current thread\n      unchanged."}, "type": "'a Lwt.t list -> 'a list Lwt.t", "params": [{"name": "", "type": "'a Lwt.t list"}]}}, {"value": {"name": "Lwt.nchoose_split", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|5316"}, "info": {"description": "<span class=\"code\" >nchoose_split l<\/span> does the same as <a href=\"{value|Lwt.nchoose}\" ><span class=\"code\" >Lwt.nchoose<\/span><\/a> but also retrurns\n      the list of threads that have not yet terminated."}, "type": "'a Lwt.t list -> ('a list * 'a Lwt.t list) Lwt.t", "params": [{"name": "", "type": "'a Lwt.t list"}]}}, {"value": {"name": "Lwt.join", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|5503"}, "info": {"description": "<span class=\"code\" >join l<\/span> waits for all threads in <span class=\"code\" >l<\/span> to terminate. If one of\n      the threads fails, then <span class=\"code\" >join l<\/span> will fails with the same\n      exception as the first one to terminate.<br><\/br>\n      Note: <a href=\"{value|Lwt.join}\" ><span class=\"code\" >Lwt.join<\/span><\/a> leaves the local values of the current thread\n      unchanged."}, "type": "unit Lwt.t list -> unit Lwt.t", "params": [{"name": "", "type": "unit Lwt.t list"}]}}, {"value": {"name": "Lwt.(<?>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|5803"}, "info": {"description": "<span class=\"code\" >t &lt;?&gt; t'<\/span> is the same as <span class=\"code\" >choose [t; t']<\/span>"}, "type": "'a Lwt.t -> 'a Lwt.t -> 'a Lwt.t", "params": [{"name": "", "type": "'a Lwt.t"}, {"name": "", "type": "'a Lwt.t"}]}}, {"value": {"name": "Lwt.(<&>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|5891"}, "info": {"description": "<span class=\"code\" >t &lt;&amp;&gt; t'<\/span> is the same as <span class=\"code\" >join [t; t']<\/span>"}, "type": "unit Lwt.t -> unit Lwt.t -> unit Lwt.t", "params": [{"name": "", "type": "unit Lwt.t"}, {"name": "", "type": "unit Lwt.t"}]}}, {"value": {"name": "Lwt.ignore_result", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|5983"}, "info": {"description": "<span class=\"code\" >ignore_result t<\/span> start the thread <span class=\"code\" >t<\/span> and ignores its result\n      value if the thread terminates sucessfully.  However, if the\n      thread <span class=\"code\" >t<\/span> fails, the exception is raised instead of being\n      ignored.<br><\/br>\n      You should use this function if you want to start a thread and\n      don't care what its return value is, nor when it terminates (for\n      instance, because it is looping).  Note that if the thread <span class=\"code\" >t<\/span>\n      yields and later fails, the exception will not be raised at this\n      point in the program."}, "type": "'a Lwt.t -> unit", "params": [{"name": "", "type": "'a Lwt.t"}]}}, {"comment": "<h6>Sleeping and resuming<\/h6>"}, {"type": {"name": "Lwt.u", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|6627"}, "info": {"description": "The type of thread wakeners."}, "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt.wait", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|6627"}, "info": {"description": "<span class=\"code\" >wait ()<\/span> is a pair of a thread which sleeps forever (unless it\n      is resumed by one of the functions <span class=\"code\" >wakeup<\/span>, <span class=\"code\" >wakeup_exn<\/span> below)\n      and the corresponding wakener.  This thread does not block the\n      execution of the remainder of the program (except of course, if\n      another thread tries to wait for its termination)."}, "type": "unit -> 'a Lwt.t * 'a Lwt.u", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt.wakeup", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|6999"}, "info": {"description": "<span class=\"code\" >wakeup t e<\/span> makes the sleeping thread <span class=\"code\" >t<\/span> terminate and return\n      the value of the expression <span class=\"code\" >e<\/span>."}, "type": "'a Lwt.u -> 'a -> unit", "params": [{"name": "", "type": "'a Lwt.u"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt.wakeup_exn", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|7144"}, "info": {"description": "<span class=\"code\" >wakeup_exn t e<\/span> makes the sleeping thread <span class=\"code\" >t<\/span> fail with the\n      exception <span class=\"code\" >e<\/span>."}, "type": "'a Lwt.u -> exn -> unit", "params": [{"name": "", "type": "'a Lwt.u"}, {"name": "", "type": "exn"}]}}, {"value": {"name": "Lwt.waiter_of_wakener", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|7273"}, "info": {"description": "Returns the thread associated to a wakener."}, "type": "'a Lwt.u -> 'a Lwt.t", "params": [{"name": "", "type": "'a Lwt.u"}]}}, {"comment": "<h6>Threads state<\/h6>"}, {"type": {"name": "Lwt.state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|7433"}, "info": {"description": "State of a thread"}, "params": [{"covariant": true, "contravariant": false, "type": "'b"}], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Return", "description": "The thread which has successfully terminated", "type": ["'a"]}, {"name": "Fail", "description": "The thread raised an exception", "type": ["exn"]}, {"name": "Sleep", "description": "The thread is sleeping", "type": []}]}}}, {"value": {"name": "Lwt.state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|7613"}, "info": {"description": "<span class=\"code\" >state t<\/span> returns the state of a thread"}, "type": "'a Lwt.t -> 'a Lwt.state", "params": [{"name": "", "type": "'a Lwt.t"}]}}, {"comment": "<h6>Cancelable threads<\/h6>"}, {"comment": "Cancelable threads are the same as regular threads except that\n    they can be canceled."}, {"exception": {"name": "Lwt.Canceled", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|7820"}, "info": {"description": "Canceled threads fails with this exception"}}}, {"value": {"name": "Lwt.task", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|7892"}, "info": {"description": "<span class=\"code\" >task ()<\/span> is the same as <span class=\"code\" >wait ()<\/span> except that threads created\n      with <span class=\"code\" >task<\/span> can be canceled."}, "type": "unit -> 'a Lwt.t * 'a Lwt.u", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt.on_cancel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|8031"}, "info": {"description": "<span class=\"code\" >on_cancel t f<\/span> executes <span class=\"code\" >f<\/span> when <span class=\"code\" >t<\/span> is canceled. This is the\n      same as catching <span class=\"code\" >Canceled<\/span>."}, "type": "'a Lwt.t -> (unit -> unit) -> unit", "params": [{"name": "", "type": "'a Lwt.t"}, {"name": "", "type": "unit -> unit"}]}}, {"value": {"name": "Lwt.cancel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|8186"}, "info": {"description": "<span class=\"code\" >cancel t<\/span> cancels the threads <span class=\"code\" >t<\/span>. This means that the deepest\n      sleeping thread created with <span class=\"code\" >task<\/span> and connected to <span class=\"code\" >t<\/span> is\n      wakeup with the exception <a href=\"{exception|Lwt.Canceled}\" ><span class=\"code\" >Lwt.Canceled<\/span><\/a>.<br><\/br>\n      For example, in the following code:<br><\/br>\n      <span class=\"codepre\" >\n        let waiter, wakener = task () in\n        cancel (waiter &gt;&gt; printl \"plop\")\n      <\/span><br><\/br>\n      <span class=\"code\" >waiter<\/span> will be waked up with <a href=\"{exception|Lwt.Canceled}\" ><span class=\"code\" >Lwt.Canceled<\/span><\/a>."}, "type": "'a Lwt.t -> unit", "params": [{"name": "", "type": "'a Lwt.t"}]}}, {"value": {"name": "Lwt.pick", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|8594"}, "info": {"description": "<span class=\"code\" >pick l<\/span> is the same as <a href=\"{value|Lwt.choose}\" ><span class=\"code\" >Lwt.choose<\/span><\/a>, except that it cancels all\n      sleeping threads when one terminates.<br><\/br>\n      Note: <a href=\"{value|Lwt.pick}\" ><span class=\"code\" >Lwt.pick<\/span><\/a> leaves the local values of the current thread\n      unchanged."}, "type": "'a Lwt.t list -> 'a Lwt.t", "params": [{"name": "", "type": "'a Lwt.t list"}]}}, {"value": {"name": "Lwt.npick", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|8823"}, "info": {"description": "<span class=\"code\" >npick l<\/span> is the same as <a href=\"{value|Lwt.nchoose}\" ><span class=\"code\" >Lwt.nchoose<\/span><\/a>, except that it cancels all\n      sleeping threads when one terminates.<br><\/br>\n      Note: <a href=\"{value|Lwt.npick}\" ><span class=\"code\" >Lwt.npick<\/span><\/a> leaves the local values of the current thread\n      unchanged."}, "type": "'a Lwt.t list -> 'a list Lwt.t", "params": [{"name": "", "type": "'a Lwt.t list"}]}}, {"value": {"name": "Lwt.protected", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|9061"}, "info": {"description": "<span class=\"code\" >protected thread<\/span> creates a new cancelable thread which behave\n      as <span class=\"code\" >thread<\/span> except that cancelling it does not cancel\n      <span class=\"code\" >thread<\/span>."}, "type": "'a Lwt.t -> 'a Lwt.t", "params": [{"name": "", "type": "'a Lwt.t"}]}}, {"comment": "<h6>Pause<\/h6>"}, {"value": {"name": "Lwt.pause", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|9258"}, "info": {"description": "<span class=\"code\" >pause ()<\/span> is a sleeping thread which is wake up on the next\n      call to <a href=\"{value|Lwt.wakeup_paused}\" ><span class=\"code\" >Lwt.wakeup_paused<\/span><\/a>. A thread created with <span class=\"code\" >pause<\/span> can be\n      canceled."}, "type": "unit -> unit Lwt.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt.wakeup_paused", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|9441"}, "info": {"description": "<span class=\"code\" >wakeup_paused ()<\/span> wakes up all threads which suspended\n      themselves with <a href=\"{value|Lwt.pause}\" ><span class=\"code\" >Lwt.pause<\/span><\/a>.<br><\/br>\n      This function is called by the scheduler, before entering the\n      main loop. You usually do not have to call it directly, except\n      if you are writing a custom scheduler.<br><\/br>\n      Note that if a paused thread resume and pause again, it will not\n      be wakeup at this point."}, "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt.paused_count", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|9858"}, "info": {"description": "<span class=\"code\" >paused_count ()<\/span> returns the number of thread currently\n      paused."}, "type": "unit -> int", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt.register_pause_notifier", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|9970"}, "info": {"description": "<span class=\"code\" >register_pause_notifier f<\/span> register a function <span class=\"code\" >f<\/span> that will be\n      called each time pause is called. The parameter passed to <span class=\"code\" >f<\/span> is\n      the new number of threads paused. It is usefull to be able to\n      call <a href=\"{value|Lwt.wakeup_paused}\" ><span class=\"code\" >Lwt.wakeup_paused<\/span><\/a> when there is no scheduler"}, "type": "(int -> unit) -> unit", "params": [{"name": "", "type": "int -> unit"}]}}, {"comment": "<h6>Misc<\/h6>"}, {"value": {"name": "Lwt.on_success", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|10308"}, "info": {"description": "<span class=\"code\" >on_success t f<\/span> executes <span class=\"code\" >f<\/span> when <span class=\"code\" >t<\/span> terminates without\n      failing. This is the same as:<br><\/br>\n      <span class=\"codepre\" >\n        ignore_result (bind t (fun x -&gt; f x; return ()))\n      <\/span><br><\/br>\n      but a bit more efficient."}, "type": "'a Lwt.t -> ('a -> unit) -> unit", "params": [{"name": "", "type": "'a Lwt.t"}, {"name": "", "type": "'a -> unit"}]}}, {"value": {"name": "Lwt.on_failure", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt.mli|10568"}, "info": {"description": "<span class=\"code\" >on_failure t f<\/span> executes <span class=\"code\" >f<\/span> when <span class=\"code\" >t<\/span> terminates and\n      fails. This is the same as:<br><\/br>\n      <span class=\"codepre\" >\n        ignore_result (catch t (fun e -&gt; f e; return ()))\n      <\/span><br><\/br>\n      but a bit more efficient."}, "type": "'a Lwt.t -> (exn -> unit) -> unit", "params": [{"name": "", "type": "'a Lwt.t"}, {"name": "", "type": "exn -> unit"}]}}], "dependencies": {"uses": [], "used_by": ["Lwt_util", "Lwt_stream", "Lwt_mvar", "Lwt_mutex", "Lwt_list", "Lwt_pool", "Lwt_condition", "Lwt_switch", "Bitstring_stream", "OS", "Net", "Block", "Dns", "Http", "Openflow", "OUnit", "Fs"]}}}, "Lwt_util": {"module": {"name": "Lwt_util", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|0"}, "info": {"description": "Note: This lodule is deprecated. Use <a href=\"{module|Lwt_list}\" ><span class=\"code\" >Lwt_list<\/span><\/a> and <a href=\"{module|Lwt_pool}\" ><span class=\"code\" >Lwt_pool<\/span><\/a>\n    instead."}, "type": "sig  end", "module_structure": [{"comment": "<h2>Lists iterators<\/h2>"}, {"value": {"name": "Lwt_util.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|1115"}, "info": {"description": "<span class=\"code\" >iter f l<\/span> start a thread for each element in <span class=\"code\" >l<\/span>.  The threads\n        are started according to the list order, but then can run\n        concurrently.  It terminates when all the threads are\n        terminated, if all threads are successful.  It fails if any of\n        the threads fail."}, "type": "('a -> unit Lwt.t) -> 'a list -> unit Lwt.t", "params": [{"name": "", "type": "'a -> unit Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_util.iter_serial", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|1471"}, "info": {"description": "Similar to <span class=\"code\" >iter<\/span> but wait for one thread to terminate before\n        starting the next one."}, "type": "('a -> unit Lwt.t) -> 'a list -> unit Lwt.t", "params": [{"name": "", "type": "'a -> unit Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_util.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|1638"}, "info": {"description": "<span class=\"code\" >map f l<\/span> apply <span class=\"code\" >f<\/span> to each element in <span class=\"code\" >l<\/span> and collect the\n        results of the threads thus created.  The threads are started\n        according to the list order, but then can run concurrently.\n        <span class=\"code\" >map f l<\/span> fails if any of the threads fail."}, "type": "('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_util.map_with_waiting_action", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|1954"}, "info": {"description": "<span class=\"code\" >map_with_waiting_action f wa l<\/span> apply <span class=\"code\" >f<\/span> to each element\n        in <span class=\"code\" >l<\/span> and collect the results of the threads thus created.\n        The threads are started according to the list order, but\n        then can run concurrently.  The difference with <span class=\"code\" >map f l<\/span> is\n        that function wa will be called on the element that the\n        function is waiting for its termination."}, "type": "('a -> 'b Lwt.t) -> ('a -> unit) -> 'a list -> 'b list Lwt.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_util.map_serial", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|2455"}, "info": {"description": "Similar to <span class=\"code\" >map<\/span> but wait for one thread to terminate before\n        starting the next one."}, "type": "('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_util.fold_left", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|2621"}, "info": {"description": "Similar to <span class=\"code\" >List.fold_left<\/span>."}, "type": "('a -> 'b -> 'a Lwt.t) -> 'a -> 'b list -> 'a Lwt.t", "params": [{"name": "", "type": "'a -> 'b -> 'a Lwt.t"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a list"}]}}, {"comment": "<h2>Regions<\/h2>"}, {"type": {"name": "Lwt_util.region", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|2771"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_util.make_region", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|2771"}, "info": {"description": "<span class=\"code\" >make_region sz<\/span> create a region of size <span class=\"code\" >sz<\/span>."}, "type": "int -> Lwt_util.region", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Lwt_util.resize_region", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|2863"}, "info": {"description": "<span class=\"code\" >resize_region reg sz<\/span> resize the region <span class=\"code\" >reg<\/span> to size <span class=\"code\" >sz<\/span>."}, "type": "Lwt_util.region -> int -> unit", "params": [{"name": "", "type": "Lwt_util.region"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Lwt_util.run_in_region", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_util.mli|2979"}, "info": {"description": "<span class=\"code\" >run_in_region reg size f<\/span> execute the thread produced by the\n          function <span class=\"code\" >f<\/span> in the region <span class=\"code\" >reg<\/span>. The thread is not started\n          before some room is available in the region."}, "type": "Lwt_util.region -> int -> (unit -> 'a Lwt.t) -> 'a Lwt.t", "params": [{"name": "", "type": "Lwt_util.region"}, {"name": "", "type": "int"}, {"name": "", "type": "unit -> 'a Lwt.t"}]}}], "dependencies": {"uses": ["Lwt"], "used_by": []}}}, "Lwt_stream": {"module": {"name": "Lwt_stream", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|0"}, "info": {"description": "Data streams"}, "type": "sig  end", "module_structure": [{"type": {"name": "Lwt_stream.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|1342"}, "info": {"description": "Type of a stream holding values of type <span class=\"code\" >'a<\/span>"}, "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"comment": "Naming convention: in this module all function taking a function\n    which is applied to all element of the streams are suffixed by:<br><\/br><ul><li><span class=\"code\" >_s<\/span> when the function returns a thread and calls are serialised<\/li><li><span class=\"code\" >_p<\/span> when the function returns a thread and calls are parallelised<\/li><\/ul>"}, {"comment": "<h6>Construction<\/h6>"}, {"value": {"name": "Lwt_stream.from", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|1342"}, "info": {"description": "<span class=\"code\" >from f<\/span> creates an stream from the given input function. <span class=\"code\" >f<\/span> is\n      called each time more input is needed, and the stream ends when\n      <span class=\"code\" >f<\/span> returns <span class=\"code\" >None<\/span>."}, "type": "(unit -> 'a option Lwt.t) -> 'a Lwt_stream.t", "params": [{"name": "", "type": "unit -> 'a option Lwt.t"}]}}, {"value": {"name": "Lwt_stream.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|1558"}, "info": {"description": "<span class=\"code\" >create ()<\/span> returns a new stream and a push function"}, "type": "unit -> 'a Lwt_stream.t * ('a option -> unit)", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt_stream.of_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|1669"}, "info": {"description": "<span class=\"code\" >of_list l<\/span> creates a stream returning all elements of <span class=\"code\" >l<\/span>"}, "type": "'a list -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_stream.of_array", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|1768"}, "info": {"description": "<span class=\"code\" >of_array a<\/span> creates a stream returning all elements of <span class=\"code\" >a<\/span>"}, "type": "'a array -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a array"}]}}, {"value": {"name": "Lwt_stream.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|1870"}, "info": {"description": "<span class=\"code\" >of_string str<\/span> creates a stream returning all characters of\n      <span class=\"code\" >str<\/span>"}, "type": "string -> char Lwt_stream.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Lwt_stream.clone", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|1986"}, "info": {"description": "<span class=\"code\" >clone st<\/span> clone the given stream. Operations on each stream\n      will not affect the other.<br><\/br>\n      For example:<br><\/br>\n      <span class=\"codepre\" >\n        # let st1 = Lwt_stream.of_list [1; 2; 3];;\n        val st1 : int Lwt_stream.t = &lt;abstr&gt;\n        # let st2 = Lwt_stream.clone st1;;\n        val st2 : int Lwt_stream.t = &lt;abstr&gt;\n        # lwt x = Lwt_stream.next st1;;\n        val x : int = 1\n        # lwt y = Lwt_stream.next st2;;\n        val y : int = 1\n      <\/span>"}, "type": "'a Lwt_stream.t -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"comment": "<h6>Destruction<\/h6>"}, {"value": {"name": "Lwt_stream.to_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|2492"}, "info": {"description": "Returns the list of elements of the given stream"}, "type": "'a Lwt_stream.t -> 'a list Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|2587"}, "info": {"description": "Returns the word composed of all characters of the given\n      stream"}, "type": "char Lwt_stream.t -> string Lwt.t", "params": [{"name": "", "type": "char Lwt_stream.t"}]}}, {"comment": "<h6>Data retreival<\/h6>"}, {"exception": {"name": "Lwt_stream.Empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|2733"}, "info": {"description": "Exception raised when trying to retreive data from an empty\n      stream."}}}, {"value": {"name": "Lwt_stream.peek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|2833"}, "info": {"description": "<span class=\"code\" >peek st<\/span> returns the first element of the stream, if any,\n      without removing it."}, "type": "'a Lwt_stream.t -> 'a option Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.npeek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|2964"}, "info": {"description": "<span class=\"code\" >npeek n st<\/span> returns at most the first <span class=\"code\" >n<\/span> elements of <span class=\"code\" >st<\/span>,\n      without removing them."}, "type": "int -> 'a Lwt_stream.t -> 'a list Lwt.t", "params": [{"name": "", "type": "int"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|3105"}, "info": {"description": "<span class=\"code\" >get st<\/span> remove and returns the first element of the stream, if\n      any."}, "type": "'a Lwt_stream.t -> 'a option Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.nget", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|3224"}, "info": {"description": "<span class=\"code\" >nget n st<\/span> remove and returns at most the first <span class=\"code\" >n<\/span> elements of\n      <span class=\"code\" >st<\/span>."}, "type": "int -> 'a Lwt_stream.t -> 'a list Lwt.t", "params": [{"name": "", "type": "int"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.get_while", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|3351"}, "info": "", "type": "('a -> bool) -> 'a Lwt_stream.t -> 'a list Lwt.t", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.get_while_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|3405"}, "info": {"description": "<span class=\"code\" >get_while f st<\/span> returns the longest prefix of <span class=\"code\" >st<\/span> where all\n      elements satisfy <span class=\"code\" >f<\/span>."}, "type": "('a -> bool Lwt.t) -> 'a Lwt_stream.t -> 'a list Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.next", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|3567"}, "info": {"description": "<span class=\"code\" >next st<\/span> remove and returns the next element of the stream, of\n      fail with <a href=\"{exception|Lwt_stream.Empty}\" ><span class=\"code\" >Lwt_stream.Empty<\/span><\/a> if the stream is empty."}, "type": "'a Lwt_stream.t -> 'a Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.last_new", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|3718"}, "info": {"description": "<span class=\"code\" >next_new st<\/span> if no element are available on <span class=\"code\" >st<\/span> without\n      sleeping, then it is the same as <span class=\"code\" >next st<\/span>. Otherwise it removes\n      all elements of <span class=\"code\" >st<\/span> that are ready except the last one, and\n      return it.<br><\/br>\n      If fails with <a href=\"{exception|Lwt_stream.Empty}\" ><span class=\"code\" >Lwt_stream.Empty<\/span><\/a> if the stream has no more elements"}, "type": "'a Lwt_stream.t -> 'a Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.junk", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|4038"}, "info": {"description": "<span class=\"code\" >junk st<\/span> remove the first element of <span class=\"code\" >st<\/span>."}, "type": "'a Lwt_stream.t -> unit Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.njunk", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|4122"}, "info": {"description": "<span class=\"code\" >njunk n st<\/span> removes at most the first <span class=\"code\" >n<\/span> elements of the\n      stream."}, "type": "int -> 'a Lwt_stream.t -> unit Lwt.t", "params": [{"name": "", "type": "int"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.junk_while", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|4243"}, "info": "", "type": "('a -> bool) -> 'a Lwt_stream.t -> unit Lwt.t", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.junk_while_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|4295"}, "info": {"description": "<span class=\"code\" >junk_while f st<\/span> removes all elements at the beginning of the\n      streams which satisfy <span class=\"code\" >f<\/span>."}, "type": "('a -> bool Lwt.t) -> 'a Lwt_stream.t -> unit Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.junk_old", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|4461"}, "info": {"description": "<span class=\"code\" >junk_old st<\/span> removes all elements that are ready to be read\n      without yeilding from <span class=\"code\" >st<\/span>.<br><\/br>\n      For example the <span class=\"code\" >read_password<\/span> function of <span class=\"code\" >Lwt_read_line<\/span> use\n      that to junk key previously typed by the user."}, "type": "'a Lwt_stream.t -> unit Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.get_available", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|4726"}, "info": {"description": "<span class=\"code\" >get_available l<\/span> returns all available elements of <span class=\"code\" >l<\/span> without\n      blocking"}, "type": "'a Lwt_stream.t -> 'a list", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.get_available_up_to", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|4851"}, "info": {"description": "<span class=\"code\" >get_available_up_to l n<\/span> returns up to <span class=\"code\" >n<\/span> elements of <span class=\"code\" >l<\/span>\n      without blocking"}, "type": "int -> 'a Lwt_stream.t -> 'a list", "params": [{"name": "", "type": "int"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|4993"}, "info": {"description": "<span class=\"code\" >is_empty enum<\/span> returns wether the given stream is empty"}, "type": "'a Lwt_stream.t -> bool Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}]}}, {"comment": "<h6>Stream transversal<\/h6>"}, {"comment": "Note: all the following functions are destructive.<br><\/br>\n    For example:<br><\/br>\n    <span class=\"codepre\" >\n      # let st1 = Lwt_stream.of_list [1; 2; 3];;\n      val st1 : int Lwt_stream.t = &lt;abstr&gt;\n      # let st2 = Lwt_stream.map string_of_int st1;;\n      val st2 : string Lwt_stream.t = &lt;abstr&gt;\n      # lwt x = Lwt_stream.next st1;;\n      val x : int = 1\n      # lwt y = Lwt_stream.next st2;;\n      val y : string = \"2\"\n    <\/span>"}, {"value": {"name": "Lwt_stream.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|5533"}, "info": {"description": "<span class=\"code\" >choose l<\/span> creates an stream from a list of streams. The\n      resulting stream will returns elements returned by any stream of\n      <span class=\"code\" >l<\/span> in an unspecified order."}, "type": "'a Lwt_stream.t list -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a Lwt_stream.t list"}]}}, {"value": {"name": "Lwt_stream.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|5737"}, "info": "", "type": "('a -> 'b) -> 'a Lwt_stream.t -> 'b Lwt_stream.t", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.map_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|5774"}, "info": {"description": "<span class=\"code\" >map f st<\/span> maps the value returned by <span class=\"code\" >st<\/span> with <span class=\"code\" >f<\/span>"}, "type": "('a -> 'b Lwt.t) -> 'a Lwt_stream.t -> 'b Lwt_stream.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|5881"}, "info": "", "type": "('a -> bool) -> 'a Lwt_stream.t -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.filter_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|5923"}, "info": {"description": "<span class=\"code\" >filter f st<\/span> keeps only value <span class=\"code\" >x<\/span> such that <span class=\"code\" >f x<\/span> is <span class=\"code\" >true<\/span>"}, "type": "('a -> bool Lwt.t) -> 'a Lwt_stream.t -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.filter_map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6044"}, "info": "", "type": "('a -> 'b option) -> 'a Lwt_stream.t -> 'b Lwt_stream.t", "params": [{"name": "", "type": "'a -> 'b option"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.filter_map_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6095"}, "info": {"description": "<span class=\"code\" >filter_map f st<\/span> filter and map <span class=\"code\" >st<\/span> at the same time"}, "type": "('a -> 'b option Lwt.t) -> 'a Lwt_stream.t -> 'b Lwt_stream.t", "params": [{"name": "", "type": "'a -> 'b option Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.map_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6219"}, "info": "", "type": "('a -> 'b list) -> 'a Lwt_stream.t -> 'b Lwt_stream.t", "params": [{"name": "", "type": "'a -> 'b list"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.map_list_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6266"}, "info": {"description": "<span class=\"code\" >map_list f st<\/span> applies <span class=\"code\" >f<\/span> on each element of <span class=\"code\" >st<\/span> and flattens\n      the lists returned"}, "type": "('a -> 'b list Lwt.t) -> 'a Lwt_stream.t -> 'b Lwt_stream.t", "params": [{"name": "", "type": "'a -> 'b list Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6421"}, "info": "", "type": "('a -> 'b -> 'b) -> 'a Lwt_stream.t -> 'b -> 'b Lwt.t", "params": [{"name": "", "type": "'a -> 'b -> 'b"}, {"name": "", "type": "'a Lwt_stream.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt_stream.fold_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6475"}, "info": {"description": "<span class=\"code\" >fold f s x<\/span> fold_like function for streams."}, "type": "('a -> 'b -> 'b Lwt.t) -> 'a Lwt_stream.t -> 'b -> 'b Lwt.t", "params": [{"name": "", "type": "'a -> 'b -> 'b Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt_stream.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6592"}, "info": "", "type": "('a -> unit) -> 'a Lwt_stream.t -> unit Lwt.t", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.iter_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6638"}, "info": "", "type": "('a -> unit Lwt.t) -> 'a Lwt_stream.t -> unit Lwt.t", "params": [{"name": "", "type": "'a -> unit Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.iter_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6692"}, "info": {"description": "<span class=\"code\" >iter f s<\/span> iterates over all elements of the stream"}, "type": "('a -> unit Lwt.t) -> 'a Lwt_stream.t -> unit Lwt.t", "params": [{"name": "", "type": "'a -> unit Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6808"}, "info": "", "type": "('a -> bool) -> 'a Lwt_stream.t -> 'a option Lwt.t", "params": [{"name": "", "type": "'a -> bool"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.find_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6859"}, "info": {"description": "<span class=\"code\" >find f s<\/span> find an element in a stream."}, "type": "('a -> bool Lwt.t) -> 'a Lwt_stream.t -> 'a option Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.find_map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|6968"}, "info": "", "type": "('a -> 'b option) -> 'a Lwt_stream.t -> 'b option Lwt.t", "params": [{"name": "", "type": "'a -> 'b option"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.find_map_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|7028"}, "info": {"description": "<span class=\"code\" >find f s<\/span> find and map at the same time."}, "type": "('a -> 'b option Lwt.t) -> 'a Lwt_stream.t -> 'b option Lwt.t", "params": [{"name": "", "type": "'a -> 'b option Lwt.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.combine", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|7148"}, "info": {"description": "<span class=\"code\" >combine s1 s2<\/span> combine two streams. The stream will ends when\n      the first stream ends."}, "type": "'a Lwt_stream.t -> 'b Lwt_stream.t -> ('a * 'b) Lwt_stream.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.append", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|7292"}, "info": {"description": "<span class=\"code\" >append s1 s2<\/span> returns a stream which returns all elements of\n      <span class=\"code\" >s1<\/span>, then all elements of <span class=\"code\" >s2<\/span>"}, "type": "'a Lwt_stream.t -> 'a Lwt_stream.t -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}, {"name": "", "type": "'a Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.concat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|7436"}, "info": {"description": "<span class=\"code\" >concat st<\/span> returns the concatenation of all streams of <span class=\"code\" >st<\/span>."}, "type": "'a Lwt_stream.t Lwt_stream.t -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a Lwt_stream.t Lwt_stream.t"}]}}, {"value": {"name": "Lwt_stream.flatten", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|7536"}, "info": {"description": "<span class=\"code\" >flatten st = map_list (fun l -&gt; l) st<\/span>"}, "type": "'a list Lwt_stream.t -> 'a Lwt_stream.t", "params": [{"name": "", "type": "'a list Lwt_stream.t"}]}}, {"comment": "<h6>Parsing<\/h6>"}, {"value": {"name": "Lwt_stream.parse", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|7638"}, "info": {"description": "<span class=\"code\" >parse st f<\/span> parses <span class=\"code\" >st<\/span> with <span class=\"code\" >f<\/span>. If <span class=\"code\" >f<\/span> raise an exception,\n      <span class=\"code\" >st<\/span> is restored to its previous state."}, "type": "'a Lwt_stream.t -> ('a Lwt_stream.t -> 'b Lwt.t) -> 'b Lwt.t", "params": [{"name": "", "type": "'a Lwt_stream.t"}, {"name": "", "type": "'a Lwt_stream.t -> 'b Lwt.t"}]}}, {"comment": "<h6>Misc<\/h6>"}, {"value": {"name": "Lwt_stream.hexdump", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_stream.mli|7824"}, "info": {"description": "<span class=\"code\" >hexdump byte_stream<\/span> returns a stream which is the same as the\n      output of <span class=\"code\" >hexdump -C<\/span>.<br><\/br>\n      Basically, here is a simple implementation of <span class=\"code\" >hexdump -C<\/span>:<br><\/br>\n      <span class=\"codepre\" >\n        open Lwt\n        open Lwt_io\n        let () = Lwt_main.run (write_lines stdout (Lwt_stream.hexdump (read_lines stdin)))\n      <\/span>"}, "type": "char Lwt_stream.t -> string Lwt_stream.t", "params": [{"name": "", "type": "char Lwt_stream.t"}]}}], "dependencies": {"uses": ["Lwt"], "used_by": ["Bitstring_stream", "OS", "Net", "Http"]}}}, "Lwt_sequence": {"module": {"name": "Lwt_sequence", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|0"}, "info": {"description": "Mutable sequence of elements"}, "type": "sig  end", "module_structure": [{"comment": "A sequence is an object holding a list of elements which support\n    the following operations:<br><\/br><ul><li>adding an element to the left or the right in time and space O(1)<\/li><li>taking an element from the left or the right in time and space O(1)<\/li><li>removing a previously added element from a sequence in time and space O(1)<\/li><li>removing an element while the sequence is being transversed.<\/li><\/ul>"}, {"type": {"name": "Lwt_sequence.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|1452"}, "info": {"description": "Type of a sequence holding values of type <span class=\"code\" >'a<\/span>"}, "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "abstract"}}}, {"type": {"name": "Lwt_sequence.node", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|1566"}, "info": {"description": "Type of a node holding one value of type <span class=\"code\" >'a<\/span> in a sequence"}, "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"comment": "<h6>Operation on nodes<\/h6>"}, {"value": {"name": "Lwt_sequence.get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|1566"}, "info": {"description": "Returns the contents of a node"}, "type": "'a Lwt_sequence.node -> 'a", "params": [{"name": "", "type": "'a Lwt_sequence.node"}]}}, {"value": {"name": "Lwt_sequence.set", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|1631"}, "info": {"description": "Change the contents of a node"}, "type": "'a Lwt_sequence.node -> 'a -> unit", "params": [{"name": "", "type": "'a Lwt_sequence.node"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt_sequence.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|1703"}, "info": {"description": "Removes a node from the sequence it is part of. It does nothing\n      if the node has already been removed."}, "type": "'a Lwt_sequence.node -> unit", "params": [{"name": "", "type": "'a Lwt_sequence.node"}]}}, {"comment": "<h6>Operations on sequence<\/h6>"}, {"value": {"name": "Lwt_sequence.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|1885"}, "info": {"description": "<span class=\"code\" >create ()<\/span> creates a new empty sequence"}, "type": "unit -> 'a Lwt_sequence.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt_sequence.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|1962"}, "info": {"description": "Returns <span class=\"code\" >true<\/span> iff the given sequence is empty"}, "type": "'a Lwt_sequence.t -> bool", "params": [{"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|2047"}, "info": {"description": "Returns the number of elemenets in the given sequence. This is a\n      O(n) operation where <span class=\"code\" >n<\/span> is the number of elements in the\n      sequence."}, "type": "'a Lwt_sequence.t -> int", "params": [{"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.add_l", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|2227"}, "info": {"description": "<span class=\"code\" >add_l x s<\/span> adds <span class=\"code\" >x<\/span> to the left of the sequence <span class=\"code\" >s<\/span>"}, "type": "'a -> 'a Lwt_sequence.t -> 'a Lwt_sequence.node", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.add_r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|2324"}, "info": {"description": "<span class=\"code\" >add_l x s<\/span> adds <span class=\"code\" >x<\/span> to the right of the sequence <span class=\"code\" >s<\/span>"}, "type": "'a -> 'a Lwt_sequence.t -> 'a Lwt_sequence.node", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a Lwt_sequence.t"}]}}, {"exception": {"name": "Lwt_sequence.Empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|2422"}, "info": {"description": "Exception raised by <span class=\"code\" >take_l<\/span> and <span class=\"code\" >tale_s<\/span> and when the sequence\n      is empty"}}}, {"value": {"name": "Lwt_sequence.take_l", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|2527"}, "info": {"description": "<span class=\"code\" >take_l x s<\/span> remove and returns the leftmost element of <span class=\"code\" >s<\/span>", "raised_exceptions": [{"raised_exception": "Empty", "text": "if the sequence is empty"}]}, "type": "'a Lwt_sequence.t -> 'a", "params": [{"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.take_r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|2666"}, "info": {"description": "<span class=\"code\" >take_l x s<\/span> remove and returns the rightmost element of <span class=\"code\" >s<\/span>", "raised_exceptions": [{"raised_exception": "Empty", "text": "if the sequence is empty"}]}, "type": "'a Lwt_sequence.t -> 'a", "params": [{"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.take_opt_l", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|2806"}, "info": {"description": "<span class=\"code\" >take_opt_l x s<\/span> remove and returns <span class=\"code\" >Some x<\/span> where <span class=\"code\" >x<\/span> is the\n      leftmost element of <span class=\"code\" >s<\/span> or <span class=\"code\" >None<\/span> if <span class=\"code\" >s<\/span> is empty"}, "type": "'a Lwt_sequence.t -> 'a option", "params": [{"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.take_opt_r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|2969"}, "info": {"description": "<span class=\"code\" >take_opt_l x s<\/span> remove and returns <span class=\"code\" >Some x<\/span> where <span class=\"code\" >x<\/span> is the\n      rightmost element of <span class=\"code\" >s<\/span> or <span class=\"code\" >None<\/span> if <span class=\"code\" >s<\/span> is empty"}, "type": "'a Lwt_sequence.t -> 'a option", "params": [{"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.transfer_l", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|3133"}, "info": {"description": "<span class=\"code\" >transfer_l s1 s2<\/span> removes all elements of <span class=\"code\" >s1<\/span> and add them at\n      the left of <span class=\"code\" >s2<\/span>. This operation runs in constant time and\n      space."}, "type": "'a Lwt_sequence.t -> 'a Lwt_sequence.t -> unit", "params": [{"name": "", "type": "'a Lwt_sequence.t"}, {"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.transfer_r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|3323"}, "info": {"description": "<span class=\"code\" >transfer_r s1 s2<\/span> removes all elements of <span class=\"code\" >s1<\/span> and add them at\n      the right of <span class=\"code\" >s2<\/span>. This operation runs in constant time and\n      space."}, "type": "'a Lwt_sequence.t -> 'a Lwt_sequence.t -> unit", "params": [{"name": "", "type": "'a Lwt_sequence.t"}, {"name": "", "type": "'a Lwt_sequence.t"}]}}, {"comment": "<h6>Sequence iterators<\/h6>"}, {"comment": "Note: it is OK to remove a node while traversing a sequence"}, {"value": {"name": "Lwt_sequence.iter_l", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|3613"}, "info": {"description": "<span class=\"code\" >iter_l f s<\/span> applies <span class=\"code\" >f<\/span> on all elements of <span class=\"code\" >s<\/span> starting from\n      the left"}, "type": "('a -> unit) -> 'a Lwt_sequence.t -> unit", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.iter_r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|3742"}, "info": {"description": "<span class=\"code\" >iter_l f s<\/span> applies <span class=\"code\" >f<\/span> on all elements of <span class=\"code\" >s<\/span> starting from\n      the right"}, "type": "('a -> unit) -> 'a Lwt_sequence.t -> unit", "params": [{"name": "", "type": "'a -> unit"}, {"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.iter_node_l", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|3872"}, "info": {"description": "<span class=\"code\" >iter_l f s<\/span> applies <span class=\"code\" >f<\/span> on all nodes of <span class=\"code\" >s<\/span> starting from\n      the left"}, "type": "('a Lwt_sequence.node -> unit) -> 'a Lwt_sequence.t -> unit", "params": [{"name": "", "type": "'a Lwt_sequence.node -> unit"}, {"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.iter_node_r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|4008"}, "info": {"description": "<span class=\"code\" >iter_l f s<\/span> applies <span class=\"code\" >f<\/span> on all nodes of <span class=\"code\" >s<\/span> starting from\n      the right"}, "type": "('a Lwt_sequence.node -> unit) -> 'a Lwt_sequence.t -> unit", "params": [{"name": "", "type": "'a Lwt_sequence.node -> unit"}, {"name": "", "type": "'a Lwt_sequence.t"}]}}, {"value": {"name": "Lwt_sequence.fold_l", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|4145"}, "info": {"description": "<span class=\"code\" >fold_l f s<\/span> is:\n      <span class=\"codepre\" >\n        fold_l f s x = f en (... (f e2 (f e1 x)))\n      <\/span>\n      where <span class=\"code\" >e1<\/span>, <span class=\"code\" >e2<\/span>, ..., <span class=\"code\" >en<\/span> are the elements of <span class=\"code\" >s<\/span>"}, "type": "('a -> 'b -> 'b) -> 'a Lwt_sequence.t -> 'b -> 'b", "params": [{"name": "", "type": "'a -> 'b -> 'b"}, {"name": "", "type": "'a Lwt_sequence.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt_sequence.fold_r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_sequence.mli|4350"}, "info": {"description": "<span class=\"code\" >fold_r f s<\/span> is:\n      <span class=\"codepre\" >\n        fold_r f s x = f e1 (f e2 (... (f en x)))\n      <\/span>\n      where <span class=\"code\" >e1<\/span>, <span class=\"code\" >e2<\/span>, ..., <span class=\"code\" >en<\/span> are the elements of <span class=\"code\" >s<\/span>"}, "type": "('a -> 'b -> 'b) -> 'a Lwt_sequence.t -> 'b -> 'b", "params": [{"name": "", "type": "'a -> 'b -> 'b"}, {"name": "", "type": "'a Lwt_sequence.t"}, {"name": "", "type": "'a"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Lwt_mvar": {"module": {"name": "Lwt_mvar", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mvar.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mvar.mli|0"}, "info": {"description": "Mailbox variables"}, "type": "sig  end", "module_structure": [{"comment": "\"Mailbox\" variables implement a synchronising variable, used for\n    communication between concurrent threads.<br><\/br>\n    This code adapted from\n    <a href=\"http:\/\/eigenclass.org\/hiki.rb?cmd=view&amp;p=lightweight-threads-with-lwt\" >Comparing lightweight threads (eigenclass.org)<\/a>"}, {"type": {"name": "Lwt_mvar.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mvar.mli|2269"}, "info": {"description": "The type of a mailbox variable. Mailbox variables are used to\n      communicate values between threads in a synchronous way. The\n      type parameter specifies the type of the value propagated from\n      <span class=\"code\" >put<\/span> to <span class=\"code\" >take<\/span>."}, "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_mvar.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mvar.mli|2269"}, "info": {"description": "<span class=\"code\" >create v<\/span> creates a new mailbox variable containing value <span class=\"code\" >v<\/span>."}, "type": "'a -> 'a Lwt_mvar.t", "params": [{"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt_mvar.create_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mvar.mli|2367"}, "info": {"description": "<span class=\"code\" >create ()<\/span> creates a new empty mailbox variable."}, "type": "unit -> 'a Lwt_mvar.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt_mvar.put", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mvar.mli|2459"}, "info": {"description": "<span class=\"code\" >put mvar value<\/span> puts a value into a mailbox variable. This\n      value will remain in the mailbox until <span class=\"code\" >take<\/span> is called to\n      remove it. If the mailbox is not empty, the current thread will\n      block until it is emptied."}, "type": "'a Lwt_mvar.t -> 'a -> unit Lwt.t", "params": [{"name": "", "type": "'a Lwt_mvar.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt_mvar.take", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mvar.mli|2732"}, "info": {"description": "<span class=\"code\" >take mvar<\/span> will take any currently available value from the\n      mailbox variable. If no value is currently available, the\n      current thread will block, awaiting a value to be <span class=\"code\" >put<\/span> by\n      another thread."}, "type": "'a Lwt_mvar.t -> 'a Lwt.t", "params": [{"name": "", "type": "'a Lwt_mvar.t"}]}}], "dependencies": {"uses": ["Lwt"], "used_by": ["OS", "Net"]}}}, "Lwt_mutex": {"module": {"name": "Lwt_mutex", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli|0"}, "info": {"description": "Cooperative locks for mutual exclusion"}, "type": "sig  end", "module_structure": [{"type": {"name": "Lwt_mutex.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli|1086"}, "info": {"description": "Type of Lwt mutexes"}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_mutex.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli|1086"}, "info": {"description": "<span class=\"code\" >create ()<\/span> creates a new mutex, which is initially unlocked"}, "type": "unit -> Lwt_mutex.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt_mutex.lock", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli|1180"}, "info": {"description": "<span class=\"code\" >lock mutex<\/span> lockcs the mutex, that is:<br><\/br><ul><li>if the mutex is unlocked, then it is marked as locked and\n        <a href=\"{value|Lwt_mutex.lock}\" ><span class=\"code\" >Lwt_mutex.lock<\/span><\/a> returns immediatly<\/li><\/ul><ul><li>if it is locked, then <a href=\"{value|Lwt_mutex.lock}\" ><span class=\"code\" >Lwt_mutex.lock<\/span><\/a> waits for all threads waiting on\n        the mutex to terminate, then it resumes when the last one\n        unlocks the mutex<\/li><\/ul>\n      Note: threads are wake up is the same order they try to lock the\n      mutex"}, "type": "Lwt_mutex.t -> unit Lwt.t", "params": [{"name": "", "type": "Lwt_mutex.t"}]}}, {"value": {"name": "Lwt_mutex.unlock", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli|1607"}, "info": {"description": "<span class=\"code\" >unlock mutex<\/span> unlock the mutex if no threads is waiting on\n      it. Otherwise it removes the first one and resumes it."}, "type": "Lwt_mutex.t -> unit", "params": [{"name": "", "type": "Lwt_mutex.t"}]}}, {"value": {"name": "Lwt_mutex.is_locked", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli|1761"}, "info": {"description": "<span class=\"code\" >locked mutex<\/span> returns whether <span class=\"code\" >mutex<\/span> is currently locked"}, "type": "Lwt_mutex.t -> bool", "params": [{"name": "", "type": "Lwt_mutex.t"}]}}, {"value": {"name": "Lwt_mutex.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli|1856"}, "info": {"description": "<span class=\"code\" >is_empty mutex<\/span> returns <span class=\"code\" >true<\/span> if they are no thread waiting on\n      the mutex, and <span class=\"code\" >false<\/span> otherwise"}, "type": "Lwt_mutex.t -> bool", "params": [{"name": "", "type": "Lwt_mutex.t"}]}}, {"value": {"name": "Lwt_mutex.with_lock", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_mutex.mli|1995"}, "info": {"description": "<span class=\"code\" >with_lock lock f<\/span> is used to lock a mutex within a block scope.\n      The function <span class=\"code\" >f ()<\/span> is called with the mutex locked, and its\n      result is returned from the call to <div class=\"with\" >_lock<\/div>. If an exception\n      is raised from f, the mutex is also unlocked before the scope of\n      <div class=\"with\" >_lock<\/div> is exited."}, "type": "Lwt_mutex.t -> (unit -> 'a Lwt.t) -> 'a Lwt.t", "params": [{"name": "", "type": "Lwt_mutex.t"}, {"name": "", "type": "unit -> 'a Lwt.t"}]}}], "dependencies": {"uses": ["Lwt"], "used_by": ["Lwt_condition"]}}}, "Lwt_list": {"module": {"name": "Lwt_list", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|0"}, "info": {"description": "List helpers"}, "type": "sig  end", "module_structure": [{"comment": "Note: this module use the same naming convention as\n    <a href=\"{module|Lwt_stream}\" ><span class=\"code\" >Lwt_stream<\/span><\/a>."}, {"comment": "<h6>List iterators<\/h6>"}, {"value": {"name": "Lwt_list.iter_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1073"}, "info": "", "type": "('a -> unit Lwt.t) -> 'a list -> unit Lwt.t", "params": [{"name": "", "type": "'a -> unit Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.iter_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1130"}, "info": "", "type": "('a -> unit Lwt.t) -> 'a list -> unit Lwt.t", "params": [{"name": "", "type": "'a -> unit Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.map_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1188"}, "info": "", "type": "('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.map_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1245"}, "info": "", "type": "('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.rev_map_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1303"}, "info": "", "type": "('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.rev_map_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1364"}, "info": "", "type": "('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t", "params": [{"name": "", "type": "'a -> 'b Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.fold_left_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1426"}, "info": "", "type": "('a -> 'b -> 'a Lwt.t) -> 'a -> 'b list -> 'a Lwt.t", "params": [{"name": "", "type": "'a -> 'b -> 'a Lwt.t"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.fold_right_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1497"}, "info": "", "type": "('a -> 'b -> 'b Lwt.t) -> 'a list -> 'b -> 'b Lwt.t", "params": [{"name": "", "type": "'a -> 'b -> 'b Lwt.t"}, {"name": "", "type": "'a list"}, {"name": "", "type": "'a"}]}}, {"comment": "<h6>List scanning<\/h6>"}, {"value": {"name": "Lwt_list.for_all_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1595"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> bool Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.for_all_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1655"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> bool Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.exists_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1716"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> bool Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.exists_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1775"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> bool Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"comment": "<h6>List searching<\/h6>"}, {"value": {"name": "Lwt_list.find_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1862"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> 'a Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.filter_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1918"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> 'a list Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.filter_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|1980"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> 'a list Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.partition_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|2043"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> ('a list * 'a list) Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}, {"value": {"name": "Lwt_list.partition_p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_list.mli|2120"}, "info": "", "type": "('a -> bool Lwt.t) -> 'a list -> ('a list * 'a list) Lwt.t", "params": [{"name": "", "type": "'a -> bool Lwt.t"}, {"name": "", "type": "'a list"}]}}], "dependencies": {"uses": ["Lwt"], "used_by": []}}}, "Lwt_pool": {"module": {"name": "Lwt_pool", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pool.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pool.mli|0"}, "info": {"description": "Creating pools (for example pools of connections to a database)."}, "type": "sig  end", "module_structure": [{"comment": "Instead of creating a new connection each time you need one,\n    keep a pool of opened connections and reuse opened connections\n    that are free."}, {"type": {"name": "Lwt_pool.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pool.mli|1311"}, "info": {"description": "Type of pools"}, "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_pool.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pool.mli|1311"}, "info": {"description": "<span class=\"code\" >create n f<\/span> creates a new pool with at most <span class=\"code\" >n<\/span> members.\n    <span class=\"code\" >f<\/span> is the function to use to create a new pool member."}, "type": "int ->\n  ?check:('a -> (bool -> unit) -> unit) -> (unit -> 'a Lwt.t) -> 'a Lwt_pool.t", "params": [{"name": "", "type": "int"}, {"name": "check", "type": "('a -> (bool -> unit) -> unit) option"}, {"name": "", "type": "unit -> 'a Lwt.t"}]}}, {"value": {"name": "Lwt_pool.use", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pool.mli|1496"}, "info": {"description": "<span class=\"code\" >use p f<\/span> takes one free member of the pool <span class=\"code\" >p<\/span> and gives it to the function\n    <span class=\"code\" >f<\/span>."}, "type": "'a Lwt_pool.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t", "params": [{"name": "", "type": "'a Lwt_pool.t"}, {"name": "", "type": "'a -> 'b Lwt.t"}]}}], "dependencies": {"uses": ["Lwt"], "used_by": []}}}, "Lwt_condition": {"module": {"name": "Lwt_condition", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_condition.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_condition.mli|0"}, "info": {"description": "Conditions"}, "type": "sig  end", "module_structure": [{"comment": "Condition variables to synchronize between threads."}, {"type": {"name": "Lwt_condition.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_condition.mli|1903"}, "info": {"description": "Condition variable type. The type parameter denotes the type of\n        value propagated from notifier to waiter."}, "params": [{"covariant": true, "contravariant": true, "type": "'c"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_condition.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_condition.mli|1903"}, "info": {"description": "<span class=\"code\" >create ()<\/span> creates a new condition variable."}, "type": "unit -> 'a Lwt_condition.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt_condition.wait", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_condition.mli|1987"}, "info": {"description": "<span class=\"code\" >wait mutex condvar<\/span> will cause the current thread to block,\n        awaiting notification for a condition variable, <span class=\"code\" >condvar<\/span>. If\n        provided, the <span class=\"code\" >mutex<\/span> must have been previously locked (within\n        the scope of <span class=\"code\" >Lwt_mutex.with_lock<\/span>, for example) and is\n        temporarily unlocked until the condition is notified. Upon\n        notification, <span class=\"code\" >mutex<\/span> is re-locked before <span class=\"code\" >wait<\/span> returns and\n        the thread's activity is resumed. When the awaited condition\n        is notified, the value parameter passed to <span class=\"code\" >notify<\/span> is\n        returned."}, "type": "?mutex:Lwt_mutex.t -> 'a Lwt_condition.t -> 'a Lwt.t", "params": [{"name": "mutex", "type": "Lwt_mutex.t option"}, {"name": "", "type": "'a Lwt_condition.t"}]}}, {"value": {"name": "Lwt_condition.signal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_condition.mli|2601"}, "info": {"description": "<span class=\"code\" >signal condvar value<\/span> notifies that a condition is ready. A\n        single waiting thread will be awoken and will receive the\n        notification value which will be returned from <span class=\"code\" >wait<\/span>. Note\n        that condition notification is not \"sticky\", i.e. if there is\n        no waiter when <span class=\"code\" >notify<\/span> is called, the notification will be\n        missed and the value discarded."}, "type": "'a Lwt_condition.t -> 'a -> unit", "params": [{"name": "", "type": "'a Lwt_condition.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Lwt_condition.broadcast", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_condition.mli|3018"}, "info": {"description": "<span class=\"code\" >broadcast condvar value<\/span> notifies all waiting threads. Each\n        will be awoken in turn and will receive the same notification\n        value."}, "type": "'a Lwt_condition.t -> 'a -> unit", "params": [{"name": "", "type": "'a Lwt_condition.t"}, {"name": "", "type": "'a"}]}}], "dependencies": {"uses": ["Lwt_mutex", "Lwt"], "used_by": []}}}, "Lwt_pqueue": {"module": {"name": "Lwt_pqueue", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"module_type": {"name": "Lwt_pqueue.OrderedType", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1003"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Lwt_pqueue.OrderedType.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1050"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_pqueue.OrderedType.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1050"}, "info": "", "type": "Lwt_pqueue.OrderedType.t -> Lwt_pqueue.OrderedType.t -> int", "params": [{"name": "", "type": "Lwt_pqueue.OrderedType.t"}, {"name": "", "type": "Lwt_pqueue.OrderedType.t"}]}}]}}, {"module_type": {"name": "Lwt_pqueue.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1084"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Lwt_pqueue.S.elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1123"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Lwt_pqueue.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1134"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_pqueue.S.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1134"}, "info": "", "type": "Lwt_pqueue.S.t", "params": []}}, {"value": {"name": "Lwt_pqueue.S.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1151"}, "info": "", "type": "Lwt_pqueue.S.t -> bool", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1179"}, "info": "", "type": "Lwt_pqueue.S.elt -> Lwt_pqueue.S.t -> Lwt_pqueue.S.t", "params": [{"name": "", "type": "Lwt_pqueue.S.elt"}, {"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.union", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1206"}, "info": "", "type": "Lwt_pqueue.S.t -> Lwt_pqueue.S.t -> Lwt_pqueue.S.t", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}, {"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.find_min", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1233"}, "info": "", "type": "Lwt_pqueue.S.t -> Lwt_pqueue.S.elt", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.lookup_min", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1260"}, "info": "", "type": "Lwt_pqueue.S.t -> Lwt_pqueue.S.elt option", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.remove_min", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1296"}, "info": "", "type": "Lwt_pqueue.S.t -> Lwt_pqueue.S.t", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1323"}, "info": "", "type": "Lwt_pqueue.S.t -> int", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}]}}, {"module": {"name": "Lwt_pqueue.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1349"}, "info": "", "type": "functor (Ord : OrderedType) -> sig  end", "module_functor": {"parameter": {"name": "Ord", "module_alias": {"name": "Lwt_pqueue.OrderedType"}}, "module_with": {"module_alias": {"name": "Lwt_pqueue.S", "module_type": {"name": "Lwt_pqueue.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1084"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Lwt_pqueue.S.elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1123"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Lwt_pqueue.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1134"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_pqueue.S.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1134"}, "info": "", "type": "Lwt_pqueue.S.t", "params": []}}, {"value": {"name": "Lwt_pqueue.S.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1151"}, "info": "", "type": "Lwt_pqueue.S.t -> bool", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1179"}, "info": "", "type": "Lwt_pqueue.S.elt -> Lwt_pqueue.S.t -> Lwt_pqueue.S.t", "params": [{"name": "", "type": "Lwt_pqueue.S.elt"}, {"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.union", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1206"}, "info": "", "type": "Lwt_pqueue.S.t -> Lwt_pqueue.S.t -> Lwt_pqueue.S.t", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}, {"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.find_min", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1233"}, "info": "", "type": "Lwt_pqueue.S.t -> Lwt_pqueue.S.elt", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.lookup_min", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1260"}, "info": "", "type": "Lwt_pqueue.S.t -> Lwt_pqueue.S.elt option", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.remove_min", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1296"}, "info": "", "type": "Lwt_pqueue.S.t -> Lwt_pqueue.S.t", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}, {"value": {"name": "Lwt_pqueue.S.size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_pqueue.mli|1323"}, "info": "", "type": "Lwt_pqueue.S.t -> int", "params": [{"name": "", "type": "Lwt_pqueue.S.t"}]}}]}}, "with": " with type elt = Ord.t"}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": [], "used_by": []}}}, "Lwt_switch": {"module": {"name": "Lwt_switch", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|0"}, "info": {"description": "Lwt switches"}, "type": "sig  end", "module_structure": [{"comment": "Switch have two goals:<br><\/br><ul><li>being able to free multiple resources at the same time,<\/li><li>offer a better alternative than always returning an id to free\n      some resource.<\/li><\/ul>\n    For example, considers the following interface:<br><\/br>\n    <span class=\"codepre\" >\n      type id\n\n      val free : id -&gt; unit Lwt.t\n\n      val f : unit -&gt; id Lwt.t\n      val g : unit -&gt; id Lwt.t\n      val h : unit -&gt; id Lwt.t\n    <\/span><br><\/br>\n    Now you want to calls <span class=\"code\" >f<\/span>, <span class=\"code\" >g<\/span> and <span class=\"code\" >h<\/span> in parallel. You can\n    simply do:<br><\/br>\n    <span class=\"codepre\" >\n      lwt idf = f () and idg = g () and idh = h () in\n      ...\n    <\/span><br><\/br>\n    However, one may wants to handle possible failures of <span class=\"code\" >f ()<\/span>, <span class=\"code\" >g\n    ()<\/span> and <span class=\"code\" >h ()<\/span>, and disable all allocated resources if one of\n    these three threads fails. This may be hard since you have to\n    remember which one failed and which one returned correctly.<br><\/br>\n    Now we change a little bit the interface:<br><\/br>\n    <span class=\"codepre\" >\n      val f : ?switch : Lwt_switch.t -&gt; unit -&gt; id Lwt.t\n      val g : ?switch : Lwt_switch.t -&gt; unit -&gt; id Lwt.t\n      val h : ?switch : Lwt_switch.t -&gt; unit -&gt; id Lwt.t\n    <\/span><br><\/br>\n    and the code becomes:<br><\/br>\n    <span class=\"codepre\" >\n      let switch = Lwt_switch.create () in\n      try_lwt\n        lwt idf = f ~switch () and idg = g ~switch () and idh = h ~switch () in\n        ...\n      with exn -&gt;\n        lwt () = Lwt_switch.turn_off switch in\n        raise_lwt exn\n    <\/span>"}, {"type": {"name": "Lwt_switch.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|2336"}, "info": {"description": "Type of switches."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Lwt_switch.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|2336"}, "info": {"description": "<span class=\"code\" >create ()<\/span> creates a new switch."}, "type": "unit -> Lwt_switch.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Lwt_switch.is_on", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|2403"}, "info": {"description": "<span class=\"code\" >is_on switch<\/span> returns <span class=\"code\" >true<\/span> if the switch is currently on, and\n      <span class=\"code\" >false<\/span> otherwise."}, "type": "Lwt_switch.t -> bool", "params": [{"name": "", "type": "Lwt_switch.t"}]}}, {"value": {"name": "Lwt_switch.turn_off", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|2525"}, "info": {"description": "<span class=\"code\" >turn_off switch<\/span> turns off the switch. It calls all registered\n      hooks, waits for all of them to terminates, and the returns. If\n      one of the hook failed, then it will fail with one of the\n      exception raised by hooks. If the switch is already off, then it\n      does nothing."}, "type": "Lwt_switch.t -> unit Lwt.t", "params": [{"name": "", "type": "Lwt_switch.t"}]}}, {"exception": {"name": "Lwt_switch.Off", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|2855"}, "info": {"description": "Exception raised when trying to add a hook to a switch that is\n      already off."}}}, {"value": {"name": "Lwt_switch.check", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|2961"}, "info": {"description": "<span class=\"code\" >check switch<\/span> does nothing if <span class=\"code\" >switch<\/span> is <span class=\"code\" >None<\/span> or contains an\n      switch that is currently on, and raise <a href=\"{exception|Lwt_switch.Off}\" ><span class=\"code\" >Lwt_switch.Off<\/span><\/a> otherwise."}, "type": "Lwt_switch.t option -> unit", "params": [{"name": "", "type": "Lwt_switch.t option"}]}}, {"value": {"name": "Lwt_switch.add_hook", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|3128"}, "info": {"description": "<span class=\"code\" >add_hook switch f<\/span> registers <span class=\"code\" >f<\/span> so it will be called when\n      <a href=\"{value|Lwt_switch.turn_off}\" ><span class=\"code\" >Lwt_switch.turn_off<\/span><\/a> is invoked. It does nothing if <span class=\"code\" >switch<\/span> is\n      <span class=\"code\" >None<\/span>. If <span class=\"code\" >switch<\/span> contains an switch that is already off then\n      <a href=\"{exception|Lwt_switch.Off}\" ><span class=\"code\" >Lwt_switch.Off<\/span><\/a> is raised."}, "type": "Lwt_switch.t option -> (unit -> unit Lwt.t) -> unit", "params": [{"name": "", "type": "Lwt_switch.t option"}, {"name": "", "type": "unit -> unit Lwt.t"}]}}, {"value": {"name": "Lwt_switch.add_hook_or_exec", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/lwt_switch.mli|3409"}, "info": {"description": "<span class=\"code\" >add_hook_or_exec switch f<\/span> is the same as <a href=\"{value|Lwt_switch.add_hook}\" ><span class=\"code\" >Lwt_switch.add_hook<\/span><\/a> except\n      that if the switch is already off, then <span class=\"code\" >f<\/span> is called\n      immediatly."}, "type": "Lwt_switch.t option -> (unit -> unit Lwt.t) -> unit Lwt.t", "params": [{"name": "", "type": "Lwt_switch.t option"}, {"name": "", "type": "unit -> unit Lwt.t"}]}}], "dependencies": {"uses": ["Lwt"], "used_by": []}}}, "Bitstring": {"module": {"name": "Bitstring", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|0"}, "info": {"description": "Bitstring library."}, "type": "sig  end", "module_structure": [{"comment": "<a href=\"#reference\" >Jump straight to the reference section for\n   documentation on types and functions<\/a>.<br><\/br>\n   <h2>Introduction<\/h2><br><\/br>\n   Bitstring adds Erlang-style bitstrings and matching over bitstrings\n   as a syntax extension and library for OCaml.  You can use\n   this module to both parse and generate binary formats, for\n   example, communications protocols, disk formats and binary files.<br><\/br>\n   <a href=\"http:\/\/code.google.com\/p\/bitstring\/\" >OCaml bitstring website<\/a><br><\/br>\n   This library used to be called \"bitmatch\".<br><\/br>\n   <h2>Examples<\/h2><br><\/br>\n   A function which can parse IPv4 packets:<br><\/br>\n<span class=\"codepre\" >\nlet display pkt =\n  bitmatch pkt with\n  (* IPv4 packet header\n    0                   1                   2                   3   \n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   4   |  IHL  |Type of Service|          Total Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Identification        |Flags|      Fragment Offset    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Time to Live |    Protocol   |         Header Checksum       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                       Source Address                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                    Destination Address                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                    Options                    |    Padding    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  *)\n  | { 4 : 4; hdrlen : 4; tos : 8;   length : 16;\n      identification : 16;          flags : 3; fragoffset : 13;\n      ttl : 8; protocol : 8;        checksum : 16;\n      source : 32;\n      dest : 32;\n      options : (hdrlen-5)*32 : bitstring;\n      payload : -1 : bitstring } -&gt;\n\n    printf \"IPv4:\\n\";\n    printf \"  header length: %d * 32 bit words\\n\" hdrlen;\n    printf \"  type of service: %d\\n\" tos;\n    printf \"  packet length: %d bytes\\n\" length;\n    printf \"  identification: %d\\n\" identification;\n    printf \"  flags: %d\\n\" flags;\n    printf \"  fragment offset: %d\\n\" fragoffset;\n    printf \"  ttl: %d\\n\" ttl;\n    printf \"  protocol: %d\\n\" protocol;\n    printf \"  checksum: %d\\n\" checksum;\n    printf \"  source: %lx  dest: %lx\\n\" source dest;\n    printf \"  header options + padding:\\n\";\n    Bitstring.hexdump_bitstring stdout options;\n    printf \"  packet payload:\\n\";\n    Bitstring.hexdump_bitstring stdout payload\n\n  | { version : 4 } -&gt;\n    eprintf \"unknown IP version %d\\n\" version;\n    exit 1\n\n  | { _ } as pkt -&gt;\n    eprintf \"data is smaller than one nibble:\\n\";\n    Bitstring.hexdump_bitstring stderr pkt;\n    exit 1\n<\/span><br><\/br>\n   A program which can parse\n   <a href=\"http:\/\/lxr.linux.no\/linux\/include\/linux\/ext3_fs.h\" >Linux EXT3 filesystem superblocks<\/a>:<br><\/br>\n<span class=\"codepre\" >\nlet bits = Bitstring.bitstring_of_file \"tests\/ext3_sb\"\n\nlet () =\n  bitmatch bits with\n  | { s_inodes_count : 32 : littleendian;       (* Inodes count *)\n      s_blocks_count : 32 : littleendian;       (* Blocks count *)\n      s_r_blocks_count : 32 : littleendian;     (* Reserved blocks count *)\n      s_free_blocks_count : 32 : littleendian;  (* Free blocks count *)\n      s_free_inodes_count : 32 : littleendian;  (* Free inodes count *)\n      s_first_data_block : 32 : littleendian;   (* First Data Block *)\n      s_log_block_size : 32 : littleendian;     (* Block size *)\n      s_log_frag_size : 32 : littleendian;      (* Fragment size *)\n      s_blocks_per_group : 32 : littleendian;   (* # Blocks per group *)\n      s_frags_per_group : 32 : littleendian;    (* # Fragments per group *)\n      s_inodes_per_group : 32 : littleendian;   (* # Inodes per group *)\n      s_mtime : 32 : littleendian;              (* Mount time *)\n      s_wtime : 32 : littleendian;              (* Write time *)\n      s_mnt_count : 16 : littleendian;          (* Mount count *)\n      s_max_mnt_count : 16 : littleendian;      (* Maximal mount count *)\n      0xef53 : 16 : littleendian } -&gt;           (* Magic signature *)\n\n    printf \"ext3 superblock:\\n\";\n    printf \"  s_inodes_count = %ld\\n\" s_inodes_count;\n    printf \"  s_blocks_count = %ld\\n\" s_blocks_count;\n    printf \"  s_free_inodes_count = %ld\\n\" s_free_inodes_count;\n    printf \"  s_free_blocks_count = %ld\\n\" s_free_blocks_count\n\n  | { _ } -&gt;\n    eprintf \"not an ext3 superblock!\\n%!\";\n    exit 2\n<\/span><br><\/br>\n   Constructing packets for a simple binary message\n   protocol:<br><\/br>\n<span class=\"codepre\" >\n(*\n  +---------------+---------------+--------------------------+\n  | type          | subtype       | parameter                |\n  +---------------+---------------+--------------------------+\n   &lt;-- 16 bits --&gt; &lt;-- 16 bits --&gt; &lt;------- 32 bits --------&gt;\n\n  All fields are in network byte order.\n*)\n\nlet make_message typ subtype param =\n  (BITSTRING {\n     typ : 16;\n     subtype : 16;\n     param : 32\n   }) ;;\n<\/span><br><\/br>\n   <h2>Loading, creating bitstrings<\/h2><br><\/br>\n   The basic data type is the <a href=\"{type|Bitstring.bitstring}\" ><span class=\"code\" >Bitstring.bitstring<\/span><\/a>, a string of bits of\n   arbitrary length.  Bitstrings can be any length in bits and\n   operations do not need to be byte-aligned (although they will\n   generally be more efficient if they are byte-aligned).<br><\/br>\n   Internally a bitstring is stored as a normal OCaml <span class=\"code\" >string<\/span>\n   together with an offset and length, where the offset and length are\n   measured in bits.  Thus one can efficiently form substrings of\n   bitstrings, overlay a bitstring on existing data, and load and save\n   bitstrings from files or other external sources.<br><\/br>\n   To load a bitstring from a file use <a href=\"{none|bitstring_of_file}\" ><span class=\"code\" >bitstring_of_file<\/span><\/a> or\n   <a href=\"{value|Bitstring.bitstring_of_chan}\" ><span class=\"code\" >Bitstring.bitstring_of_chan<\/span><\/a>.<br><\/br>\n   There are also functions to create bitstrings from arbitrary data.\n   See the <a href=\"#reference\" >reference<\/a> below.<br><\/br>\n   <h2>Matching bitstrings with patterns<\/h2><br><\/br>\n   Use the <span class=\"code\" >bitmatch<\/span> operator (part of the syntax extension) to break\n   apart a bitstring into its fields.  <span class=\"code\" >bitmatch<\/span> works a lot like the\n   OCaml <span class=\"code\" >match<\/span> operator.<br><\/br>\n   The general form of <span class=\"code\" >bitmatch<\/span> is:<br><\/br>\n   <span class=\"code\" >bitmatch<\/span> <i>bitstring-expression<\/i> <span class=\"code\" >with<\/span><br><\/br>\n   <span class=\"code\" >| {<\/span> <i>pattern<\/i> <span class=\"code\" >} -&gt;<\/span> <i>code<\/i><br><\/br>\n   <span class=\"code\" >| {<\/span> <i>pattern<\/i> <span class=\"code\" >} -&gt;<\/span> <i>code<\/i><br><\/br>\n   <span class=\"code\" >|<\/span> ...<br><\/br>\n   As with normal match, the statement attempts to match the\n   bitstring against each pattern in turn.  If none of the patterns\n   match then the standard library <span class=\"code\" >Match_failure<\/span> exception is\n   thrown.<br><\/br>\n   Patterns look a bit different from normal match patterns.  They\n   consist of a list of bitfields separated by <span class=\"code\" >;<\/span> where each bitfield\n   contains a bind variable, the width (in bits) of the field, and\n   other information.  Some example patterns:<br><\/br>\n<span class=\"codepre\" >\nbitmatch bits with\n\n| { version : 8; name : 8; param : 8 } -&gt; ...\n\n   (* Bitstring of at least 3 bytes.  First byte is the version\n      number, second byte is a field called name, third byte is\n      a field called parameter. *)\n\n| { flag : 1 } -&gt;\n   printf \"flag is %b\\n\" flag\n\n   (* A single flag bit (mapped into an OCaml boolean). *)\n\n| { len : 4; data : 1+len } -&gt;\n   printf \"len = %d, data = 0x%Lx\\n\" len data\n\n   (* A 4-bit length, followed by 1-16 bits of data, where the\n      length of the data is computed from len. *)\n\n| { ipv6_source : 128 : bitstring;\n    ipv6_dest : 128 : bitstring } -&gt; ...\n\n   (* IPv6 source and destination addresses.  Each is 128 bits\n      and is mapped into a bitstring type which will be a substring\n      of the main bitstring expression. *)\n<\/span><br><\/br>\n   You can also add conditional when-clauses:<br><\/br>\n<span class=\"codepre\" >\n| { version : 4 }\n    when version = 4 || version = 6 -&gt; ...\n\n   (* Only match and run the code when version is 4 or 6.  If\n      it isn't we will drop through to the next case. *)\n<\/span><br><\/br>\n   Note that the pattern is only compared against the first part of\n   the bitstring (there may be more data in the bitstring following\n   the pattern, which is not matched).  In terms of regular\n   expressions you might say that the pattern matches <span class=\"code\" >^pattern<\/span>, not\n   <span class=\"code\" >^pattern$<\/span>.  To ensure that the bitstring contains only the\n   pattern, add a length -1 bitstring to the end and test that its\n   length is zero in the when-clause:<br><\/br>\n<span class=\"codepre\" >\n| { n : 4;\n    rest : -1 : bitstring }\n    when Bitstring.bitstring_length rest = 0 -&gt; ...\n\n   (* Only matches exactly 4 bits. *)\n<\/span><br><\/br>\n   Normally the first part of each field is a binding variable,\n   but you can also match a constant, as in:<br><\/br>\n<span class=\"codepre\" >\n| { (4|6) : 4 } -&gt; ...\n\n   (* Only matches if the first 4 bits contain either\n      the integer 4 or the integer 6. *)\n<\/span><br><\/br>\n   One may also match on strings:<br><\/br>\n<span class=\"codepre\" >\n| { \"MAGIC\" : 5*8 : string } -&gt; ...\n\n   (* Only matches if the string \"MAGIC\" appears at the start\n      of the input. *)\n<\/span><br><\/br>\n   <h3>Pattern field reference<\/h3><br><\/br>\n   The exact format of each pattern field is:<br><\/br>\n   <span class=\"code\" >pattern : length [: qualifier [,qualifier ...]]<\/span><br><\/br>\n   <span class=\"code\" >pattern<\/span> is the pattern, binding variable name, or constant to\n   match.  <span class=\"code\" >length<\/span> is the length in bits which may be either a\n   constant or an expression.  The length expression is just an OCaml\n   expression and can use any values defined in the program, and refer\n   back to earlier fields (but not to later fields).<br><\/br>\n   Integers can only have lengths in the range [1..64] bits.  See the\n   <a href=\"#integertypes\" >integer types<\/a> section below for how these are\n   mapped to the OCaml int\/int32\/int64 types.  This is checked\n   at compile time if the length expression is constant, otherwise it is\n   checked at runtime and you will get a runtime exception eg. in\n   the case of a computed length expression.<br><\/br>\n   A bitstring field of length -1 matches all the rest of the\n   bitstring (thus this is only useful as the last field in a\n   pattern).<br><\/br>\n   A bitstring field of length 0 matches an empty bitstring\n   (occasionally useful when matching optional subfields).<br><\/br>\n   Qualifiers are a list of identifiers\/expressions which control the type,\n   signedness and endianness of the field.  Permissible qualifiers are:<br><\/br><ul><li><span class=\"code\" >int<\/span>: field has an integer type<\/li><li><span class=\"code\" >string<\/span>: field is a string type<\/li><li><span class=\"code\" >bitstring<\/span>: field is a bitstring type<\/li><li><span class=\"code\" >signed<\/span>: field is signed<\/li><li><span class=\"code\" >unsigned<\/span>: field is unsigned<\/li><li><span class=\"code\" >bigendian<\/span>: field is big endian - a.k.a network byte order<\/li><li><span class=\"code\" >littleendian<\/span>: field is little endian - a.k.a Intel byte order<\/li><li><span class=\"code\" >nativeendian<\/span>: field is same endianness as the machine<\/li><li><span class=\"code\" >endian (expr)<\/span>: <span class=\"code\" >expr<\/span> should be an expression which evaluates to\n       a <a href=\"{type|Bitstring.endian}\" ><span class=\"code\" >Bitstring.endian<\/span><\/a> type, ie. <span class=\"code\" >LittleEndian<\/span>, <span class=\"code\" >BigEndian<\/span> or <span class=\"code\" >NativeEndian<\/span>.\n       The expression is an arbitrary OCaml expression and can use the\n       value of earlier fields in the bitmatch.<\/li><li><span class=\"code\" >offset (expr)<\/span>: see <a href=\"#computedoffsets\" >computed offsets<\/a> below.<\/li><\/ul>\n   The default settings are <span class=\"code\" >int<\/span>, <span class=\"code\" >unsigned<\/span>, <span class=\"code\" >bigendian<\/span>, no offset.<br><\/br>\n   Note that many of these qualifiers cannot be used together,\n   eg. bitstrings do not have endianness.  The syntax extension should\n   give you a compile-time error if you use incompatible qualifiers.<br><\/br>\n   <h3>Other cases in bitmatch<\/h3><br><\/br>\n   As well as a list of fields, it is possible to name the\n   bitstring and\/or have a default match case:<br><\/br>\n<span class=\"codepre\" >\n| { _ } -&gt; ...\n\n   (* Default match case. *)\n\n| { _ } as pkt -&gt; ...\n\n   (* Default match case, with 'pkt' bound to the whole bitstring. *)\n<\/span><br><\/br>\n   <h2>Constructing bitstrings<\/h2><br><\/br>\n   Bitstrings may be constructed using the <span class=\"code\" >BITSTRING<\/span> operator (as an\n   expression).  The <span class=\"code\" >BITSTRING<\/span> operator takes a list of fields,\n   similar to the list of fields for matching:<br><\/br>\n<span class=\"codepre\" >\nlet version = 1 ;;\nlet data = 10 ;;\nlet bits =\n  BITSTRING {\n    version : 4;\n    data : 12\n  } ;;\n\n   (* Constructs a 16-bit bitstring with the first four bits containing\n      the integer 1, and the following 12 bits containing the integer 10,\n      arranged in network byte order. *)\n\nBitstring.hexdump_bitstring stdout bits ;;\n\n   (* Prints:\n\n      00000000  10 0a         |..              |\n    *)\n<\/span><br><\/br>\n   The format of each field is the same as for pattern fields (see\n   <a href=\"#patternfieldreference\" >Pattern field reference section<\/a>), and\n   things like computed length fields, fixed value fields, insertion\n   of bitstrings within bitstrings, etc. are all supported.<br><\/br>\n   <h3>Construction exception<\/h3><br><\/br>\n   The <span class=\"code\" >BITSTRING<\/span> operator may throw a <a href=\"{exception|Bitstring.Construct_failure}\" ><span class=\"code\" >Bitstring.Construct_failure<\/span><\/a>\n   exception at runtime.<br><\/br>\n   Runtime errors include:<br><\/br><ul><li>int field length not in the range [1..64]<\/li><li>a bitstring with a length declared which doesn't have the\n     same length at runtime<\/li><li>trying to insert an out of range value into an int field\n     (eg. an unsigned int field which is 2 bits wide can only\n     take values in the range [0..3]).<\/li><\/ul>\n   <h2>Integer types<\/h2><br><\/br>\n   Integer types are mapped to OCaml types <span class=\"code\" >bool<\/span>, <span class=\"code\" >int<\/span>, <span class=\"code\" >int32<\/span> or\n   <span class=\"code\" >int64<\/span> using a system which tries to ensure that (a) the types are\n   reasonably predictable and (b) the most efficient type is\n   preferred.<br><\/br>\n   The rules are slightly different depending on whether the bit\n   length expression in the field is a compile-time constant or a\n   computed expression.<br><\/br>\n   Detection of compile-time constants is quite simplistic so only\n   simple integer literals and simple expressions (eg. <span class=\"code\" >5*8<\/span>) are\n   recognized as constants.<br><\/br>\n   In any case the bit size of an integer is limited to the range\n   [1..64].  This is detected as a compile-time error if that is\n   possible, otherwise a runtime check is added which can throw an\n   <span class=\"code\" >Invalid_argument<\/span> exception.<br><\/br>\n   The mapping is thus:<br><\/br>\n   <span class=\"verbatim\" >   Bit size\t    ---- OCaml type ----\n                Constant\tComputed expression\n\n   1\t\tbool\t\tint64\n   2..31\tint\t\tint64\n   32\t\tint32\t\tint64\n   33..64\tint64\t\tint64\n  <\/span><br><\/br>\n   A possible future extension may allow people with 64 bit computers\n   to specify a more optimal <span class=\"code\" >int<\/span> type for bit sizes in the range\n   <span class=\"code\" >32..63<\/span>.  If this was implemented then such code <i>could not even\n   be compiled<\/i> on 32 bit platforms, so it would limit portability.<br><\/br>\n   Another future extension may be to allow computed\n   expressions to assert min\/max range for the bit size,\n   allowing a more efficient data type than int64 to be\n   used.  (Of course under such circumstances there would\n   still need to be a runtime check to enforce the\n   size).<br><\/br>\n   <h2>Advanced pattern-matching features<\/h2><br><\/br>\n   <h3>Computed offsets<\/h3><br><\/br>\n   You can add an <span class=\"code\" >offset(..)<\/span> qualifier to bitmatch patterns in order\n   to move the current offset within the bitstring forwards.<br><\/br>\n   For example:<br><\/br>\n<span class=\"codepre\" >\nbitmatch bits with\n| { field1 : 8;\n    field2 : 8 : offset(160) } -&gt; ...\n<\/span><br><\/br>\n   matches <span class=\"code\" >field1<\/span> at the start of the bitstring and <span class=\"code\" >field2<\/span>\n   at 160 bits into the bitstring.  The middle 152 bits go\n   unmatched (ie. can be anything).<br><\/br>\n   The generated code is efficient.  If field lengths and offsets\n   are known to be constant at compile time, then almost all\n   runtime checks are avoided.  Non-constant field lengths and\/or\n   non-constant offsets can result in more runtime checks being added.<br><\/br>\n   Note that moving the offset backwards, and moving the offset in\n   <span class=\"code\" >BITSTRING<\/span> constructors, are both not supported at present.<br><\/br>\n   <h3>Check expressions<\/h3><br><\/br>\n   You can add a <span class=\"code\" >check(expr)<\/span> qualifier to bitmatch patterns.\n   If the expression evaluates to false then the current match case\n   fails to match (in other words, we fall through to the next\n   match case - there is no error).<br><\/br>\n   For example:\n<span class=\"codepre\" >\nbitmatch bits with\n| { field : 16 : check (field &gt; 100) } -&gt; ...\n<\/span><br><\/br>\n   Note the difference between a check expression and a when-clause\n   is that the when-clause is evaluated after all the fields have\n   been matched.  On the other hand a check expression is evaluated\n   after the individual field has been matched, which means it is\n   potentially more efficient (if the check expression fails then\n   we don't waste any time matching later fields).<br><\/br>\n   We wanted to use the notation <span class=\"code\" >when(expr)<\/span> here, but because\n   <span class=\"code\" >when<\/span> is a reserved word we could not do this.<br><\/br>\n   <h3>Bind expressions<\/h3><br><\/br>\n   A bind expression is used to change the value of a matched\n   field.  For example:\n<span class=\"codepre\" >\nbitmatch bits with\n| { len : 16 : bind (len * 8);\n    field : len : bitstring } -&gt; ...\n<\/span><br><\/br>\n   In the example, after 'len' has been matched, its value would\n   be multiplied by 8, so the width of 'field' is the matched\n   value multiplied by 8.<br><\/br>\n   In the general case:\n<span class=\"codepre\" >\n| { field : ... : bind (expr) } -&gt; ...\n<\/span>\n   evaluates the following after the field has been matched:\n<span class=\"codepre\" >\n   let field = expr in\n   (* remaining fields *)\n<\/span><br><\/br>\n   <h3>Order of evaluation of check() and bind()<\/h3><br><\/br>\n   The choice is arbitrary, but we have chosen that check expressions\n   are evaluated first, and bind expressions are evaluated after.<br><\/br>\n   This means that the result of bind() is <i>not<\/i> available in\n   the check expression.<br><\/br>\n   Note that this rule applies regardless of the order of check()\n   and bind() in the source code.<br><\/br>\n   <h3>save_offset_to<\/h3><br><\/br>\n   Use <span class=\"code\" >save_offset_to(variable)<\/span> to save the current bit offset\n   within the match to a variable (strictly speaking, to a pattern).\n   This variable is then made available in any <span class=\"code\" >check()<\/span> and <span class=\"code\" >bind()<\/span>\n   clauses in the current field, <i>and<\/i> to any later fields, and\n   to the code after the <span class=\"code\" >-&gt;<\/span>.<br><\/br>\n   For example:\n<span class=\"codepre\" >\nbitmatch bits with\n| { len : 16;\n    _ : len : bitstring;\n    field : 16 : save_offset_to (field_offset) } -&gt;\n      printf \"field is at bit offset %d in the match\\n\" field_offset\n<\/span><br><\/br>\n   (In that example, <span class=\"code\" >field_offset<\/span> should always have the value\n   <span class=\"code\" >len+16<\/span>).<br><\/br>\n   <h2>Named patterns and persistent patterns<\/h2><br><\/br>\n   Please see <a href=\"{none|Bitstring_persistent}\" ><span class=\"code\" >Bitstring_persistent<\/span><\/a> for documentation on this subject.<br><\/br>\n   <h2>Compiling<\/h2><br><\/br>\n   Using the compiler directly you can do:<br><\/br>\n   <span class=\"verbatim\" >   ocamlc -I +bitstring \\\n     -pp \"camlp4of bitstring.cma bitstring_persistent.cma \\\n            `ocamlc -where`\/bitstring\/pa_bitstring.cmo\" \\\n     unix.cma bitstring.cma test.ml -o test\n  <\/span><br><\/br>\n   Simpler method using findlib:<br><\/br>\n   <span class=\"verbatim\" >   ocamlfind ocamlc \\\n     -package bitstring,bitstring.syntax -syntax bitstring.syntax \\\n     -linkpkg test.ml -o test\n  <\/span><br><\/br>\n   <h2>Security and type safety<\/h2><br><\/br>\n   <h3>Security on input<\/h3><br><\/br>\n   The main concerns for input are buffer overflows and denial\n   of service.<br><\/br>\n   It is believed that this library is robust against attempted buffer\n   overflows.  In addition to OCaml's normal bounds checks, we check\n   that field lengths are &gt;= 0, and many additional checks.<br><\/br>\n   Denial of service attacks are more problematic.  We only work\n   forwards through the bitstring, thus computation will eventually\n   terminate.  As for computed lengths, code such as this is thought\n   to be secure:<br><\/br>\n   <span class=\"codepre\" >\n   bitmatch bits with\n   | { len : 64;\n       buffer : Int64.to_int len : bitstring } -&gt;\n   <\/span><br><\/br>\n   The <span class=\"code\" >len<\/span> field can be set arbitrarily large by an attacker, but\n   when pattern-matching against the <span class=\"code\" >buffer<\/span> field this merely causes\n   a test such as <span class=\"code\" >if len &lt;= remaining_size<\/span> to fail.  Even if the\n   length is chosen so that <span class=\"code\" >buffer<\/span> bitstring is allocated, the\n   allocation of sub-bitstrings is efficient and doesn't involve an\n   arbitary-sized allocation or any copying.<br><\/br>\n   However the above does not necessarily apply to strings used in\n   matching, since they may cause the library to use the\n   <a href=\"{value|Bitstring.string_of_bitstring}\" ><span class=\"code\" >Bitstring.string_of_bitstring<\/span><\/a> function, which allocates a string.\n   So you should take care if you use the <span class=\"code\" >string<\/span> type particularly\n   with a computed length that is derived from external input.<br><\/br>\n   The main protection against attackers should be to ensure that the\n   main program will only read input bitstrings up to a certain\n   length, which is outside the scope of this library.<br><\/br>\n   <h3>Security on output<\/h3><br><\/br>\n   As with the input side, computed lengths are believed to be\n   safe.  For example:<br><\/br>\n   <span class=\"codepre\" >\n   let len = read_untrusted_source () in\n   let buffer = allocate_bitstring () in\n   BITSTRING {\n     buffer : len : bitstring\n   }\n   <\/span><br><\/br>\n   This code merely causes a check that buffer's length is the same as\n   <span class=\"code\" >len<\/span>.  However the program function <span class=\"code\" >allocate_bitstring<\/span> must\n   refuse to allocate an oversized buffer (but that is outside the\n   scope of this library).<br><\/br>\n   <h3>Order of evaluation<\/h3><br><\/br>\n   In <span class=\"code\" >bitmatch<\/span> statements, fields are evaluated left to right.<br><\/br>\n   Note that the when-clause is evaluated <i>last<\/i>, so if you are\n   relying on the when-clause to filter cases then your code may do a\n   lot of extra and unncessary pattern-matching work on fields which\n   may never be needed just to evaluate the when-clause.  Either\n   rearrange the code to do only the first part of the match,\n   followed by the when-clause, followed by a second inner bitmatch,\n   or use a <span class=\"code\" >check()<\/span> qualifier within fields.<br><\/br>\n   <h3>Safety<\/h3><br><\/br>\n   The current implementation is believed to be fully type-safe,\n   and makes compile and run-time checks where appropriate.  If\n   you find a case where a check is missing please submit a\n   bug report or a patch.<br><\/br>\n   <h2>Limits<\/h2><br><\/br>\n   These are thought to be the current limits:<br><\/br>\n   Integers: [1..64] bits.<br><\/br>\n   Bitstrings (32 bit platforms): maximum length is limited\n   by the string size, ie. 16 MBytes.<br><\/br>\n   Bitstrings (64 bit platforms): maximum length is thought to be\n   limited by the string size, ie. effectively unlimited.<br><\/br>\n   Bitstrings must be loaded into memory before we can match against\n   them.  Thus available memory may be considered a limit for some\n   applications.<br><\/br>\n   <h2>Reference<\/h2>\n   <h3>Types<\/h3>"}, {"type": {"name": "Bitstring.endian", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|22201"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "BigEndian", "type": []}, {"name": "LittleEndian", "type": []}, {"name": "NativeEndian", "type": []}]}}}, {"value": {"name": "Bitstring.string_of_endian", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|22242"}, "info": {"description": "Endianness."}, "type": "Bitstring.endian -> string", "params": [{"name": "", "type": "Bitstring.endian"}]}}, {"type": {"name": "Bitstring.bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|22319"}, "info": {"description": "<span class=\"code\" >bitstring<\/span> is the basic type used to store bitstrings.<br><\/br>\n    The type contains the underlying data (a string),\n    the current bit offset within the string and the\n    current bit length of the string (counting from the\n    bit offset).  Note that the offset and length are\n    in <b>bits<\/b>, not bytes.<br><\/br>\n    Normally you don't need to use the bitstring type\n    directly, since there are functions and syntax\n    extensions which hide the details.<br><\/br>\n    See also <a href=\"{value|Bitstring.bitstring_of_string}\" ><span class=\"code\" >Bitstring.bitstring_of_string<\/span><\/a>, <a href=\"{none|bitstring_of_file}\" ><span class=\"code\" >bitstring_of_file<\/span><\/a>,\n    <a href=\"{value|Bitstring.hexdump_bitstring}\" ><span class=\"code\" >Bitstring.hexdump_bitstring<\/span><\/a>, <a href=\"{value|Bitstring.bitstring_length}\" ><span class=\"code\" >Bitstring.bitstring_length<\/span><\/a>."}, "params": [], "kind": {"type": "abstract"}, "manifest": "string * int * int"}}, {"type": {"name": "Bitstring.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|22909"}, "info": {"description": "<span class=\"code\" >t<\/span> is a synonym for the <a href=\"{type|Bitstring.bitstring}\" ><span class=\"code\" >Bitstring.bitstring<\/span><\/a> type.<br><\/br>\n    This allows you to use this module with functors like\n    <span class=\"code\" >Set<\/span> and <span class=\"code\" >Map<\/span> from the stdlib."}, "params": [], "kind": {"type": "abstract"}, "manifest": "Bitstring.bitstring"}}, {"comment": "<h3>Exceptions<\/h3>"}, {"exception": {"name": "Bitstring.Construct_failure", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|23090"}, "info": {"description": "<span class=\"code\" >Construct_failure (message, file, line, char)<\/span> may be\n    raised by the <span class=\"code\" >BITSTRING<\/span> constructor.<br><\/br>\n    Common reasons are that values are out of range of\n    the fields that contain them, or that computed lengths\n    are impossible (eg. negative length bitfields).<br><\/br>\n    <span class=\"code\" >message<\/span> is the error message.<br><\/br>\n    <span class=\"code\" >file<\/span>, <span class=\"code\" >line<\/span> and <span class=\"code\" >char<\/span> point to the original source\n    location of the <span class=\"code\" >BITSTRING<\/span> constructor that failed."}, "exception_args": ["string", "string", "int", "int"]}}, {"comment": "<h3>Bitstring comparison<\/h3>"}, {"value": {"name": "Bitstring.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|23609"}, "info": {"description": "<span class=\"code\" >compare bs1 bs2<\/span> compares two bitstrings and returns zero\n    if they are equal, a negative number if <span class=\"code\" >bs1 &lt; bs2<\/span>, or a\n    positive number if <span class=\"code\" >bs1 &gt; bs2<\/span>.<br><\/br>\n    This tests \"semantic equality\" which is not affected by\n    the offset or alignment of the underlying representation\n    (see <a href=\"{type|Bitstring.bitstring}\" ><span class=\"code\" >Bitstring.bitstring<\/span><\/a>).<br><\/br>\n    The ordering is total and lexicographic."}, "type": "Bitstring.bitstring -> Bitstring.bitstring -> int", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Bitstring.equals", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|24010"}, "info": {"description": "<span class=\"code\" >equals<\/span> returns true if and only if the two bitstrings are\n    semantically equal.  It is the same as calling <span class=\"code\" >compare<\/span> and\n    testing if the result is <span class=\"code\" >0<\/span>, but usually more efficient."}, "type": "Bitstring.bitstring -> Bitstring.bitstring -> bool", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"comment": "<h3>Bitstring manipulation<\/h3>"}, {"value": {"name": "Bitstring.bitstring_length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|24284"}, "info": {"description": "<span class=\"code\" >bitstring_length bitstring<\/span> returns the length of\n    the bitstring in bits.<br><\/br>\n    Note this just returns the third field in the <a href=\"{type|Bitstring.bitstring}\" ><span class=\"code\" >Bitstring.bitstring<\/span><\/a> tuple."}, "type": "Bitstring.bitstring -> int", "params": [{"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Bitstring.bitstring_is_byte_aligned", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|24481"}, "info": {"description": "<span class=\"code\" >bitstring_is_byte_aligned b<\/span> returns true if the data in\n    <span class=\"code\" >b<\/span> is byte-aligned."}, "type": "Bitstring.bitstring -> bool", "params": [{"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Bitstring.bitstring_write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|24622"}, "info": {"description": "<span class=\"code\" >bitstring_write src offset dest<\/span> modifies <span class=\"code\" >dest<\/span> in place\n    by writing <span class=\"code\" >src<\/span> starting at <span class=\"code\" >offset<\/span> in <span class=\"code\" >dest<\/span>.<br><\/br>\n    Note that <span class=\"code\" >offset<\/span> is currently in bytes *not* bits."}, "type": "Bitstring.bitstring -> int -> Bitstring.bitstring -> unit", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Bitstring.bitstring_chop", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|24860"}, "info": {"description": "<span class=\"code\" >bitstring_chop n bits<\/span> splits <span class=\"code\" >bits<\/span> into a sequence of bitstrings,\n    each of which (except maybe the last) having length <span class=\"code\" >n<\/span> bits."}, "type": "int -> Bitstring.bitstring -> Bitstring.bitstring list", "params": [{"name": "", "type": "int"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Bitstring.bitstring_clip", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|25059"}, "info": {"description": "<span class=\"code\" >bitstring_clip bits offset length<\/span> returns the bitstring which\n    exists between <span class=\"code\" >offset<\/span> and <span class=\"code\" >offset + length<\/span> in <span class=\"code\" >bits<\/span>. A bit is\n    present in the result if it is both in <span class=\"code\" >bits<\/span> and between <span class=\"code\" >offset<\/span>\n    and <span class=\"code\" >offset + length<\/span>."}, "type": "Bitstring.bitstring -> int -> int -> Bitstring.bitstring", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.subbitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|25357"}, "info": {"description": "<span class=\"code\" >subbitstring bits off len<\/span> returns a sub-bitstring\n    of the bitstring, starting at offset <span class=\"code\" >off<\/span> bits and\n    with length <span class=\"code\" >len<\/span> bits.<br><\/br>\n    If the original bitstring is not long enough to do this\n    then the function raises <span class=\"code\" >Invalid_argument \"subbitstring\"<\/span>.<br><\/br>\n    Note that this function just changes the offset and length\n    fields of the <a href=\"{type|Bitstring.bitstring}\" ><span class=\"code\" >Bitstring.bitstring<\/span><\/a> tuple, so is very efficient."}, "type": "Bitstring.bitstring -> int -> int -> Bitstring.bitstring", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.dropbits", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|25806"}, "info": {"description": "Drop the first n bits of the bitstring and return a new\n    bitstring which is shorter by n bits.<br><\/br>\n    If the length of the original bitstring is less than n bits,\n    this raises <span class=\"code\" >Invalid_argument \"dropbits\"<\/span>.<br><\/br>\n    Note that this function just changes the offset and length\n    fields of the <a href=\"{type|Bitstring.bitstring}\" ><span class=\"code\" >Bitstring.bitstring<\/span><\/a> tuple, so is very efficient."}, "type": "int -> Bitstring.bitstring -> Bitstring.bitstring", "params": [{"name": "", "type": "int"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Bitstring.takebits", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|26194"}, "info": {"description": "Take the first n bits of the bitstring and return a new\n    bitstring which is exactly n bits long.<br><\/br>\n    If the length of the original bitstring is less than n bits,\n    this raises <span class=\"code\" >Invalid_argument \"takebits\"<\/span>.<br><\/br>\n    Note that this function just changes the offset and length\n    fields of the <a href=\"{type|Bitstring.bitstring}\" ><span class=\"code\" >Bitstring.bitstring<\/span><\/a> tuple, so is very efficient."}, "type": "int -> Bitstring.bitstring -> Bitstring.bitstring", "params": [{"name": "", "type": "int"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Bitstring.concat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|26584"}, "info": {"description": "Concatenate a list of bitstrings together into a single\n    bitstring."}, "type": "Bitstring.bitstring list -> Bitstring.bitstring", "params": [{"name": "", "type": "Bitstring.bitstring list"}]}}, {"comment": "<h3>Constructing bitstrings<\/h3>"}, {"value": {"name": "Bitstring.empty_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|26740"}, "info": {"description": "<span class=\"code\" >empty_bitstring<\/span> is the empty, zero-length bitstring."}, "type": "Bitstring.bitstring", "params": []}}, {"value": {"name": "Bitstring.create_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|26835"}, "info": {"description": "<span class=\"code\" >create_bitstring n<\/span> creates an <span class=\"code\" >n<\/span> bit bitstring\n    containing all zeroes."}, "type": "int -> Bitstring.bitstring", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.make_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|26960"}, "info": {"description": "<span class=\"code\" >make_bitstring n c<\/span> creates an <span class=\"code\" >n<\/span> bit bitstring\n    containing the repeated 8 bit pattern in <span class=\"code\" >c<\/span>.<br><\/br>\n    For example, <span class=\"code\" >make_bitstring 16 '\\x5a'<\/span> will create\n    the bitstring <span class=\"code\" >0x5a5a<\/span> or in binary <span class=\"code\" >0101 1010 0101 1010<\/span>.<br><\/br>\n    Note that the length is in bits, not bytes.  The length does NOT\n    need to be a multiple of 8."}, "type": "int -> char -> Bitstring.bitstring", "params": [{"name": "", "type": "int"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Bitstring.zeroes_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|27336"}, "info": {"description": "<span class=\"code\" >zeroes_bitstring<\/span> creates an <span class=\"code\" >n<\/span> bit bitstring of all 0's.<br><\/br>\n    Actually this is the same as <a href=\"{value|Bitstring.create_bitstring}\" ><span class=\"code\" >Bitstring.create_bitstring<\/span><\/a>."}, "type": "int -> Bitstring.bitstring", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.ones_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|27499"}, "info": {"description": "<span class=\"code\" >ones_bitstring<\/span> creates an <span class=\"code\" >n<\/span> bit bitstring of all 1's."}, "type": "int -> Bitstring.bitstring", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.bitstring_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|27603"}, "info": {"description": "<span class=\"code\" >bitstring_of_string str<\/span> creates a bitstring\n    of length <span class=\"code\" >String.length str * 8<\/span> (bits) containing the\n    bits in <span class=\"code\" >str<\/span>.<br><\/br>\n    Note that the bitstring uses <span class=\"code\" >str<\/span> as the underlying\n    string (see the representation of <a href=\"{type|Bitstring.bitstring}\" ><span class=\"code\" >Bitstring.bitstring<\/span><\/a>) so you\n    should not change <span class=\"code\" >str<\/span> after calling this."}, "type": "string -> Bitstring.bitstring", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Bitstring.bitstring_of_chan", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|27947"}, "info": {"description": "<span class=\"code\" >bitstring_of_chan chan<\/span> loads the contents of\n    the input channel <span class=\"code\" >chan<\/span> as a bitstring.<br><\/br>\n    The length of the final bitstring is determined\n    by the remaining input in <span class=\"code\" >chan<\/span>, but will always\n    be a multiple of 8 bits.<br><\/br>\n    See also <a href=\"{value|Bitstring.bitstring_of_chan_max}\" ><span class=\"code\" >Bitstring.bitstring_of_chan_max<\/span><\/a>."}, "type": "Pervasives.in_channel -> Bitstring.bitstring", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Bitstring.bitstring_of_chan_max", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|28271"}, "info": {"description": "<span class=\"code\" >bitstring_of_chan_max chan max<\/span> works like\n    <a href=\"{value|Bitstring.bitstring_of_chan}\" ><span class=\"code\" >Bitstring.bitstring_of_chan<\/span><\/a> but will only read up to\n    <span class=\"code\" >max<\/span> bytes from the channel (or fewer if the end of input\n    occurs before that)."}, "type": "Pervasives.in_channel -> int -> Bitstring.bitstring", "params": [{"name": "", "type": "Pervasives.in_channel"}, {"name": "", "type": "int"}]}}, {"comment": "<h3>Converting bitstrings<\/h3>"}, {"value": {"name": "Bitstring.string_of_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|28554"}, "info": {"description": "<span class=\"code\" >string_of_bitstring bitstring<\/span> converts a bitstring to a string\n    (eg. to allow comparison).<br><\/br>\n    This function is inefficient.  In the best case when the bitstring\n    is nicely byte-aligned we do a <span class=\"code\" >String.sub<\/span> operation.  If the\n    bitstring isn't aligned then this involves a lot of bit twiddling\n    and is particularly inefficient.<br><\/br>\n    If the bitstring is not a multiple of 8 bits wide then the\n    final byte of the string contains the high bits set to the\n    remaining bits and the low bits set to 0."}, "type": "Bitstring.bitstring -> string", "params": [{"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Bitstring.bitstring_to_chan", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|29123"}, "info": {"description": "<span class=\"code\" >bitstring_to_file bits filename<\/span> writes the bitstring <span class=\"code\" >bits<\/span>\n    to the channel <span class=\"code\" >chan<\/span>.<br><\/br>\n    Channels are made up of bytes, bitstrings can be any bit length\n    including fractions of bytes.  So this function only works\n    if the length of the bitstring is an exact multiple of 8 bits\n    (otherwise it raises <span class=\"code\" >Invalid_argument \"bitstring_to_chan\"<\/span>).<br><\/br>\n    Furthermore the function is efficient only in the case where\n    the bitstring is stored fully aligned, otherwise it has to\n    do inefficient bit twiddling like <a href=\"{value|Bitstring.string_of_bitstring}\" ><span class=\"code\" >Bitstring.string_of_bitstring<\/span><\/a>.<br><\/br>\n    In the common case where the bitstring was generated by the\n    <span class=\"code\" >BITSTRING<\/span> operator and is an exact multiple of 8 bits wide,\n    then this function will always work efficiently."}, "type": "Bitstring.bitstring -> Pervasives.out_channel -> unit", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "Pervasives.out_channel"}]}}, {"comment": "<h3>Printing bitstrings<\/h3>"}, {"value": {"name": "Bitstring.hexdump_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|29948"}, "info": {"description": "<span class=\"code\" >hexdump_bitstring chan bitstring<\/span> prints the bitstring\n    to the output channel in a format similar to the\n    Unix command <span class=\"code\" >hexdump -C<\/span>."}, "type": "Pervasives.out_channel -> Bitstring.bitstring -> unit", "params": [{"name": "", "type": "Pervasives.out_channel"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"comment": "<h3>Bitstring buffer<\/h3>"}, {"module": {"name": "Bitstring.Buffer", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|30182"}, "info": {"description": "Buffers are mainly used by the <span class=\"code\" >BITSTRING<\/span> constructor, but\n    may also be useful for end users.  They work much like the\n    standard library <span class=\"code\" >Buffer<\/span> module."}, "type": "sig  end", "module_structure": [{"type": {"name": "Bitstring.Buffer.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|30213"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Bitstring.Buffer.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|30213"}, "info": "", "type": "unit -> Bitstring.Buffer.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Bitstring.Buffer.contents", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|30238"}, "info": "", "type": "Bitstring.Buffer.t -> Bitstring.bitstring", "params": [{"name": "", "type": "Bitstring.Buffer.t"}]}}, {"value": {"name": "Bitstring.Buffer.add_bits", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|30270"}, "info": "", "type": "Bitstring.Buffer.t -> string -> int -> unit", "params": [{"name": "", "type": "Bitstring.Buffer.t"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.Buffer.add_bit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|30314"}, "info": "", "type": "Bitstring.Buffer.t -> bool -> unit", "params": [{"name": "", "type": "Bitstring.Buffer.t"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Bitstring.Buffer.add_byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|30348"}, "info": "", "type": "Bitstring.Buffer.t -> int -> unit", "params": [{"name": "", "type": "Bitstring.Buffer.t"}, {"name": "", "type": "int"}]}}], "dependencies": {"uses": []}}}, {"comment": "<h3>Get\/set bits<\/h3><br><\/br>\n    These functions let you manipulate individual bits in the\n    bitstring.  However they are not particularly efficient and you\n    should generally use the <span class=\"code\" >bitmatch<\/span> and <span class=\"code\" >BITSTRING<\/span> operators when\n    building and parsing bitstrings.<br><\/br>\n    These functions all raise <span class=\"code\" >Invalid_argument \"index out of bounds\"<\/span>\n    if the index is out of range of the bitstring."}, {"value": {"name": "Bitstring.set", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|30940"}, "info": {"description": "<span class=\"code\" >set bits n<\/span> sets the <span class=\"code\" >n<\/span>th bit in the bitstring to 1."}, "type": "Bitstring.bitstring -> int -> unit", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|31040"}, "info": {"description": "<span class=\"code\" >clear bits n<\/span> sets the <span class=\"code\" >n<\/span>th bit in the bitstring to 0."}, "type": "Bitstring.bitstring -> int -> unit", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.is_set", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|31144"}, "info": {"description": "<span class=\"code\" >is_set bits n<\/span> is true if the <span class=\"code\" >n<\/span>th bit is set to 1."}, "type": "Bitstring.bitstring -> int -> bool", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.is_clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|31246"}, "info": {"description": "<span class=\"code\" >is_clear bits n<\/span> is true if the <span class=\"code\" >n<\/span>th bit is set to 0."}, "type": "Bitstring.bitstring -> int -> bool", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.put", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|31352"}, "info": {"description": "<span class=\"code\" >put bits n v<\/span> sets the <span class=\"code\" >n<\/span>th bit in the bitstring to 1\n      if <span class=\"code\" >v<\/span> is not zero, or to 0 if <span class=\"code\" >v<\/span> is zero."}, "type": "Bitstring.bitstring -> int -> int -> unit", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Bitstring.get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|31510"}, "info": {"description": "<span class=\"code\" >get bits n<\/span> returns the <span class=\"code\" >n<\/span>th bit (returns non-zero or 0)."}, "type": "Bitstring.bitstring -> int -> int", "params": [{"name": "", "type": "Bitstring.bitstring"}, {"name": "", "type": "int"}]}}, {"comment": "<h3>Miscellaneous<\/h3>"}, {"value": {"name": "Bitstring.package", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|31640"}, "info": {"description": "The package name, always <span class=\"code\" >\"ocaml-bitstring\"<\/span>"}, "type": "string", "params": []}}, {"value": {"name": "Bitstring.version", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|31714"}, "info": {"description": "The package version as a string."}, "type": "string", "params": []}}, {"value": {"name": "Bitstring.debug", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring.mli|31776"}, "info": {"description": "Set this variable to true to enable extended debugging.\n    This only works if debugging was also enabled in the\n    <span class=\"code\" >pa_bitstring.ml<\/span> file at compile time, otherwise it\n    does nothing."}, "type": "bool Pervasives.ref", "params": []}}], "dependencies": {"uses": [], "used_by": ["Bitstring_stream", "OS", "Net", "Dns", "Http", "Openflow", "Fs"]}}}, "Bitstring_types": {"module": {"name": "Bitstring_types", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_types.ml", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_types.ml|0", "interface": "unknown"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Bitstring_types.endian", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_types.ml|972", "interface": "unknown"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "BigEndian", "type": []}, {"name": "LittleEndian", "type": []}, {"name": "NativeEndian", "type": []}]}}}, {"value": {"name": "Bitstring_types.string_of_endian", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_types.ml|1013", "interface": "unknown"}, "info": "", "type": "Bitstring_types.endian -> string", "params": [{"tuple": {"type": "Bitstring_types.endian", "contents": []}}]}}], "dependencies": {"uses": [], "used_by": ["Bitstring_config"]}}}, "Bitstring_config": {"module": {"name": "Bitstring_config", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_config.ml", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_config.ml|0", "interface": "unknown"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "Bitstring_config.nativeendian", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_config.ml|1133", "interface": "unknown"}, "info": "", "type": "Bitstring_types.endian", "params": []}}, {"value": {"name": "Bitstring_config.package", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_config.ml|1182", "interface": "unknown"}, "info": "", "type": "string", "params": []}}, {"value": {"name": "Bitstring_config.version", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_config.ml|1214", "interface": "unknown"}, "info": "", "type": "string", "params": []}}, {"value": {"name": "Bitstring_config.ocamllibdir", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_config.ml|1236", "interface": "unknown"}, "info": "", "type": "string", "params": []}}, {"value": {"name": "Bitstring_config.diff", "location": {"implementation": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_config.ml|1272", "interface": "unknown"}, "info": "", "type": "string", "params": []}}], "dependencies": {"uses": ["Bitstring_types"], "used_by": []}}}, "Bitstring_stream": {"module": {"name": "Bitstring_stream", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_stream.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_stream.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Bitstring_stream.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_stream.mli|804"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Bitstring.t Lwt_stream.t"}}, {"value": {"name": "Bitstring_stream.string_of_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/bitstring_stream.mli|830"}, "info": "", "type": "Bitstring_stream.t -> string Lwt.t", "params": [{"name": "", "type": "Bitstring_stream.t"}]}}], "dependencies": {"uses": ["Lwt_stream", "Lwt", "Bitstring"], "used_by": []}}}, "Regexp": {"module": {"name": "Regexp", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|0"}, "info": {"description": "This module provides functions for creating and using Regular Expression.<br><\/br>\n   It is in pure OCaml (unlike Pcre_Ocaml) and thus more portable. It is\n   reentrant (unlike Str) but not thread-safe in case of preemptive schedulling."}, "type": "sig  end", "module_structure": [{"module": {"name": "Regexp.Hashcons", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Hashcons.hash_consed", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1067"}, "info": "", "params": [{"covariant": true, "contravariant": false, "type": "'a"}], "kind": {"type": "record", "private": "false", "fields": [{"name": "hkey", "mutable": false, "type": "int"}, {"name": "tag", "mutable": false, "type": "int"}, {"name": "node", "mutable": false, "type": "'a"}]}}}, {"module_type": {"name": "Regexp.Hashcons.HashedType", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1140"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Hashcons.HashedType.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1186"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Hashcons.HashedType.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1186"}, "info": "", "type": "Regexp.Hashcons.HashedType.t * Regexp.Hashcons.HashedType.t -> bool", "params": [{"tuple": {"type": "Regexp.Hashcons.HashedType.t * Regexp.Hashcons.HashedType.t", "contents": [{"name": "", "type": "Regexp.Hashcons.HashedType.t"}, {"name": "", "type": "Regexp.Hashcons.HashedType.t"}]}}]}}, {"value": {"name": "Regexp.Hashcons.HashedType.hash", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1216"}, "info": "", "type": "Regexp.Hashcons.HashedType.t -> int", "params": [{"name": "", "type": "Regexp.Hashcons.HashedType.t"}]}}]}}, {"module_type": {"name": "Regexp.Hashcons.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1243"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Hashcons.S.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1282"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Regexp.Hashcons.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1293"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Hashcons.S.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1293"}, "info": "", "type": "int -> Regexp.Hashcons.S.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Regexp.Hashcons.S.hashcons", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1319"}, "info": "", "type": "Regexp.Hashcons.S.t ->\n  Regexp.Hashcons.S.key -> Regexp.Hashcons.S.key Regexp.Hashcons.hash_consed", "params": [{"name": "", "type": "Regexp.Hashcons.S.t"}, {"name": "", "type": "Regexp.Hashcons.S.key"}]}}]}}, {"module": {"name": "Regexp.Hashcons.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1369"}, "info": "", "type": "functor (H : HashedType) -> sig  end", "module_functor": {"parameter": {"name": "H", "module_alias": {"name": "Regexp.Hashcons.HashedType"}}, "module_with": {"module_alias": {"name": "Regexp.Hashcons.S", "module_type": {"name": "Regexp.Hashcons.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1243"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Hashcons.S.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1282"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Regexp.Hashcons.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1293"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Hashcons.S.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1293"}, "info": "", "type": "int -> Regexp.Hashcons.S.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Regexp.Hashcons.S.hashcons", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1319"}, "info": "", "type": "Regexp.Hashcons.S.t ->\n  Regexp.Hashcons.S.key -> Regexp.Hashcons.S.key Regexp.Hashcons.hash_consed", "params": [{"name": "", "type": "Regexp.Hashcons.S.t"}, {"name": "", "type": "Regexp.Hashcons.S.key"}]}}]}}, "with": " with type key = H.t"}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Regexp.Inttagmap", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1427"}, "info": "", "type": "sig  end", "module_structure": [{"module_type": {"name": "Regexp.Inttagmap.IntTagMapModule", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1477"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Inttagmap.IntTagMapModule.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1528"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "abstract"}}}, {"type": {"name": "Regexp.Inttagmap.IntTagMapModule.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1549"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'b"}, {"covariant": true, "contravariant": true, "type": "'c"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1549"}, "info": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t", "params": []}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1577"}, "info": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key ->\n  'b ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key"}, {"name": "", "type": "'a"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1638"}, "info": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> 'b", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1684"}, "info": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1739"}, "info": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1784"}, "info": "", "type": "('a Regexp.Inttagmap.IntTagMapModule.key -> 'b -> unit) ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> unit", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key -> 'b -> unit"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1848"}, "info": "", "type": "('a -> 'b) ->\n  ('c, 'a) Regexp.Inttagmap.IntTagMapModule.t ->\n  ('c, 'b) Regexp.Inttagmap.IntTagMapModule.t", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1914"}, "info": "", "type": "('a Regexp.Inttagmap.IntTagMapModule.key -> 'b -> 'c -> 'c) ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> 'c -> 'c", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key -> 'b -> 'c -> 'c"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1998"}, "info": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> int", "params": [{"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.elements", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2033"}, "info": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t ->\n  ('a Regexp.Inttagmap.IntTagMapModule.key * 'b) list", "params": [{"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}]}}, {"module": {"name": "Regexp.Inttagmap.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2092"}, "info": "", "type": "functor (O : sig  end) -> sig  end", "module_functor": {"parameter": {"name": "O", "module_structure": [{"type": {"name": "Regexp.Inttagmap.Make.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2119"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Inttagmap.Make.tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2119"}, "info": "", "type": "Regexp.Inttagmap.Make.t -> int", "params": [{"name": "", "type": "Regexp.Inttagmap.Make.t"}]}}]}, "module_with": {"module_alias": {"name": "Regexp.Inttagmap.IntTagMapModule", "module_type": {"name": "Regexp.Inttagmap.IntTagMapModule", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1477"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Inttagmap.IntTagMapModule.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1528"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'c"}], "kind": {"type": "abstract"}}}, {"type": {"name": "Regexp.Inttagmap.IntTagMapModule.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1549"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'d"}, {"covariant": true, "contravariant": true, "type": "'e"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1549"}, "info": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t", "params": []}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1577"}, "info": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key ->\n  'b ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key"}, {"name": "", "type": "'a"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1638"}, "info": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> 'b", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1684"}, "info": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1739"}, "info": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1784"}, "info": "", "type": "('a Regexp.Inttagmap.IntTagMapModule.key -> 'b -> unit) ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> unit", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key -> 'b -> unit"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.map", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1848"}, "info": "", "type": "('a -> 'b) ->\n  ('c, 'a) Regexp.Inttagmap.IntTagMapModule.t ->\n  ('c, 'b) Regexp.Inttagmap.IntTagMapModule.t", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1914"}, "info": "", "type": "('a Regexp.Inttagmap.IntTagMapModule.key -> 'b -> 'c -> 'c) ->\n  ('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> 'c -> 'c", "params": [{"name": "", "type": "'a Regexp.Inttagmap.IntTagMapModule.key -> 'b -> 'c -> 'c"}, {"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|1998"}, "info": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t -> int", "params": [{"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}, {"value": {"name": "Regexp.Inttagmap.IntTagMapModule.elements", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2033"}, "info": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t ->\n  ('a Regexp.Inttagmap.IntTagMapModule.key * 'b) list", "params": [{"name": "", "type": "('a, 'b) Regexp.Inttagmap.IntTagMapModule.t"}]}}]}}, "with": " with type 'a key = O.t"}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Regexp.Inttagset", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2192"}, "info": "", "type": "sig  end", "module_structure": [{"module_type": {"name": "Regexp.Inttagset.IntTagSetModule", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2243"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Inttagset.IntTagSetModule.elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2294"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "abstract"}}}, {"type": {"name": "Regexp.Inttagset.IntTagSetModule.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2307"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2307"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t", "params": []}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2327"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2358"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2394"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.singleton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2430"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2464"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.union", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2503"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.subset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2539"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.inter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2576"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.diff", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2612"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2647"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2683"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> int", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.elements", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2720"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.elt list", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2758"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.elt", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.cardinal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2789"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t -> int", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2819"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> unit) ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> unit", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> unit"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2866"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> 'b -> 'b) ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> 'b -> 'b", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> 'b -> 'b"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.for_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2921"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> bool) ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> bool"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.exists", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2971"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> bool) ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> bool"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3020"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> bool) ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> bool"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.partition", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3069"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> bool) ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t * 'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> bool"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}]}}, {"module": {"name": "Regexp.Inttagset.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3132"}, "info": "", "type": "functor (O : sig  end) -> sig  end", "module_functor": {"parameter": {"name": "O", "module_structure": [{"type": {"name": "Regexp.Inttagset.Make.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3159"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Inttagset.Make.tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3159"}, "info": "", "type": "Regexp.Inttagset.Make.t -> int", "params": [{"name": "", "type": "Regexp.Inttagset.Make.t"}]}}]}, "module_with": {"module_alias": {"name": "Regexp.Inttagset.IntTagSetModule", "module_type": {"name": "Regexp.Inttagset.IntTagSetModule", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2243"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Inttagset.IntTagSetModule.elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2294"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"type": {"name": "Regexp.Inttagset.IntTagSetModule.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2307"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'c"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2307"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t", "params": []}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2327"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2358"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2394"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.singleton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2430"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2464"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.union", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2503"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.subset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2539"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.inter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2576"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.diff", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2612"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2647"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2683"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> int", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.elements", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2720"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.elt list", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2758"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.elt", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.cardinal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2789"}, "info": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t -> int", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2819"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> unit) ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> unit", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> unit"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2866"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> 'b -> 'b) ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> 'b -> 'b", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> 'b -> 'b"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.for_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2921"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> bool) ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> bool"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.exists", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|2971"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> bool) ->\n  'a Regexp.Inttagset.IntTagSetModule.t -> bool", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> bool"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3020"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> bool) ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> bool"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}, {"value": {"name": "Regexp.Inttagset.IntTagSetModule.partition", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3069"}, "info": "", "type": "('a Regexp.Inttagset.IntTagSetModule.elt -> bool) ->\n  'a Regexp.Inttagset.IntTagSetModule.t ->\n  'a Regexp.Inttagset.IntTagSetModule.t * 'a Regexp.Inttagset.IntTagSetModule.t", "params": [{"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.elt -> bool"}, {"name": "", "type": "'a Regexp.Inttagset.IntTagSetModule.t"}]}}]}}, "with": " with type 'a elt = O.t"}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Regexp.Ptset", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3232"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Ptset.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3300"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Ptset.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3300"}, "info": "", "type": "'a Regexp.Ptset.t", "params": []}}, {"value": {"name": "Regexp.Ptset.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3318"}, "info": "", "type": "'a Regexp.Ptset.t -> bool", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.mem", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3347"}, "info": "", "type": "'a Regexp.Hashcons.hash_consed -> 'a Regexp.Ptset.t -> bool", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3389"}, "info": "", "type": "'a Regexp.Hashcons.hash_consed -> 'a Regexp.Ptset.t -> 'a Regexp.Ptset.t", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.singleton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3431"}, "info": "", "type": "'a Regexp.Hashcons.hash_consed -> 'a Regexp.Ptset.t", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed"}]}}, {"value": {"name": "Regexp.Ptset.remove", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3471"}, "info": "", "type": "'a Regexp.Hashcons.hash_consed -> 'a Regexp.Ptset.t -> 'a Regexp.Ptset.t", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.union", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3516"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Ptset.t -> 'a Regexp.Ptset.t", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.subset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3550"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Ptset.t -> bool", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.inter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3585"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Ptset.t -> 'a Regexp.Ptset.t", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.diff", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3619"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Ptset.t -> 'a Regexp.Ptset.t", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3652"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Ptset.t -> bool", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.equalq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3686"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Ptset.t -> bool", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3721"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Ptset.t -> int", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.elements", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3756"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Hashcons.hash_consed list", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.choose", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3800"}, "info": "", "type": "'a Regexp.Ptset.t -> 'a Regexp.Hashcons.hash_consed", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.cardinal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3838"}, "info": "", "type": "'a Regexp.Ptset.t -> int", "params": [{"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3866"}, "info": "", "type": "('a Regexp.Hashcons.hash_consed -> unit) -> 'a Regexp.Ptset.t -> unit", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed -> unit"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.fold", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3919"}, "info": "", "type": "('a Regexp.Hashcons.hash_consed -> 'b -> 'b) -> 'a Regexp.Ptset.t -> 'b -> 'b", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed -> 'b -> 'b"}, {"name": "", "type": "'a Regexp.Ptset.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Regexp.Ptset.for_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|3980"}, "info": "", "type": "('a Regexp.Hashcons.hash_consed -> bool) -> 'a Regexp.Ptset.t -> bool", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed -> bool"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.exists", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4036"}, "info": "", "type": "('a Regexp.Hashcons.hash_consed -> bool) -> 'a Regexp.Ptset.t -> bool", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed -> bool"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4091"}, "info": "", "type": "('a Regexp.Hashcons.hash_consed -> bool) ->\n  'a Regexp.Ptset.t -> 'a Regexp.Ptset.t", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed -> bool"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}, {"value": {"name": "Regexp.Ptset.partition", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4146"}, "info": "", "type": "('a Regexp.Hashcons.hash_consed -> bool) ->\n  'a Regexp.Ptset.t -> 'a Regexp.Ptset.t * 'a Regexp.Ptset.t", "params": [{"name": "", "type": "'a Regexp.Hashcons.hash_consed -> bool"}, {"name": "", "type": "'a Regexp.Ptset.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Regexp.Regular_expr", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4215"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Regular_expr.regexp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4283"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Regular_expr.uniq_tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4286"}, "info": "", "type": "Regexp.Regular_expr.regexp -> int", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4318"}, "info": "", "type": "Regexp.Regular_expr.regexp", "params": []}}, {"value": {"name": "Regexp.Regular_expr.epsilon", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4339"}, "info": "", "type": "Regexp.Regular_expr.regexp", "params": []}}, {"value": {"name": "Regexp.Regular_expr.char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4362"}, "info": "", "type": "char -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Regexp.Regular_expr.char_interv", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4390"}, "info": "", "type": "char -> char -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "char"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Regexp.Regular_expr.string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4433"}, "info": "", "type": "string -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Regular_expr.star", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4465"}, "info": "", "type": "Regexp.Regular_expr.regexp -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.alt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4495"}, "info": "", "type": "Regexp.Regular_expr.regexp ->\n  Regexp.Regular_expr.regexp -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}, {"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.seq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4534"}, "info": "", "type": "Regexp.Regular_expr.regexp ->\n  Regexp.Regular_expr.regexp -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}, {"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.opt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4573"}, "info": "", "type": "Regexp.Regular_expr.regexp -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.some", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4602"}, "info": "", "type": "Regexp.Regular_expr.regexp -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.nullable", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4634"}, "info": "", "type": "Regexp.Regular_expr.regexp -> bool", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.residual", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4666"}, "info": "", "type": "Regexp.Regular_expr.regexp -> int -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Regexp.Regular_expr.firstchars", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4708"}, "info": "", "type": "Regexp.Regular_expr.regexp -> (int * int * Regexp.Regular_expr.regexp) list", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.match_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4766"}, "info": "", "type": "Regexp.Regular_expr.regexp -> string -> bool", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Regular_expr.fprint", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4814"}, "info": "", "type": "Format.formatter -> Regexp.Regular_expr.regexp -> unit", "params": [{"name": "", "type": "Format.formatter"}, {"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Regular_expr.print", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4864"}, "info": "", "type": "Regexp.Regular_expr.regexp -> unit", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Regexp.Regexp_parser", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4897"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Regexp_parser.token", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|4969"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "CHAR", "type": ["char"]}, {"name": "CHARSET", "type": ["Regexp.Regular_expr.regexp"]}, {"name": "STAR", "type": []}, {"name": "ALT", "type": []}, {"name": "PLUS", "type": []}, {"name": "QUESTION", "type": []}, {"name": "OPENPAR", "type": []}, {"name": "CLOSEPAR", "type": []}, {"name": "EOF", "type": []}]}}}, {"value": {"name": "Regexp.Regexp_parser.regexp_start", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5096"}, "info": "", "type": "(Lexing.lexbuf -> Regexp.Regexp_parser.token) ->\n  Lexing.lexbuf -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "Lexing.lexbuf -> Regexp.Regexp_parser.token"}, {"name": "", "type": "Lexing.lexbuf"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Regexp.Regexp_syntax", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5187"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "Regexp.Regexp_syntax.from_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5245"}, "info": "", "type": "string -> Regexp.Regular_expr.regexp", "params": [{"name": "", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Regexp.Automata", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5300"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Regexp.Automata.automaton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5544"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Regexp.Automata.compile", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5544"}, "info": "", "type": "Regexp.Regular_expr.regexp -> Regexp.Automata.automaton", "params": [{"name": "", "type": "Regexp.Regular_expr.regexp"}]}}, {"value": {"name": "Regexp.Automata.exec_automaton", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5593"}, "info": "", "type": "Regexp.Automata.automaton -> string -> int -> int", "params": [{"name": "", "type": "Regexp.Automata.automaton"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Regexp.Automata.match_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5648"}, "info": "", "type": "Regexp.Automata.automaton -> string -> int -> int option", "params": [{"name": "", "type": "Regexp.Automata.automaton"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Regexp.Automata.search_forward", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5710"}, "info": "", "type": "Regexp.Automata.automaton -> string -> int -> int * int", "params": [{"name": "", "type": "Regexp.Automata.automaton"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Regexp.Automata.split_strings", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5771"}, "info": "", "type": "Regexp.Automata.automaton -> string -> string list", "params": [{"name": "", "type": "Regexp.Automata.automaton"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Automata.split_delim", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5827"}, "info": "", "type": "Regexp.Automata.automaton -> string -> string list", "params": [{"name": "", "type": "Regexp.Automata.automaton"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Automata.replace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5883"}, "info": "", "type": "Regexp.Automata.automaton -> string -> string -> string", "params": [{"name": "", "type": "Regexp.Automata.automaton"}, {"name": "", "type": "string"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Automata.substitute", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|5944"}, "info": "", "type": "Regexp.Automata.automaton -> string -> (string -> string) -> string", "params": [{"name": "", "type": "Regexp.Automata.automaton"}, {"name": "", "type": "string"}, {"name": "", "type": "string -> string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Regexp.Re", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|6022"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "This module provides functions for creating and using Regular Expression.<br><\/br>\n   It is in pure OCaml (unlike Pcre_Ocaml) and thus more portable. It is\n   reentrant (unlike Str) but not thread-safe in case of preemptive schedulling."}, {"comment": "# Basic regexps."}, {"type": {"name": "Regexp.Re.regexp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|6477"}, "info": {"description": "The type of regexps."}, "params": [], "kind": {"type": "abstract"}}}, {"comment": "## Regexp constructors."}, {"comment": "### Functional constructors."}, {"value": {"name": "Regexp.Re.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|6477"}, "info": {"description": "The regexp denoting the absence of word."}, "type": "Regexp.Re.regexp", "params": []}}, {"value": {"name": "Regexp.Re.epsilon", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|6539"}, "info": {"description": "The regexp denoting the empty word."}, "type": "Regexp.Re.regexp", "params": []}}, {"value": {"name": "Regexp.Re.char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|6606"}, "info": {"description": "The regexp matching a given character."}, "type": "char -> Regexp.Re.regexp", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Regexp.Re.char_interv", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|6714"}, "info": {"description": "The regexp matching any character in the given range. Bounds are included."}, "type": "char -> char -> Regexp.Re.regexp", "params": [{"name": "", "type": "char"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Regexp.Re.string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|6806"}, "info": {"description": "The regexp matching the exact given string."}, "type": "string -> Regexp.Re.regexp", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Re.star", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|6912"}, "info": {"description": "The regexp matching 0 or more words recognized by the given regexp."}, "type": "Regexp.Re.regexp -> Regexp.Re.regexp", "params": [{"name": "", "type": "Regexp.Re.regexp"}]}}, {"value": {"name": "Regexp.Re.alt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|7017"}, "info": {"description": "The regexp matching words matched by either one of the given regexps."}, "type": "Regexp.Re.regexp -> Regexp.Re.regexp -> Regexp.Re.regexp", "params": [{"name": "", "type": "Regexp.Re.regexp"}, {"name": "", "type": "Regexp.Re.regexp"}]}}, {"value": {"name": "Regexp.Re.seq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|7158"}, "info": {"description": "The regexp matching the concatenation of two words matched by each one of\n    the given regexps."}, "type": "Regexp.Re.regexp -> Regexp.Re.regexp -> Regexp.Re.regexp", "params": [{"name": "", "type": "Regexp.Re.regexp"}, {"name": "", "type": "Regexp.Re.regexp"}]}}, {"value": {"name": "Regexp.Re.opt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|7263"}, "info": {"description": "The regexp matching 0 or 1 word matched by the given regexp."}, "type": "Regexp.Re.regexp -> Regexp.Re.regexp", "params": [{"name": "", "type": "Regexp.Re.regexp"}]}}, {"value": {"name": "Regexp.Re.some", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|7362"}, "info": {"description": "The regexp matching 1 or more words matched by the given regexp."}, "type": "Regexp.Re.regexp -> Regexp.Re.regexp", "params": [{"name": "", "type": "Regexp.Re.regexp"}]}}, {"comment": "### Parsing constructor."}, {"value": {"name": "Regexp.Re.from_string_raw", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|7587"}, "info": {"description": "<span class=\"code\" >from_string_raw s<\/span> parses the string <span class=\"code\" >s<\/span> and returns the associated regexp.<br><\/br>\n    The following constructions can be used in the given string:\n      TODO"}, "type": "string -> Regexp.Re.regexp", "params": [{"name": "", "type": "string"}]}}, {"comment": "# Regexp compilation."}, {"comment": "In order to improve the efficiency of regexps, they are compiled to a\n    different internal representation."}, {"type": {"name": "Regexp.Re.compiled_regexp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|7925"}, "info": {"description": "The type of compiled regexps."}, "params": [], "kind": {"type": "abstract"}}}, {"comment": "## Constructors for compiled regexps."}, {"value": {"name": "Regexp.Re.compile", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|7925"}, "info": {"description": "<span class=\"code\" >compile re<\/span> compiles the regexp <span class=\"code\" >re<\/span>."}, "type": "Regexp.Re.regexp -> Regexp.Re.compiled_regexp", "params": [{"name": "", "type": "Regexp.Re.regexp"}]}}, {"value": {"name": "Regexp.Re.from_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|8022"}, "info": {"description": "<span class=\"code\" >from_string s<\/span> is <span class=\"code\" >compile (from_string_raw s)<\/span>."}, "type": "string -> Regexp.Re.compiled_regexp", "params": [{"name": "", "type": "string"}]}}, {"comment": "# Regexp usage."}, {"value": {"name": "Regexp.Re.search_forward", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|8406"}, "info": {"description": "<span class=\"code\" >search_forward cre s i<\/span> evaluates either to <span class=\"code\" >Some (b, e)<\/span> is\n    <span class=\"code\" >String.sub s b (e - b)<\/span> is matched by <span class=\"code\" >cre<\/span> (with <span class=\"code\" >b &gt;= i<\/span> or <span class=\"code\" >None<\/span> if no\n    such tuple exists. In other words, <span class=\"code\" >(e, b)<\/span> are the inclusive begining and\n    exclusive ending offset of a word of <span class=\"code\" >s<\/span> starting from <span class=\"code\" >i<\/span> matched by\n    <span class=\"code\" >cre<\/span>."}, "type": "Regexp.Re.compiled_regexp -> string -> int -> (int * int) option", "params": [{"name": "", "type": "Regexp.Re.compiled_regexp"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Regexp.Re.match_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|8626"}, "info": {"description": "<span class=\"code\" >match_string cre s i<\/span> evaluates to either <span class=\"code\" >Some e<\/span> if <span class=\"code\" >String.sub s i (e -\n    i)<\/span> is matched by <span class=\"code\" >cre<\/span> or <span class=\"code\" >None<\/span> if no such <span class=\"code\" >e<\/span> exists."}, "type": "Regexp.Re.compiled_regexp -> string -> int -> int option", "params": [{"name": "", "type": "Regexp.Re.compiled_regexp"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Regexp.Re.list_matches", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|8891"}, "info": {"description": "<span class=\"code\" >list_matches cre s<\/span> evaluates to a list of strings in which each element is\n    a sub-string of <span class=\"code\" >s<\/span> matched by <span class=\"code\" >cre<\/span>. None of the sub-string overlap.\n    Moreover, they are of maximal size."}, "type": "Regexp.Re.compiled_regexp -> string -> string list", "params": [{"name": "", "type": "Regexp.Re.compiled_regexp"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Re.split_delim", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|9184"}, "info": {"description": "<span class=\"code\" >split_delim cre s<\/span> evaluates to a list of string in which each element is a\n    sub-string of the original one. Each two consecutive elements of the list of\n    sub-string was, in <span class=\"code\" >s<\/span> separated by a word matched by <span class=\"code\" >cre<\/span>."}, "type": "Regexp.Re.compiled_regexp -> string -> string list", "params": [{"name": "", "type": "Regexp.Re.compiled_regexp"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Re.replace", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|9323"}, "info": {"description": "<span class=\"code\" >replace cre s by<\/span> replaces sub-strings of <span class=\"code\" >s<\/span> matched by <span class=\"code\" >cre<\/span> by <span class=\"code\" >by<\/span>."}, "type": "Regexp.Re.compiled_regexp -> string -> string -> string", "params": [{"name": "", "type": "Regexp.Re.compiled_regexp"}, {"name": "", "type": "string"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Regexp.Re.substitute", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/regexp.mli|9508"}, "info": {"description": "<span class=\"code\" >substitute cre s map<\/span> substitutes sub-strings of <span class=\"code\" >s<\/span> matched by <span class=\"code\" >cre<\/span> by\n    <span class=\"code\" >map w<\/span> where <span class=\"code\" >w<\/span> is the matched word."}, "type": "Regexp.Re.compiled_regexp -> string -> (string -> string) -> string", "params": [{"name": "", "type": "Regexp.Re.compiled_regexp"}, {"name": "", "type": "string"}, {"name": "", "type": "string -> string"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Lexing", "Format"], "used_by": []}}}, "OS": {"module": {"name": "OS", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|0"}, "info": {"description": "Access to UNIX sockets"}, "type": "sig  end", "module_structure": [{"module": {"name": "OS.Env", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "OS.Env.argv", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|833"}, "info": "", "type": "unit -> string array Lwt.t", "params": [{"name": "", "type": "unit"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Socket", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|876"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Access to UNIX sockets"}, {"exception": {"name": "OS.Socket.Error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|1746"}, "info": "", "exception_args": ["string"]}}, {"type": {"name": "OS.Socket.ipv4", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|1784"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int32"}}, {"type": {"name": "OS.Socket.port", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|1802"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int"}}, {"type": {"name": "OS.Socket.uid", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|1817"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int"}}, {"type": {"name": "OS.Socket.fd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|1832"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "abstract"}}}, {"type": {"name": "OS.Socket.resp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|1847"}, "info": "", "params": [{"covariant": true, "contravariant": false, "type": "'b"}], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "OK", "type": ["'a"]}, {"name": "Err", "type": ["string"]}, {"name": "Retry", "type": []}]}}}, {"value": {"name": "OS.Socket.tcpv4_connect", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|1880"}, "info": "", "type": "OS.Socket.ipv4 -> OS.Socket.port -> [ `tcpv4 ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "OS.Socket.ipv4"}, {"name": "", "type": "OS.Socket.port"}]}}, {"value": {"name": "OS.Socket.tcpv4_bind", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|1963"}, "info": "", "type": "OS.Socket.ipv4 -> OS.Socket.port -> [ `tcpv4 ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "OS.Socket.ipv4"}, {"name": "", "type": "OS.Socket.port"}]}}, {"value": {"name": "OS.Socket.tcpv4_listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2040"}, "info": "", "type": "[ `tcpv4 ] OS.Socket.fd -> unit OS.Socket.resp", "params": [{"name": "", "type": "[ `tcpv4 ] OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.tcpv4_accept", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2114"}, "info": "", "type": "[ `tcpv4 ] OS.Socket.fd ->\n  ([ `tcpv4 ] OS.Socket.fd * OS.Socket.ipv4 * OS.Socket.port) OS.Socket.resp", "params": [{"name": "", "type": "[ `tcpv4 ] OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.udpv4_socket", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2212"}, "info": "", "type": "unit -> [ `udpv4 ] OS.Socket.fd", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "OS.Socket.udpv4_bind", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2280"}, "info": "", "type": "OS.Socket.ipv4 -> OS.Socket.port -> [ `udpv4 ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "OS.Socket.ipv4"}, {"name": "", "type": "OS.Socket.port"}]}}, {"value": {"name": "OS.Socket.udpv4_recvfrom", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2357"}, "info": "", "type": "[ `udpv4 ] OS.Socket.fd ->\n  string ->\n  int -> int -> (OS.Socket.ipv4 * OS.Socket.port * int) OS.Socket.resp", "params": [{"name": "", "type": "[ `udpv4 ] OS.Socket.fd"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "OS.Socket.udpv4_sendto", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2473"}, "info": "", "type": "[ `udpv4 ] OS.Socket.fd ->\n  string -> int -> int -> OS.Socket.ipv4 * OS.Socket.port -> int OS.Socket.resp", "params": [{"name": "", "type": "[ `udpv4 ] OS.Socket.fd"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"tuple": {"type": "OS.Socket.ipv4 * OS.Socket.port", "contents": [{"name": "", "type": "OS.Socket.ipv4"}, {"name": "", "type": "OS.Socket.port"}]}}]}}, {"value": {"name": "OS.Socket.domain_uid", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2584"}, "info": "", "type": "unit -> OS.Socket.uid", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "OS.Socket.domain_bind", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2639"}, "info": "", "type": "OS.Socket.uid -> [ `domain ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "OS.Socket.uid"}]}}, {"value": {"name": "OS.Socket.domain_connect", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2710"}, "info": "", "type": "OS.Socket.uid -> [ `domain ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "OS.Socket.uid"}]}}, {"value": {"name": "OS.Socket.domain_accept", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2787"}, "info": "", "type": "[ `domain ] OS.Socket.fd -> [ `domain ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "[ `domain ] OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.domain_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2873"}, "info": "", "type": "unit -> OS.Socket.uid list", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "OS.Socket.domain_read", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|2934"}, "info": "", "type": "[ `domain ] OS.Socket.fd -> string OS.Socket.resp", "params": [{"name": "", "type": "[ `domain ] OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.domain_write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3008"}, "info": "", "type": "[ `domain ] OS.Socket.fd -> string -> unit OS.Socket.resp", "params": [{"name": "", "type": "[ `domain ] OS.Socket.fd"}, {"name": "", "type": "string"}]}}, {"value": {"name": "OS.Socket.domain_send_pipe", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3092"}, "info": "", "type": "[ `domain ] OS.Socket.fd ->\n  [< `rd_pipe | `wr_pipe ] OS.Socket.fd -> unit OS.Socket.resp", "params": [{"name": "", "type": "[ `domain ] OS.Socket.fd"}, {"name": "", "type": "[< `rd_pipe | `wr_pipe ] OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.domain_recv_pipe", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3203"}, "info": "", "type": "[ `domain ] OS.Socket.fd ->\n  [< `rd_pipe | `wr_pipe ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "[ `domain ] OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.pipe", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3306"}, "info": "", "type": "unit ->\n  ([ `rd_pipe ] OS.Socket.fd * [ `wr_pipe ] OS.Socket.fd) OS.Socket.resp", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "OS.Socket.connect_result", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3391"}, "info": "", "type": "[< `domain | `tcpv4 ] OS.Socket.fd -> unit OS.Socket.resp", "params": [{"name": "", "type": "[< `domain | `tcpv4 ] OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.file_open_readonly", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3486"}, "info": "", "type": "string -> [ `ro_file ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "OS.Socket.file_open_readwrite", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3566"}, "info": "", "type": "string -> [ `rw_file ] OS.Socket.fd OS.Socket.resp", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "OS.Socket.file_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3647"}, "info": "", "type": "string -> int64 OS.Socket.resp", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "OS.Socket.lseek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3707"}, "info": "", "type": "[< `ro_file | `rw_file ] OS.Socket.fd -> int64 -> unit OS.Socket.resp", "params": [{"name": "", "type": "[< `ro_file | `rw_file ] OS.Socket.fd"}, {"name": "", "type": "int64"}]}}, {"type": {"name": "OS.Socket.dir", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3798"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "OS.Socket.opendir", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3798"}, "info": "", "type": "string -> OS.Socket.dir OS.Socket.resp", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "OS.Socket.readdir", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3852"}, "info": "", "type": "OS.Socket.dir -> string OS.Socket.resp", "params": [{"name": "", "type": "OS.Socket.dir"}]}}, {"value": {"name": "OS.Socket.closedir", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3906"}, "info": "", "type": "OS.Socket.dir -> unit OS.Socket.resp", "params": [{"name": "", "type": "OS.Socket.dir"}]}}, {"value": {"name": "OS.Socket.opentap", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|3961"}, "info": "", "type": "string -> [ `tap ] OS.Socket.fd", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "OS.Socket.read", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|4017"}, "info": "", "type": "[< `rd_pipe | `ro_file | `rw_file | `tap | `tcpv4 | `udpv4 ] OS.Socket.fd ->\n  string -> int -> int -> int OS.Socket.resp", "params": [{"name": "", "type": "[< `rd_pipe | `ro_file | `rw_file | `tap | `tcpv4 | `udpv4 ] OS.Socket.fd"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "OS.Socket.write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|4151"}, "info": "", "type": "[< `tap | `tcpv4 | `udpv4 | `wr_pipe ] OS.Socket.fd ->\n  string -> int -> int -> int OS.Socket.resp", "params": [{"name": "", "type": "[< `tap | `tcpv4 | `udpv4 | `wr_pipe ] OS.Socket.fd"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "OS.Socket.close", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|4266"}, "info": "", "type": "[< `domain\n   | `rd_pipe\n   | `ro_file\n   | `rw_file\n   | `tap\n   | `tcpv4\n   | `udpv4\n   | `wr_pipe ]\n  OS.Socket.fd -> unit", "params": [{"name": "", "type": "[< `domain\n   | `rd_pipe\n   | `ro_file\n   | `rw_file\n   | `tap\n   | `tcpv4\n   | `udpv4\n   | `wr_pipe ]\n  OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.fd_to_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|4395"}, "info": "", "type": "'a OS.Socket.fd -> int", "params": [{"name": "", "type": "'a OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.fdbind", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|4443"}, "info": "", "type": "('a OS.Socket.fd -> 'b Lwt.t) ->\n  ('a OS.Socket.fd -> 'c OS.Socket.resp) -> 'a OS.Socket.fd -> 'c Lwt.t", "params": [{"name": "", "type": "'a OS.Socket.fd -> 'b Lwt.t"}, {"name": "", "type": "'a OS.Socket.fd -> 'b OS.Socket.resp"}, {"name": "", "type": "'a OS.Socket.fd"}]}}, {"value": {"name": "OS.Socket.iobind", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|4519"}, "info": "", "type": "('a -> 'b OS.Socket.resp) -> 'a -> 'b Lwt.t", "params": [{"name": "", "type": "'a -> 'b OS.Socket.resp"}, {"name": "", "type": "'a"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Activations", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|4570"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Activations provides an interface to wait for a file descriptor\n    to become available for either reading or writing"}, {"value": {"name": "OS.Activations.read", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|5710"}, "info": {"description": "Wait for the file descriptor to become ready for reading", "return": "a thread that blocks until the <span class=\"code\" >fd<\/span> is ready for reading"}, "type": "'a OS.Socket.fd -> unit Lwt.t", "params": [{"name": "", "type": "'a OS.Socket.fd"}]}}, {"value": {"name": "OS.Activations.write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|5913"}, "info": {"description": "Wait for the file descriptor to become ready for writing", "return": "a thread that blocks until the <span class=\"code\" >fd<\/span> is ready for writing"}, "type": "'a OS.Socket.fd -> unit Lwt.t", "params": [{"name": "", "type": "'a OS.Socket.fd"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Clock", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|5955"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Clock operations.\n    Currently read-only to retrieve the time in various formats."}, {"type": {"name": "OS.Clock.tm", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|6895"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "tm_sec", "mutable": false, "description": "Seconds 0..60", "type": "int"}, {"name": "tm_min", "mutable": false, "description": "Minutes 0..59", "type": "int"}, {"name": "tm_hour", "mutable": false, "description": "Hours 0..23", "type": "int"}, {"name": "tm_mday", "mutable": false, "description": "Day of month 1..31", "type": "int"}, {"name": "tm_mon", "mutable": false, "description": "Month of year 0..11", "type": "int"}, {"name": "tm_year", "mutable": false, "description": "Year - 1900", "type": "int"}, {"name": "tm_wday", "mutable": false, "description": "Day of week (Sunday is 0)", "type": "int"}, {"name": "tm_yday", "mutable": false, "description": "Day of year 0..365", "type": "int"}, {"name": "tm_isdst", "mutable": false, "description": "Daylight time savings in effect", "type": "bool"}]}}}, {"value": {"name": "OS.Clock.time", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|7417"}, "info": {"description": "Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds."}, "type": "unit -> float", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "OS.Clock.gmtime", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|7547"}, "info": {"description": "Convert a time in seconds, as returned by <a href=\"{value|OS.Clock.time}\" ><span class=\"code\" >OS.Clock.time<\/span><\/a>, into a date and\n   a time. Assumes UTC (Coordinated Universal Time), also known as GMT."}, "type": "float -> OS.Clock.tm", "params": [{"name": "", "type": "float"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Time", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|7752"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "OS.Time.restart_threads", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|8587"}, "info": "", "type": "(unit -> float) -> unit", "params": [{"name": "", "type": "unit -> float"}]}}, {"value": {"name": "OS.Time.select_next", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|8632"}, "info": "", "type": "(unit -> float) -> float option", "params": [{"name": "", "type": "unit -> float"}]}}, {"value": {"name": "OS.Time.sleep", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|8682"}, "info": "", "type": "float -> unit Lwt.t", "params": [{"name": "", "type": "float"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Console", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|8718"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Text console input\/output operations."}, {"type": {"name": "OS.Console.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|9723"}, "info": {"description": "Abstract type of a console instance"}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "OS.Console.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|9723"}, "info": {"description": "The default console, attached from the start of the program"}, "type": "OS.Console.t", "params": []}}, {"value": {"name": "OS.Console.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|9792"}, "info": {"description": "Create an additional console. Not implemented yet."}, "type": "unit -> OS.Console.t", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "OS.Console.write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|9872"}, "info": {"description": "Write a string with offset\/length to the console"}, "type": "OS.Console.t -> string -> int -> int -> unit", "params": [{"name": "", "type": "OS.Console.t"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "OS.Console.sync_write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|9995"}, "info": {"description": "Same as <a href=\"{value|OS.Console.write}\" ><span class=\"code\" >OS.Console.write<\/span><\/a> except that the operation is synchronous"}, "type": "OS.Console.t -> string -> int -> int -> unit Lwt.t", "params": [{"name": "", "type": "OS.Console.t"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "OS.Console.log", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|10053"}, "info": "", "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "OS.Console.log_s", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|10079"}, "info": "", "type": "string -> unit Lwt.t", "params": [{"name": "", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Main", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|10116"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "OS.Main.run", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|10951"}, "info": "", "type": "unit Lwt.t -> unit", "params": [{"name": "", "type": "unit Lwt.t"}]}}, {"value": {"name": "OS.Main.at_enter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|10980"}, "info": "", "type": "(unit -> unit Lwt.t) -> unit", "params": [{"name": "", "type": "unit -> unit Lwt.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Devices", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|11028"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "OS.Devices.id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|11879"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"type": {"name": "OS.Devices.blkif", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|11904"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "< destroy : unit; id : string; ppname : string;\n    read_page : int64 -> Bitstring.t Lwt.t; sector_size : int >"}}, {"type": {"name": "OS.Devices.kv_ro", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12037"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "< iter_s : (string -> unit Lwt.t) -> unit Lwt.t;\n    read : string -> Bitstring.t Lwt_stream.t option Lwt.t;\n    size : string -> int64 option Lwt.t >"}}, {"type": {"name": "OS.Devices.plug", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12196"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "p_id", "mutable": false, "type": "string"}, {"name": "p_dep_ids", "mutable": false, "type": "string list"}, {"name": "p_cfg", "mutable": false, "type": "(string * string) list"}]}}}, {"type": {"name": "OS.Devices.entry", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12409"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "provider", "mutable": false, "type": "OS.Devices.provider"}, {"name": "id", "mutable": false, "type": "string"}, {"name": "depends", "mutable": false, "type": "OS.Devices.entry list"}, {"name": "node", "mutable": false, "type": "OS.Devices.device"}]}}}, {"type": {"name": "OS.Devices.device", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12508"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Blkif", "type": ["OS.Devices.blkif"]}, {"name": "KV_RO", "type": ["OS.Devices.kv_ro"]}]}}}, {"type": {"name": "OS.Devices.provider", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12564"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "< create : deps:OS.Devices.entry list ->\n             cfg:(string * string) list ->\n             OS.Devices.id -> OS.Devices.entry Lwt.t;\n    id : string; plug : OS.Devices.plug Lwt_mvar.t;\n    unplug : OS.Devices.id Lwt_mvar.t >"}}, {"value": {"name": "OS.Devices.new_provider", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12709"}, "info": "", "type": "OS.Devices.provider -> unit", "params": [{"name": "", "type": "OS.Devices.provider"}]}}, {"value": {"name": "OS.Devices.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12746"}, "info": "", "type": "OS.Devices.id -> OS.Devices.entry Lwt.t", "params": [{"name": "", "type": "OS.Devices.id"}]}}, {"value": {"name": "OS.Devices.find_blkif", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12775"}, "info": "", "type": "OS.Devices.id -> OS.Devices.blkif option Lwt.t", "params": [{"name": "", "type": "OS.Devices.id"}]}}, {"value": {"name": "OS.Devices.find_kv_ro", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12817"}, "info": "", "type": "OS.Devices.id -> OS.Devices.kv_ro option Lwt.t", "params": [{"name": "", "type": "OS.Devices.id"}]}}, {"value": {"name": "OS.Devices.with_blkif", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12860"}, "info": "", "type": "OS.Devices.id -> (OS.Devices.blkif -> 'a Lwt.t) -> 'a Lwt.t", "params": [{"name": "", "type": "OS.Devices.id"}, {"name": "", "type": "OS.Devices.blkif -> 'a Lwt.t"}]}}, {"value": {"name": "OS.Devices.with_kv_ro", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12915"}, "info": "", "type": "OS.Devices.id -> (OS.Devices.kv_ro -> 'a Lwt.t) -> 'a Lwt.t", "params": [{"name": "", "type": "OS.Devices.id"}, {"name": "", "type": "OS.Devices.kv_ro -> 'a Lwt.t"}]}}, {"value": {"name": "OS.Devices.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|12971"}, "info": "", "type": "(OS.Devices.id -> unit Lwt.t) -> unit Lwt.t", "params": [{"name": "", "type": "OS.Devices.id -> unit Lwt.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Netif", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|13021"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "OS.Netif.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|13865"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "OS.Netif.id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|13875"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"value": {"name": "OS.Netif.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|13882"}, "info": "", "type": "OS.Netif.t -> (Bitstring.t -> unit Lwt.t) -> unit Lwt.t", "params": [{"name": "", "type": "OS.Netif.t"}, {"name": "", "type": "Bitstring.t -> unit Lwt.t"}]}}, {"value": {"name": "OS.Netif.destroy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|13942"}, "info": "", "type": "OS.Netif.t -> unit Lwt.t", "params": [{"name": "", "type": "OS.Netif.t"}]}}, {"value": {"name": "OS.Netif.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|13972"}, "info": "", "type": "OS.Netif.t -> Bitstring.t list -> unit Lwt.t", "params": [{"name": "", "type": "OS.Netif.t"}, {"name": "", "type": "Bitstring.t list"}]}}, {"value": {"name": "OS.Netif.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|14021"}, "info": "", "type": "(OS.Netif.id -> OS.Netif.t -> unit Lwt.t) -> unit Lwt.t", "params": [{"name": "", "type": "OS.Netif.id -> OS.Netif.t -> unit Lwt.t"}]}}, {"value": {"name": "OS.Netif.mac", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|14072"}, "info": "", "type": "OS.Netif.t -> string", "params": [{"name": "", "type": "OS.Netif.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "OS.Blkif", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|14098"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "OS.Blkif.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|14942"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "OS.Blkif.id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|14952"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"value": {"name": "OS.Blkif.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oS.mli|14960"}, "info": "", "type": "id:string -> filename:string -> OS.Devices.blkif Lwt.t", "params": [{"name": "id", "type": "string"}, {"name": "filename", "type": "string"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Lwt_stream", "Lwt_mvar", "Lwt", "Bitstring"], "used_by": ["Net", "Block"]}}}, "Net": {"module": {"name": "Net", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|0"}, "info": {"description": "Checksum functions for TCP\/IP"}, "type": "sig  end", "module_structure": [{"module": {"name": "Net.Nettypes", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Nettypes.bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|864"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"type": {"name": "Net.Nettypes.ethernet_mac", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|890"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Nettypes.ethernet_mac_of_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|890"}, "info": "", "type": "string -> Net.Nettypes.ethernet_mac", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Net.Nettypes.ethernet_mac_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|941"}, "info": "", "type": "string -> Net.Nettypes.ethernet_mac option", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Net.Nettypes.ethernet_mac_to_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1000"}, "info": "", "type": "Net.Nettypes.ethernet_mac -> Net.Nettypes.bytes", "params": [{"name": "", "type": "Net.Nettypes.ethernet_mac"}]}}, {"value": {"name": "Net.Nettypes.ethernet_mac_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1050"}, "info": "", "type": "Net.Nettypes.ethernet_mac -> string", "params": [{"name": "", "type": "Net.Nettypes.ethernet_mac"}]}}, {"value": {"name": "Net.Nettypes.ethernet_mac_broadcast", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1102"}, "info": "", "type": "Net.Nettypes.ethernet_mac", "params": []}}, {"type": {"name": "Net.Nettypes.ipv4_addr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1159"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Nettypes.ipv4_addr_of_tuple", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1159"}, "info": "", "type": "int32 * int32 * int32 * int32 -> Net.Nettypes.ipv4_addr", "params": [{"tuple": {"type": "int32 * int32 * int32 * int32", "contents": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}, {"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}]}}, {"value": {"name": "Net.Nettypes.ipv4_addr_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1229"}, "info": "", "type": "string -> Net.Nettypes.ipv4_addr option", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Net.Nettypes.ipv4_addr_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1282"}, "info": "", "type": "Net.Nettypes.ipv4_addr -> string", "params": [{"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Nettypes.ipv4_addr_of_uint32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1328"}, "info": "", "type": "int32 -> Net.Nettypes.ipv4_addr", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Net.Nettypes.ipv4_addr_to_uint32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1373"}, "info": "", "type": "Net.Nettypes.ipv4_addr -> int32", "params": [{"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Nettypes.ipv4_blank", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1418"}, "info": "", "type": "Net.Nettypes.ipv4_addr", "params": []}}, {"value": {"name": "Net.Nettypes.ipv4_broadcast", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1445"}, "info": "", "type": "Net.Nettypes.ipv4_addr", "params": []}}, {"value": {"name": "Net.Nettypes.ipv4_localhost", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1476"}, "info": "", "type": "Net.Nettypes.ipv4_addr", "params": []}}, {"type": {"name": "Net.Nettypes.ipv4_src", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1524"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Net.Nettypes.ipv4_addr option * int"}}, {"type": {"name": "Net.Nettypes.ipv4_dst", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1563"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Net.Nettypes.ipv4_addr * int"}}, {"type": {"name": "Net.Nettypes.arp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1591"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "op", "mutable": false, "type": "[ `Reply | `Request | `Unknown of int ]"}, {"name": "sha", "mutable": false, "type": "Net.Nettypes.ethernet_mac"}, {"name": "spa", "mutable": false, "type": "Net.Nettypes.ipv4_addr"}, {"name": "tha", "mutable": false, "type": "Net.Nettypes.ethernet_mac"}, {"name": "tpa", "mutable": false, "type": "Net.Nettypes.ipv4_addr"}]}}}, {"type": {"name": "Net.Nettypes.peer_uid", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1735"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int"}}, {"exception": {"name": "Net.Nettypes.Closed", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1740"}, "info": ""}}, {"module_type": {"name": "Net.Nettypes.FLOW", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1758"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Nettypes.FLOW.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1792"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.FLOW.mgr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1804"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.FLOW.src", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1815"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.FLOW.dst", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1827"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Nettypes.FLOW.read", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1827"}, "info": "", "type": "Net.Nettypes.FLOW.t -> Bitstring.t option Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.FLOW.t"}]}}, {"value": {"name": "Net.Nettypes.FLOW.write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1870"}, "info": "", "type": "Net.Nettypes.FLOW.t -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.FLOW.t"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Nettypes.FLOW.writev", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1915"}, "info": "", "type": "Net.Nettypes.FLOW.t -> Bitstring.t list -> Bitstring.t Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.FLOW.t"}, {"name": "", "type": "Bitstring.t list"}]}}, {"value": {"name": "Net.Nettypes.FLOW.close", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|1973"}, "info": "", "type": "Net.Nettypes.FLOW.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.FLOW.t"}]}}, {"value": {"name": "Net.Nettypes.FLOW.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2004"}, "info": "", "type": "Net.Nettypes.FLOW.mgr ->\n  Net.Nettypes.FLOW.src ->\n  (Net.Nettypes.FLOW.dst -> Net.Nettypes.FLOW.t -> unit Lwt.t) -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.FLOW.mgr"}, {"name": "", "type": "Net.Nettypes.FLOW.src"}, {"name": "", "type": "Net.Nettypes.FLOW.dst -> Net.Nettypes.FLOW.t -> unit Lwt.t"}]}}, {"value": {"name": "Net.Nettypes.FLOW.connect", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2072"}, "info": "", "type": "Net.Nettypes.FLOW.mgr ->\n  ?src:Net.Nettypes.FLOW.src ->\n  Net.Nettypes.FLOW.dst -> (Net.Nettypes.FLOW.t -> 'a Lwt.t) -> 'a Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.FLOW.mgr"}, {"name": "src", "type": "Net.Nettypes.FLOW.src option"}, {"name": "", "type": "Net.Nettypes.FLOW.dst"}, {"name": "", "type": "Net.Nettypes.FLOW.t -> 'a Lwt.t"}]}}]}}, {"module_type": {"name": "Net.Nettypes.DATAGRAM", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2145"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Nettypes.DATAGRAM.mgr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2186"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.DATAGRAM.src", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2197"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.DATAGRAM.dst", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2209"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.DATAGRAM.msg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2221"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Nettypes.DATAGRAM.recv", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2221"}, "info": "", "type": "Net.Nettypes.DATAGRAM.mgr ->\n  Net.Nettypes.DATAGRAM.src ->\n  (Net.Nettypes.DATAGRAM.dst -> Net.Nettypes.DATAGRAM.msg -> unit Lwt.t) ->\n  unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.DATAGRAM.mgr"}, {"name": "", "type": "Net.Nettypes.DATAGRAM.src"}, {"name": "", "type": "Net.Nettypes.DATAGRAM.dst -> Net.Nettypes.DATAGRAM.msg -> unit Lwt.t"}]}}, {"value": {"name": "Net.Nettypes.DATAGRAM.send", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2289"}, "info": "", "type": "Net.Nettypes.DATAGRAM.mgr ->\n  ?src:Net.Nettypes.DATAGRAM.src ->\n  Net.Nettypes.DATAGRAM.dst -> Net.Nettypes.DATAGRAM.msg -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.DATAGRAM.mgr"}, {"name": "src", "type": "Net.Nettypes.DATAGRAM.src option"}, {"name": "", "type": "Net.Nettypes.DATAGRAM.dst"}, {"name": "", "type": "Net.Nettypes.DATAGRAM.msg"}]}}]}}, {"module_type": {"name": "Net.Nettypes.CHANNEL", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2349"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Nettypes.CHANNEL.mgr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2389"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.CHANNEL.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2398"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.CHANNEL.src", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2409"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.CHANNEL.dst", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2421"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Nettypes.CHANNEL.read_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2421"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> char Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.read_until", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2454"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> char -> (bool * Bitstring.t) Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.read_some", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2512"}, "info": "", "type": "?len:int -> Net.Nettypes.CHANNEL.t -> Bitstring.t Lwt.t", "params": [{"name": "len", "type": "int option"}, {"name": "", "type": "Net.Nettypes.CHANNEL.t"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.read_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2564"}, "info": "", "type": "?len:int -> Net.Nettypes.CHANNEL.t -> Bitstring.t Lwt_stream.t", "params": [{"name": "len", "type": "int option"}, {"name": "", "type": "Net.Nettypes.CHANNEL.t"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.read_crlf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2626"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> Bitstring.t Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.write_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2667"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> char -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.write_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2710"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> string -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.write_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2757"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.write_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2812"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> string -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.flush", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2858"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.close", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2888"}, "info": "", "type": "Net.Nettypes.CHANNEL.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.t"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2919"}, "info": "", "type": "Net.Nettypes.CHANNEL.mgr ->\n  Net.Nettypes.CHANNEL.src ->\n  (Net.Nettypes.CHANNEL.dst -> Net.Nettypes.CHANNEL.t -> unit Lwt.t) ->\n  unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.mgr"}, {"name": "", "type": "Net.Nettypes.CHANNEL.src"}, {"name": "", "type": "Net.Nettypes.CHANNEL.dst -> Net.Nettypes.CHANNEL.t -> unit Lwt.t"}]}}, {"value": {"name": "Net.Nettypes.CHANNEL.connect", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2987"}, "info": "", "type": "Net.Nettypes.CHANNEL.mgr ->\n  ?src:Net.Nettypes.CHANNEL.src ->\n  Net.Nettypes.CHANNEL.dst -> (Net.Nettypes.CHANNEL.t -> 'a Lwt.t) -> 'a Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.CHANNEL.mgr"}, {"name": "src", "type": "Net.Nettypes.CHANNEL.src option"}, {"name": "", "type": "Net.Nettypes.CHANNEL.dst"}, {"name": "", "type": "Net.Nettypes.CHANNEL.t -> 'a Lwt.t"}]}}]}}, {"module_type": {"name": "Net.Nettypes.RPC", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3060"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Nettypes.RPC.tx", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3095"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.RPC.rx", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3106"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.RPC.req", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3120"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.RPC.res", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3135"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'c"}], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.RPC.mgr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3147"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.RPC.src", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3158"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.RPC.dst", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3170"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Nettypes.RPC.request", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3170"}, "info": "", "type": "Net.Nettypes.RPC.mgr ->\n  ?src:Net.Nettypes.RPC.src ->\n  Net.Nettypes.RPC.dst ->\n  Net.Nettypes.RPC.tx Net.Nettypes.RPC.req ->\n  Net.Nettypes.RPC.rx Net.Nettypes.RPC.res Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.RPC.mgr"}, {"name": "src", "type": "Net.Nettypes.RPC.src option"}, {"name": "", "type": "Net.Nettypes.RPC.dst"}, {"name": "", "type": "Net.Nettypes.RPC.tx Net.Nettypes.RPC.req"}]}}, {"value": {"name": "Net.Nettypes.RPC.respond", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3235"}, "info": "", "type": "Net.Nettypes.RPC.mgr ->\n  Net.Nettypes.RPC.src ->\n  (Net.Nettypes.RPC.dst ->\n   Net.Nettypes.RPC.rx Net.Nettypes.RPC.req ->\n   Net.Nettypes.RPC.tx Net.Nettypes.RPC.res Lwt.t) ->\n  unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.RPC.mgr"}, {"name": "", "type": "Net.Nettypes.RPC.src"}, {"name": "", "type": "Net.Nettypes.RPC.dst ->\n  Net.Nettypes.RPC.rx Net.Nettypes.RPC.req ->\n  Net.Nettypes.RPC.tx Net.Nettypes.RPC.res Lwt.t"}]}}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Checksum", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|3317"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Checksum functions for TCP\/IP"}, {"value": {"name": "Net.Checksum.ones_complement", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|4248"}, "info": {"description": "One's complement checksum, RFC1071"}, "type": "Bitstring.t -> int", "params": [{"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Checksum.ones_complement_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|4410"}, "info": {"description": "One's complement checksum, RFC1071 over a scatter-gather set of bitstrings"}, "type": "Bitstring.t list -> int", "params": [{"name": "", "type": "Bitstring.t list"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Arp", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|4509"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Arp.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5389"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Arp.set_ips", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5389"}, "info": "", "type": "Net.Arp.t -> Net.Nettypes.ipv4_addr list -> unit Lwt.t", "params": [{"name": "", "type": "Net.Arp.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr list"}]}}, {"value": {"name": "Net.Arp.get_ips", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5436"}, "info": "", "type": "Net.Arp.t -> Net.Nettypes.ipv4_addr list", "params": [{"name": "", "type": "Net.Arp.t"}]}}, {"value": {"name": "Net.Arp.add_ip", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5469"}, "info": "", "type": "Net.Arp.t -> Net.Nettypes.ipv4_addr -> unit Lwt.t", "params": [{"name": "", "type": "Net.Arp.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Arp.remove_ip", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5510"}, "info": "", "type": "Net.Arp.t -> Net.Nettypes.ipv4_addr -> unit Lwt.t", "params": [{"name": "", "type": "Net.Arp.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Arp.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5555"}, "info": "", "type": "Net.Arp.t -> Net.Nettypes.arp -> unit Lwt.t", "params": [{"name": "", "type": "Net.Arp.t"}, {"name": "", "type": "Net.Nettypes.arp"}]}}, {"value": {"name": "Net.Arp.query", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5589"}, "info": "", "type": "Net.Arp.t -> Net.Nettypes.ipv4_addr -> Net.Nettypes.ethernet_mac Lwt.t", "params": [{"name": "", "type": "Net.Arp.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Arp.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5637"}, "info": "", "type": "output:(Net.Nettypes.arp -> unit Lwt.t) ->\n  get_mac:(unit -> Net.Nettypes.ethernet_mac) -> Net.Arp.t", "params": [{"name": "output", "type": "Net.Nettypes.arp -> unit Lwt.t"}, {"name": "get_mac", "type": "unit -> Net.Nettypes.ethernet_mac"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Ethif", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|5719"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Ethif.frame", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6595"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "dmac", "mutable": false, "type": "Net.Nettypes.ethernet_mac"}, {"name": "smac", "mutable": false, "type": "Net.Nettypes.ethernet_mac"}]}}}, {"type": {"name": "Net.Ethif.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6656"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Ethif.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6656"}, "info": "", "type": "Net.Ethif.t -> string * int * int -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ethif.t"}, {"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"value": {"name": "Net.Ethif.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6706"}, "info": "", "type": "Net.Ethif.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ethif.t"}]}}, {"value": {"name": "Net.Ethif.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6735"}, "info": "", "type": "Net.Ethif.t -> Bitstring.t list -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ethif.t"}, {"name": "", "type": "Bitstring.t list"}]}}, {"value": {"name": "Net.Ethif.output_arp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6784"}, "info": "", "type": "OS.Netif.t -> Net.Nettypes.arp -> unit Lwt.t", "params": [{"name": "", "type": "OS.Netif.t"}, {"name": "", "type": "Net.Nettypes.arp"}]}}, {"value": {"name": "Net.Ethif.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6842"}, "info": "", "type": "OS.Netif.t -> Net.Ethif.t * unit Lwt.t", "params": [{"name": "", "type": "OS.Netif.t"}]}}, {"value": {"name": "Net.Ethif.add_ip", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6884"}, "info": "", "type": "Net.Ethif.t -> Net.Nettypes.ipv4_addr -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ethif.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Ethif.remove_ip", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6935"}, "info": "", "type": "Net.Ethif.t -> Net.Nettypes.ipv4_addr -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ethif.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Ethif.query_arp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|6989"}, "info": "", "type": "Net.Ethif.t -> Net.Nettypes.ipv4_addr -> Net.Nettypes.ethernet_mac Lwt.t", "params": [{"name": "", "type": "Net.Ethif.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Ethif.attach", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|7060"}, "info": "", "type": "Net.Ethif.t -> [< `IPv4 of Bitstring.t -> unit Lwt.t ] -> unit", "params": [{"name": "", "type": "Net.Ethif.t"}, {"name": "", "type": "[< `IPv4 of Bitstring.t -> unit Lwt.t ]"}]}}, {"value": {"name": "Net.Ethif.detach", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|7126"}, "info": "", "type": "Net.Ethif.t -> [< `IPv4 ] -> unit", "params": [{"name": "", "type": "Net.Ethif.t"}, {"name": "", "type": "[< `IPv4 ]"}]}}, {"value": {"name": "Net.Ethif.mac", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|7163"}, "info": "", "type": "Net.Ethif.t -> Net.Nettypes.ethernet_mac", "params": [{"name": "", "type": "Net.Ethif.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Ipv4", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|7205"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Ipv4.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8065"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Ipv4.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8065"}, "info": "", "type": "Net.Ipv4.t ->\n  proto:[< `ICMP | `TCP | `UDP ] ->\n  dest_ip:Net.Nettypes.ipv4_addr -> Bitstring.t list -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ipv4.t"}, {"name": "proto", "type": "[< `ICMP | `TCP | `UDP ]"}, {"name": "dest_ip", "type": "Net.Nettypes.ipv4_addr"}, {"name": "", "type": "Bitstring.t list"}]}}, {"value": {"name": "Net.Ipv4.set_ip", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8168"}, "info": "", "type": "Net.Ipv4.t -> Net.Nettypes.ipv4_addr -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ipv4.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Ipv4.get_ip", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8209"}, "info": "", "type": "Net.Ipv4.t -> Net.Nettypes.ipv4_addr", "params": [{"name": "", "type": "Net.Ipv4.t"}]}}, {"value": {"name": "Net.Ipv4.mac", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8236"}, "info": "", "type": "Net.Ipv4.t -> Net.Nettypes.ethernet_mac", "params": [{"name": "", "type": "Net.Ipv4.t"}]}}, {"value": {"name": "Net.Ipv4.set_netmask", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8263"}, "info": "", "type": "Net.Ipv4.t -> Net.Nettypes.ipv4_addr -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ipv4.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Ipv4.set_gateways", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8309"}, "info": "", "type": "Net.Ipv4.t -> Net.Nettypes.ipv4_addr list -> unit Lwt.t", "params": [{"name": "", "type": "Net.Ipv4.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr list"}]}}, {"value": {"name": "Net.Ipv4.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8361"}, "info": "", "type": "Net.Ethif.t -> Net.Ipv4.t * unit Lwt.t", "params": [{"name": "", "type": "Net.Ethif.t"}]}}, {"value": {"name": "Net.Ipv4.attach", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8400"}, "info": "", "type": "Net.Ipv4.t ->\n  [< `ICMP of Net.Nettypes.ipv4_addr -> Bitstring.t -> unit Lwt.t\n   | `TCP of\n       src:Net.Nettypes.ipv4_addr ->\n       dst:Net.Nettypes.ipv4_addr -> Bitstring.t -> unit Lwt.t\n   | `UDP of\n       src:Net.Nettypes.ipv4_addr ->\n       dst:Net.Nettypes.ipv4_addr -> Bitstring.t -> unit Lwt.t ] ->\n  unit", "params": [{"name": "", "type": "Net.Ipv4.t"}, {"name": "", "type": "[< `ICMP of Net.Nettypes.ipv4_addr -> Bitstring.t -> unit Lwt.t\n   | `TCP of\n       src:Net.Nettypes.ipv4_addr ->\n       dst:Net.Nettypes.ipv4_addr -> Bitstring.t -> unit Lwt.t\n   | `UDP of\n       src:Net.Nettypes.ipv4_addr ->\n       dst:Net.Nettypes.ipv4_addr -> Bitstring.t -> unit Lwt.t ]"}]}}, {"value": {"name": "Net.Ipv4.detach", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8667"}, "info": "", "type": "Net.Ipv4.t -> [< `ICMP | `TCP | `UDP ] -> unit", "params": [{"name": "", "type": "Net.Ipv4.t"}, {"name": "", "type": "[< `ICMP | `TCP | `UDP ]"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Icmp", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|8722"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Icmp.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|9586"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Icmp.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|9586"}, "info": "", "type": "Net.Ipv4.t -> Net.Icmp.t * unit Lwt.t", "params": [{"name": "", "type": "Net.Ipv4.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Udp", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|9628"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Udp.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|10486"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Udp.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|10486"}, "info": "", "type": "Net.Udp.t ->\n  src:Net.Nettypes.ipv4_addr ->\n  dst:Net.Nettypes.ipv4_addr -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Udp.t"}, {"name": "src", "type": "Net.Nettypes.ipv4_addr"}, {"name": "dst", "type": "Net.Nettypes.ipv4_addr"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Udp.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|10562"}, "info": "", "type": "Net.Udp.t ->\n  dest_ip:Net.Nettypes.ipv4_addr ->\n  source_port:int -> dest_port:int -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Udp.t"}, {"name": "dest_ip", "type": "Net.Nettypes.ipv4_addr"}, {"name": "source_port", "type": "int"}, {"name": "dest_port", "type": "int"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Udp.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|10662"}, "info": "", "type": "Net.Udp.t ->\n  int ->\n  (src:Net.Nettypes.ipv4_addr ->\n   dst:Net.Nettypes.ipv4_addr -> source_port:int -> Bitstring.t -> unit Lwt.t) ->\n  unit Lwt.t", "params": [{"name": "", "type": "Net.Udp.t"}, {"name": "", "type": "int"}, {"name": "", "type": "src:Net.Nettypes.ipv4_addr ->\n  dst:Net.Nettypes.ipv4_addr -> source_port:int -> Bitstring.t -> unit Lwt.t"}]}}, {"value": {"name": "Net.Udp.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|10781"}, "info": "", "type": "Net.Ipv4.t -> Net.Udp.t * unit Lwt.t", "params": [{"name": "", "type": "Net.Ipv4.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|10823"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Net.Tcp.Sequence", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|10868"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Sequence.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|11738"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Sequence.lt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|11738"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> bool", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.leq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|11776"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> bool", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.gt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|11814"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> bool", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.geq", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|11852"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> bool", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.between", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|11896"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> bool", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.add", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|11943"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.sub", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|11977"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.incr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|12010"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|12028"}, "info": "", "type": "Net.Tcp.Sequence.t -> Net.Tcp.Sequence.t -> int", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.of_int32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|12055"}, "info": "", "type": "int32 -> Net.Tcp.Sequence.t", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Net.Tcp.Sequence.of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|12080"}, "info": "", "type": "int -> Net.Tcp.Sequence.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Net.Tcp.Sequence.to_int32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|12101"}, "info": "", "type": "Net.Tcp.Sequence.t -> int32", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.to_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|12126"}, "info": "", "type": "Net.Tcp.Sequence.t -> int", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Sequence.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|12147"}, "info": "", "type": "Net.Tcp.Sequence.t -> string", "params": [{"name": "", "type": "Net.Tcp.Sequence.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.Window", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|12178"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Window.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13034"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Window.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13034"}, "info": "", "type": "rx_wnd_scale:int ->\n  tx_wnd_scale:int ->\n  rx_wnd:int ->\n  tx_wnd:int ->\n  rx_isn:Net.Tcp.Sequence.t -> tx_mss:int option -> Net.Tcp.Window.t", "params": [{"name": "rx_wnd_scale", "type": "int"}, {"name": "tx_wnd_scale", "type": "int"}, {"name": "rx_wnd", "type": "int"}, {"name": "tx_wnd", "type": "int"}, {"name": "rx_isn", "type": "Net.Tcp.Sequence.t"}, {"name": "tx_mss", "type": "int option"}]}}, {"value": {"name": "Net.Tcp.Window.valid", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13157"}, "info": "", "type": "Net.Tcp.Window.t -> Net.Tcp.Sequence.t -> bool", "params": [{"name": "", "type": "Net.Tcp.Window.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Window.rx_advance", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13194"}, "info": "", "type": "Net.Tcp.Window.t -> int -> unit", "params": [{"name": "", "type": "Net.Tcp.Window.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Net.Tcp.Window.rx_nxt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13228"}, "info": "", "type": "Net.Tcp.Window.t -> Net.Tcp.Sequence.t", "params": [{"name": "", "type": "Net.Tcp.Window.t"}]}}, {"value": {"name": "Net.Tcp.Window.tx_advance", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13258"}, "info": "", "type": "Net.Tcp.Window.t -> int -> unit", "params": [{"name": "", "type": "Net.Tcp.Window.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Net.Tcp.Window.tx_ack", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13292"}, "info": "", "type": "Net.Tcp.Window.t -> Net.Tcp.Sequence.t -> unit", "params": [{"name": "", "type": "Net.Tcp.Window.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Window.tx_nxt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13328"}, "info": "", "type": "Net.Tcp.Window.t -> Net.Tcp.Sequence.t", "params": [{"name": "", "type": "Net.Tcp.Window.t"}]}}, {"value": {"name": "Net.Tcp.Window.tx_una", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13357"}, "info": "", "type": "Net.Tcp.Window.t -> Net.Tcp.Sequence.t", "params": [{"name": "", "type": "Net.Tcp.Window.t"}]}}, {"value": {"name": "Net.Tcp.Window.tx_mss", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13386"}, "info": "", "type": "Net.Tcp.Window.t -> int", "params": [{"name": "", "type": "Net.Tcp.Window.t"}]}}, {"value": {"name": "Net.Tcp.Window.rx_wnd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13465"}, "info": "", "type": "Net.Tcp.Window.t -> int32", "params": [{"name": "", "type": "Net.Tcp.Window.t"}]}}, {"value": {"name": "Net.Tcp.Window.set_rx_wnd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13489"}, "info": "", "type": "Net.Tcp.Window.t -> int32 -> unit", "params": [{"name": "", "type": "Net.Tcp.Window.t"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Net.Tcp.Window.tx_wnd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13580"}, "info": "", "type": "Net.Tcp.Window.t -> int32", "params": [{"name": "", "type": "Net.Tcp.Window.t"}]}}, {"value": {"name": "Net.Tcp.Window.set_tx_wnd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13604"}, "info": "", "type": "Net.Tcp.Window.t -> int -> unit", "params": [{"name": "", "type": "Net.Tcp.Window.t"}, {"name": "", "type": "int"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.Options", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|13642"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Options.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|14501"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "MSS", "type": ["int"]}, {"name": "Window_size_shift", "type": ["int"]}, {"name": "SACK_ok", "type": []}, {"name": "SACK", "type": ["(int32 * int32) list"]}, {"name": "Timestamp", "type": ["int32", "int32"]}, {"name": "Unknown", "type": ["int", "string"]}]}}}, {"type": {"name": "Net.Tcp.Options.ts", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|14810"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Net.Tcp.Options.t list"}}, {"value": {"name": "Net.Tcp.Options.marshal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|14817"}, "info": "", "type": "Net.Tcp.Options.ts -> Bitstring.t", "params": [{"name": "", "type": "Net.Tcp.Options.ts"}]}}, {"value": {"name": "Net.Tcp.Options.of_packet", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|14848"}, "info": "", "type": "Bitstring.t -> Net.Tcp.Options.t list", "params": [{"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Tcp.Options.prettyprint", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|14886"}, "info": "", "type": "Net.Tcp.Options.t list -> string", "params": [{"name": "", "type": "Net.Tcp.Options.t list"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.User_buffer", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|14925"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Net.Tcp.User_buffer.Rx", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|15860"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.User_buffer.Rx.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|15888"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.User_buffer.Rx.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|15888"}, "info": "", "type": "max_size:int32 -> Net.Tcp.User_buffer.Rx.t", "params": [{"name": "max_size", "type": "int32"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Rx.add_r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|15923"}, "info": "", "type": "Net.Tcp.User_buffer.Rx.t -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Rx.t"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Rx.take_l", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|15968"}, "info": "", "type": "Net.Tcp.User_buffer.Rx.t -> Bitstring.t Lwt.t", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Rx.t"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Rx.cur_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16006"}, "info": "", "type": "Net.Tcp.User_buffer.Rx.t -> int32", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Rx.t"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Rx.max_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16034"}, "info": "", "type": "Net.Tcp.User_buffer.Rx.t -> int32", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Rx.t"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Rx.set_max_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16062"}, "info": "", "type": "Net.Tcp.User_buffer.Rx.t -> int32 -> unit", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Rx.t"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Rx.monitor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16102"}, "info": "", "type": "Net.Tcp.User_buffer.Rx.t -> int32 Lwt_mvar.t -> unit", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Rx.t"}, {"name": "", "type": "int32 Lwt_mvar.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.User_buffer.Tx", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16150"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.User_buffer.Tx.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16178"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.User_buffer.Tx.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16178"}, "info": "", "type": "wnd:Net.Tcp.Window.t -> Net.Tcp.User_buffer.Tx.t", "params": [{"name": "wnd", "type": "Net.Tcp.Window.t"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Tx.available", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16210"}, "info": "", "type": "Net.Tcp.User_buffer.Tx.t -> int32", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Tx.t"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Tx.wait_for", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16238"}, "info": "", "type": "Net.Tcp.User_buffer.Tx.t -> int32 -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Tx.t"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Net.Tcp.User_buffer.Tx.free", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16279"}, "info": "", "type": "Net.Tcp.User_buffer.Tx.t -> int -> unit", "params": [{"name": "", "type": "Net.Tcp.User_buffer.Tx.t"}, {"name": "", "type": "int"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.Ack", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|16314"}, "info": "", "type": "sig  end", "module_structure": [{"module_type": {"name": "Net.Tcp.Ack.M", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17154"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Ack.M.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17191"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Ack.M.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17191"}, "info": "", "type": "send_ack:Net.Tcp.Sequence.t Lwt_mvar.t ->\n  last:Net.Tcp.Sequence.t -> Net.Tcp.Ack.M.t", "params": [{"name": "send_ack", "type": "Net.Tcp.Sequence.t Lwt_mvar.t"}, {"name": "last", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Ack.M.receive", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17259"}, "info": "", "type": "Net.Tcp.Ack.M.t -> Net.Tcp.Sequence.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Ack.M.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Ack.M.transmit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17307"}, "info": "", "type": "Net.Tcp.Ack.M.t -> Net.Tcp.Sequence.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Ack.M.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}]}}, {"module": {"name": "Net.Tcp.Ack.Immediate", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17359"}, "info": "", "type": "M", "module_with": {"module_alias": {"name": "Net.Tcp.Ack.M", "module_type": {"name": "Net.Tcp.Ack.M", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17154"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Ack.M.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17191"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Ack.M.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17191"}, "info": "", "type": "send_ack:Net.Tcp.Sequence.t Lwt_mvar.t ->\n  last:Net.Tcp.Sequence.t -> Net.Tcp.Ack.M.t", "params": [{"name": "send_ack", "type": "Net.Tcp.Sequence.t Lwt_mvar.t"}, {"name": "last", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Ack.M.receive", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17259"}, "info": "", "type": "Net.Tcp.Ack.M.t -> Net.Tcp.Sequence.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Ack.M.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Ack.M.transmit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17307"}, "info": "", "type": "Net.Tcp.Ack.M.t -> Net.Tcp.Sequence.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Ack.M.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}]}}, "with": ""}, "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.Ack.Delayed", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17381"}, "info": "", "type": "M", "module_with": {"module_alias": {"name": "Net.Tcp.Ack.M", "module_type": {"name": "Net.Tcp.Ack.M", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17154"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Ack.M.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17191"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Ack.M.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17191"}, "info": "", "type": "send_ack:Net.Tcp.Sequence.t Lwt_mvar.t ->\n  last:Net.Tcp.Sequence.t -> Net.Tcp.Ack.M.t", "params": [{"name": "send_ack", "type": "Net.Tcp.Sequence.t Lwt_mvar.t"}, {"name": "last", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Ack.M.receive", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17259"}, "info": "", "type": "Net.Tcp.Ack.M.t -> Net.Tcp.Sequence.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Ack.M.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}, {"value": {"name": "Net.Tcp.Ack.M.transmit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17307"}, "info": "", "type": "Net.Tcp.Ack.M.t -> Net.Tcp.Sequence.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Ack.M.t"}, {"name": "", "type": "Net.Tcp.Sequence.t"}]}}]}}, "with": ""}, "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.Segment", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|17404"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Net.Tcp.Segment.Rx", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18252"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Segment.Rx.seg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18287"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Segment.Rx.make", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18287"}, "info": "", "type": "sequence:Net.Tcp.Sequence.t ->\n  fin:bool ->\n  syn:bool ->\n  ack:bool ->\n  ack_number:Net.Tcp.Sequence.t ->\n  window:int -> data:Bitstring.t -> Net.Tcp.Segment.Rx.seg", "params": [{"name": "sequence", "type": "Net.Tcp.Sequence.t"}, {"name": "fin", "type": "bool"}, {"name": "syn", "type": "bool"}, {"name": "ack", "type": "bool"}, {"name": "ack_number", "type": "Net.Tcp.Sequence.t"}, {"name": "window", "type": "int"}, {"name": "data", "type": "Bitstring.t"}]}}, {"type": {"name": "Net.Tcp.Segment.Rx.q", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18441"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Segment.Rx.q", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18441"}, "info": "", "type": "rx_data:Bitstring.t list option Lwt_mvar.t ->\n  wnd:Net.Tcp.Window.t ->\n  tx_ack:Net.Tcp.Sequence.t Lwt_mvar.t ->\n  tx_wnd_update:int Lwt_mvar.t -> Net.Tcp.Segment.Rx.q", "params": [{"name": "rx_data", "type": "Bitstring.t list option Lwt_mvar.t"}, {"name": "wnd", "type": "Net.Tcp.Window.t"}, {"name": "tx_ack", "type": "Net.Tcp.Sequence.t Lwt_mvar.t"}, {"name": "tx_wnd_update", "type": "int Lwt_mvar.t"}]}}, {"value": {"name": "Net.Tcp.Segment.Rx.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18600"}, "info": "", "type": "Net.Tcp.Segment.Rx.q -> string", "params": [{"name": "", "type": "Net.Tcp.Segment.Rx.q"}]}}, {"value": {"name": "Net.Tcp.Segment.Rx.is_empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18632"}, "info": "", "type": "Net.Tcp.Segment.Rx.q -> bool", "params": [{"name": "", "type": "Net.Tcp.Segment.Rx.q"}]}}, {"value": {"name": "Net.Tcp.Segment.Rx.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18661"}, "info": "", "type": "Net.Tcp.Segment.Rx.q -> Net.Tcp.Segment.Rx.seg -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Segment.Rx.q"}, {"name": "", "type": "Net.Tcp.Segment.Rx.seg"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.Segment.Tx", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18732"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Segment.Tx.flags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18768"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "No_flags", "type": []}, {"name": "Syn", "type": []}, {"name": "Fin", "type": []}, {"name": "Rst", "type": []}]}}}, {"type": {"name": "Net.Tcp.Segment.Tx.xmit", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18810"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "flags:Net.Tcp.Segment.Tx.flags ->\n  wnd:Net.Tcp.Window.t ->\n  options:Net.Tcp.Options.ts -> Bitstring.t -> Bitstring.t list Lwt.t"}}, {"type": {"name": "Net.Tcp.Segment.Tx.q", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18924"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Segment.Tx.q", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|18924"}, "info": "", "type": "xmit:Net.Tcp.Segment.Tx.xmit ->\n  wnd:Net.Tcp.Window.t ->\n  rx_ack:Net.Tcp.Sequence.t Lwt_mvar.t ->\n  tx_ack:Net.Tcp.Sequence.t Lwt_mvar.t -> Net.Tcp.Segment.Tx.q * unit Lwt.t", "params": [{"name": "xmit", "type": "Net.Tcp.Segment.Tx.xmit"}, {"name": "wnd", "type": "Net.Tcp.Window.t"}, {"name": "rx_ack", "type": "Net.Tcp.Sequence.t Lwt_mvar.t"}, {"name": "tx_ack", "type": "Net.Tcp.Sequence.t Lwt_mvar.t"}]}}, {"value": {"name": "Net.Tcp.Segment.Tx.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|19057"}, "info": "", "type": "?flags:Net.Tcp.Segment.Tx.flags ->\n  ?options:Net.Tcp.Options.ts ->\n  Net.Tcp.Segment.Tx.q -> Bitstring.t -> unit Lwt.t", "params": [{"name": "flags", "type": "Net.Tcp.Segment.Tx.flags option"}, {"name": "options", "type": "Net.Tcp.Options.ts option"}, {"name": "", "type": "Net.Tcp.Segment.Tx.q"}, {"name": "", "type": "Bitstring.t"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Tcp.Pcb", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|19154"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Tcp.Pcb.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20016"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Tcp.Pcb.pcb", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20026"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Tcp.Pcb.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20026"}, "info": "", "type": "Net.Tcp.Pcb.t ->\n  src:Net.Nettypes.ipv4_addr ->\n  dst:Net.Nettypes.ipv4_addr -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Pcb.t"}, {"name": "src", "type": "Net.Nettypes.ipv4_addr"}, {"name": "dst", "type": "Net.Nettypes.ipv4_addr"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Tcp.Pcb.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20102"}, "info": "", "type": "Net.Tcp.Pcb.t ->\n  int ->\n  (Net.Nettypes.ipv4_addr * int -> Net.Tcp.Pcb.pcb -> unit Lwt.t) -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Pcb.t"}, {"name": "", "type": "int"}, {"name": "", "type": "Net.Nettypes.ipv4_addr * int -> Net.Tcp.Pcb.pcb -> unit Lwt.t"}]}}, {"value": {"name": "Net.Tcp.Pcb.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20181"}, "info": "", "type": "Net.Ipv4.t -> Net.Tcp.Pcb.t * unit Lwt.t", "params": [{"name": "", "type": "Net.Ipv4.t"}]}}, {"value": {"name": "Net.Tcp.Pcb.close", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20219"}, "info": "", "type": "Net.Tcp.Pcb.pcb -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Pcb.pcb"}]}}, {"value": {"name": "Net.Tcp.Pcb.read", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20283"}, "info": "", "type": "Net.Tcp.Pcb.pcb -> Bitstring.t option Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Pcb.pcb"}]}}, {"value": {"name": "Net.Tcp.Pcb.write_available", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20414"}, "info": "", "type": "Net.Tcp.Pcb.pcb -> int", "params": [{"name": "", "type": "Net.Tcp.Pcb.pcb"}]}}, {"value": {"name": "Net.Tcp.Pcb.write_wait_for", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20446"}, "info": "", "type": "Net.Tcp.Pcb.pcb -> int -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Pcb.pcb"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Net.Tcp.Pcb.write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20491"}, "info": "", "type": "Net.Tcp.Pcb.pcb -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Tcp.Pcb.pcb"}, {"name": "", "type": "Bitstring.t"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Dhcp", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20543"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Net.Dhcp.Option", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|20591"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Dhcp.Option.msg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|21461"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Broadcast\n  | `Client_id\n  | `DNS_server\n  | `Domain_name\n  | `Domain_search\n  | `End\n  | `Host_name\n  | `Interface_mtu\n  | `Lease_time\n  | `Max_size\n  | `Message\n  | `Message_type\n  | `Name_server\n  | `Netbios_name_server\n  | `Pad\n  | `Parameter_request\n  | `Requested_ip\n  | `Router\n  | `Server_identifier\n  | `Subnet_mask\n  | `Time_offset\n  | `Time_server\n  | `Unknown of char ]"}}, {"type": {"name": "Net.Dhcp.Option.op", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|21904"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Ack\n  | `Decline\n  | `Discover\n  | `Inform\n  | `Nak\n  | `Offer\n  | `Release\n  | `Request\n  | `Unknown of char ]"}}, {"type": {"name": "Net.Dhcp.Option.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|22048"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Broadcast of Net.Nettypes.ipv4_addr\n  | `Client_id of string\n  | `DNS_server of Net.Nettypes.ipv4_addr list\n  | `Domain_name of string\n  | `Domain_search of string\n  | `End\n  | `Host_name of string\n  | `Interface_mtu of int\n  | `Lease_time of int32\n  | `Max_size of int\n  | `Message of string\n  | `Message_type of Net.Dhcp.Option.op\n  | `Name_server of Net.Nettypes.ipv4_addr list\n  | `Netbios_name_server of Net.Nettypes.ipv4_addr list\n  | `Pad\n  | `Parameter_request of Net.Dhcp.Option.msg list\n  | `Requested_ip of Net.Nettypes.ipv4_addr\n  | `Router of Net.Nettypes.ipv4_addr list\n  | `Server_identifier of Net.Nettypes.ipv4_addr\n  | `Subnet_mask of Net.Nettypes.ipv4_addr\n  | `Time_offset of string\n  | `Time_server of Net.Nettypes.ipv4_addr list\n  | `Unknown of char * string ]"}}, {"value": {"name": "Net.Dhcp.Option.msg_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|22810"}, "info": "", "type": "Net.Dhcp.Option.msg -> string", "params": [{"name": "", "type": "Net.Dhcp.Option.msg"}]}}, {"value": {"name": "Net.Dhcp.Option.op_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|22844"}, "info": "", "type": "Net.Dhcp.Option.op -> string", "params": [{"name": "", "type": "Net.Dhcp.Option.op"}]}}, {"value": {"name": "Net.Dhcp.Option.t_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|22876"}, "info": "", "type": "Net.Dhcp.Option.t -> string", "params": [{"name": "", "type": "Net.Dhcp.Option.t"}]}}, {"value": {"name": "Net.Dhcp.Option.ipv4_addr_to_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|22906"}, "info": "", "type": "Net.Nettypes.ipv4_addr -> string", "params": [{"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Dhcp.Option.ipv4_addr_of_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|22960"}, "info": "", "type": "string -> Net.Nettypes.ipv4_addr", "params": [{"name": "", "type": "string"}]}}, {"module": {"name": "Net.Dhcp.Option.Marshal", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23014"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "Net.Dhcp.Option.Marshal.t_to_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23041"}, "info": "", "type": "Net.Dhcp.Option.msg -> int", "params": [{"name": "", "type": "Net.Dhcp.Option.msg"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.to_byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23072"}, "info": "", "type": "Net.Dhcp.Option.msg -> string", "params": [{"name": "", "type": "Net.Dhcp.Option.msg"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.uint32_to_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23104"}, "info": "", "type": "int32 -> string", "params": [{"name": "", "type": "int32"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.uint16_to_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23146"}, "info": "", "type": "int -> string", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23186"}, "info": "", "type": "int -> string", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.ip_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23215"}, "info": "", "type": "Net.Dhcp.Option.msg -> Net.Nettypes.ipv4_addr list -> string list", "params": [{"name": "", "type": "Net.Dhcp.Option.msg"}, {"name": "", "type": "Net.Nettypes.ipv4_addr list"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.ip_one", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23279"}, "info": "", "type": "Net.Dhcp.Option.msg -> Net.Nettypes.ipv4_addr -> string list", "params": [{"name": "", "type": "Net.Dhcp.Option.msg"}, {"name": "", "type": "Net.Nettypes.ipv4_addr"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.str", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23337"}, "info": "", "type": "Net.Dhcp.Option.msg -> string -> string list", "params": [{"name": "", "type": "Net.Dhcp.Option.msg"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.uint32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23380"}, "info": "", "type": "Net.Dhcp.Option.msg -> int32 -> string list", "params": [{"name": "", "type": "Net.Dhcp.Option.msg"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.uint16", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23425"}, "info": "", "type": "Net.Dhcp.Option.msg -> int -> string list", "params": [{"name": "", "type": "Net.Dhcp.Option.msg"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.to_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23468"}, "info": "", "type": "Net.Dhcp.Option.t -> string", "params": [{"name": "", "type": "Net.Dhcp.Option.t"}]}}, {"value": {"name": "Net.Dhcp.Option.Marshal.options", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23499"}, "info": "", "type": "Net.Dhcp.Option.op -> Net.Dhcp.Option.t list -> string", "params": [{"name": "", "type": "Net.Dhcp.Option.op"}, {"name": "", "type": "Net.Dhcp.Option.t list"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Dhcp.Option.Unmarshal", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23542"}, "info": "", "type": "sig  end", "module_structure": [{"exception": {"name": "Net.Dhcp.Option.Unmarshal.Error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23571"}, "info": "", "exception_args": ["string"]}}, {"value": {"name": "Net.Dhcp.Option.Unmarshal.msg_of_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23601"}, "info": "", "type": "char -> Net.Dhcp.Option.msg", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Net.Dhcp.Option.Unmarshal.of_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23635"}, "info": "", "type": "string -> Net.Dhcp.Option.t list", "params": [{"name": "", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Dhcp.Option.Packet", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23673"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Dhcp.Option.Packet.p", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23708"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "op", "mutable": false, "type": "Net.Dhcp.Option.op"}, {"name": "opts", "mutable": false, "type": "Net.Dhcp.Option.t list"}]}}}, {"value": {"name": "Net.Dhcp.Option.Packet.of_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23740"}, "info": "", "type": "string -> Net.Dhcp.Option.Packet.p", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Net.Dhcp.Option.Packet.to_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23771"}, "info": "", "type": "Net.Dhcp.Option.Packet.p -> string", "params": [{"name": "", "type": "Net.Dhcp.Option.Packet.p"}]}}, {"value": {"name": "Net.Dhcp.Option.Packet.prettyprint", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23802"}, "info": "", "type": "Net.Dhcp.Option.Packet.p -> string", "params": [{"name": "", "type": "Net.Dhcp.Option.Packet.p"}]}}, {"value": {"name": "Net.Dhcp.Option.Packet.find", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23836"}, "info": "", "type": "Net.Dhcp.Option.Packet.p -> (Net.Dhcp.Option.t -> 'a option) -> 'a option", "params": [{"name": "", "type": "Net.Dhcp.Option.Packet.p"}, {"name": "", "type": "Net.Dhcp.Option.t -> 'a option"}]}}, {"value": {"name": "Net.Dhcp.Option.Packet.findl", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23886"}, "info": "", "type": "Net.Dhcp.Option.Packet.p -> (Net.Dhcp.Option.t -> 'a list option) -> 'a list", "params": [{"name": "", "type": "Net.Dhcp.Option.Packet.p"}, {"name": "", "type": "Net.Dhcp.Option.t -> 'a list option"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Dhcp.Client", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|23946"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Dhcp.Client.offer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|24814"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "ip_addr", "mutable": false, "type": "Net.Nettypes.ipv4_addr"}, {"name": "netmask", "mutable": false, "type": "Net.Nettypes.ipv4_addr option"}, {"name": "gateways", "mutable": false, "type": "Net.Nettypes.ipv4_addr list"}, {"name": "dns", "mutable": false, "type": "Net.Nettypes.ipv4_addr list"}, {"name": "lease", "mutable": false, "type": "int32"}, {"name": "xid", "mutable": false, "type": "int32"}]}}}, {"type": {"name": "Net.Dhcp.Client.state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|25010"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Disabled", "type": []}, {"name": "Request_sent", "type": ["int32"]}, {"name": "Offer_accepted", "type": ["Net.Dhcp.Client.offer"]}, {"name": "Lease_held", "type": ["Net.Dhcp.Client.offer"]}, {"name": "Shutting_down", "type": []}]}}}, {"type": {"name": "Net.Dhcp.Client.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|25124"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Dhcp.Client.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|25124"}, "info": "", "type": "Net.Dhcp.Client.t ->\n  src:'a -> dst:'b -> source_port:'c -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Dhcp.Client.t"}, {"name": "src", "type": "'a"}, {"name": "dst", "type": "'a"}, {"name": "source_port", "type": "'a"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Dhcp.Client.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|25205"}, "info": "", "type": "Net.Ipv4.t -> Net.Udp.t -> (Net.Dhcp.Client.t * unit Lwt.t) Lwt.t", "params": [{"name": "", "type": "Net.Ipv4.t"}, {"name": "", "type": "Net.Udp.t"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Config", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|25268"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Configuration modes for interfaces. \n   Defaults to DHCP, and individual ids can be assigned static IPs"}, {"value": {"name": "Net.Config.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|26222"}, "info": "", "type": "OS.Netif.id ->\n  [ `DHCP\n  | `IPv4 of\n      Net.Nettypes.ipv4_addr * Net.Nettypes.ipv4_addr *\n      Net.Nettypes.ipv4_addr list ]", "params": [{"name": "", "type": "OS.Netif.id"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Manager", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|26335"}, "info": "", "type": "sig  end", "module_structure": [{"exception": {"name": "Net.Manager.Error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27402"}, "info": "", "exception_args": ["string"]}}, {"type": {"name": "Net.Manager.config", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27443"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `DHCP\n  | `IPv4 of\n      Net.Nettypes.ipv4_addr * Net.Nettypes.ipv4_addr *\n      Net.Nettypes.ipv4_addr list ]"}}, {"type": {"name": "Net.Manager.id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27514"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "OS.Netif.id"}}, {"type": {"name": "Net.Manager.interface", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27541"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Manager.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27549"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Manager.plug", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27549"}, "info": "", "type": "Net.Manager.t -> Net.Manager.id -> OS.Netif.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "Net.Manager.id"}, {"name": "", "type": "OS.Netif.t"}]}}, {"value": {"name": "Net.Manager.unplug", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27595"}, "info": "", "type": "Net.Manager.t -> Net.Manager.id -> unit", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "Net.Manager.id"}]}}, {"value": {"name": "Net.Manager.configure", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27624"}, "info": "", "type": "Net.Manager.interface -> Net.Manager.config -> unit Lwt.t", "params": [{"name": "", "type": "Net.Manager.interface"}, {"name": "", "type": "Net.Manager.config"}]}}, {"value": {"name": "Net.Manager.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27675"}, "info": "", "type": "(Net.Manager.t -> Net.Manager.interface -> Net.Manager.id -> unit Lwt.t) ->\n  unit Lwt.t", "params": [{"name": "", "type": "Net.Manager.t -> Net.Manager.interface -> Net.Manager.id -> unit Lwt.t"}]}}, {"value": {"name": "Net.Manager.tcpv4_of_addr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27740"}, "info": "", "type": "Net.Manager.t -> Net.Nettypes.ipv4_addr option -> Net.Tcp.Pcb.t list", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr option"}]}}, {"value": {"name": "Net.Manager.udpv4_of_addr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27800"}, "info": "", "type": "Net.Manager.t -> Net.Nettypes.ipv4_addr option -> Net.Udp.t list", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr option"}]}}, {"value": {"name": "Net.Manager.ipv4_of_interface", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27856"}, "info": "", "type": "Net.Manager.interface -> Net.Ipv4.t", "params": [{"name": "", "type": "Net.Manager.interface"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Flow", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|27904"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Flow.ipv4_src", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|28773"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Net.Nettypes.ipv4_addr option * int"}}, {"type": {"name": "Net.Flow.ipv4_dst", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|28812"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Net.Nettypes.ipv4_addr * int"}}, {"module": {"name": "Net.Flow.TCPv4", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|28829"}, "info": "", "type": "sig  end", "module_with": {"module_alias": {"name": "FLOW"}, "with": " with\n      type mgr = Manager.t\n  and type src = ipv4_src\n  and type dst = ipv4_dst"}, "dependencies": {"uses": []}}}, {"module": {"name": "Net.Flow.Shmem", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|28934"}, "info": "", "type": "sig  end", "module_with": {"module_alias": {"name": "FLOW"}, "with": " with\n      type mgr = Manager.t\n  and type src = peer_uid\n  and type dst = peer_uid"}, "dependencies": {"uses": []}}}, {"type": {"name": "Net.Flow.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|29046"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Flow.read", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|29046"}, "info": "", "type": "Net.Flow.t -> Bitstring.t option Lwt.t", "params": [{"name": "", "type": "Net.Flow.t"}]}}, {"value": {"name": "Net.Flow.write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|29086"}, "info": "", "type": "Net.Flow.t -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Flow.t"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Flow.writev", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|29128"}, "info": "", "type": "Net.Flow.t -> Bitstring.t list -> Bitstring.t Lwt.t", "params": [{"name": "", "type": "Net.Flow.t"}, {"name": "", "type": "Bitstring.t list"}]}}, {"value": {"name": "Net.Flow.close", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|29183"}, "info": "", "type": "Net.Flow.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Flow.t"}]}}, {"value": {"name": "Net.Flow.connect", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|29211"}, "info": "", "type": "Net.Manager.t ->\n  [> `Shmem of\n       Net.Nettypes.peer_uid option * Net.Nettypes.peer_uid *\n       (Net.Flow.t -> 'a Lwt.t)\n   | `TCPv4 of\n       Net.Flow.ipv4_src option * Net.Flow.ipv4_dst * (Net.Flow.t -> 'a Lwt.t) ] ->\n  'a Lwt.t", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "[> `Shmem of\n       Net.Nettypes.peer_uid option * Net.Nettypes.peer_uid *\n       (Net.Flow.t -> 'a Lwt.t)\n   | `TCPv4 of\n       Net.Flow.ipv4_src option * Net.Flow.ipv4_dst * (Net.Flow.t -> 'a Lwt.t) ]"}]}}, {"value": {"name": "Net.Flow.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|29380"}, "info": "", "type": "Net.Manager.t ->\n  [> `Shmem of\n       Net.Nettypes.peer_uid *\n       (Net.Nettypes.peer_uid -> Net.Flow.t -> unit Lwt.t)\n   | `TCPv4 of\n       Net.Flow.ipv4_src * (Net.Flow.ipv4_dst -> Net.Flow.t -> unit Lwt.t) ] ->\n  unit Lwt.t", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "[> `Shmem of\n       Net.Nettypes.peer_uid *\n       (Net.Nettypes.peer_uid -> Net.Flow.t -> unit Lwt.t)\n   | `TCPv4 of\n       Net.Flow.ipv4_src * (Net.Flow.ipv4_dst -> Net.Flow.t -> unit Lwt.t) ]"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Datagram", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|29546"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Net.Datagram.UDPv4", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|30392"}, "info": "", "type": "sig  end", "module_with": {"module_alias": {"name": "Net.Nettypes.DATAGRAM", "module_type": {"name": "Net.Nettypes.DATAGRAM", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2145"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Net.Nettypes.DATAGRAM.mgr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2186"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.DATAGRAM.src", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2197"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.DATAGRAM.dst", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2209"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Net.Nettypes.DATAGRAM.msg", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2221"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Nettypes.DATAGRAM.recv", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2221"}, "info": "", "type": "Net.Nettypes.DATAGRAM.mgr ->\n  Net.Nettypes.DATAGRAM.src ->\n  (Net.Nettypes.DATAGRAM.dst -> Net.Nettypes.DATAGRAM.msg -> unit Lwt.t) ->\n  unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.DATAGRAM.mgr"}, {"name": "", "type": "Net.Nettypes.DATAGRAM.src"}, {"name": "", "type": "Net.Nettypes.DATAGRAM.dst -> Net.Nettypes.DATAGRAM.msg -> unit Lwt.t"}]}}, {"value": {"name": "Net.Nettypes.DATAGRAM.send", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|2289"}, "info": "", "type": "Net.Nettypes.DATAGRAM.mgr ->\n  ?src:Net.Nettypes.DATAGRAM.src ->\n  Net.Nettypes.DATAGRAM.dst -> Net.Nettypes.DATAGRAM.msg -> unit Lwt.t", "params": [{"name": "", "type": "Net.Nettypes.DATAGRAM.mgr"}, {"name": "src", "type": "Net.Nettypes.DATAGRAM.src option"}, {"name": "", "type": "Net.Nettypes.DATAGRAM.dst"}, {"name": "", "type": "Net.Nettypes.DATAGRAM.msg"}]}}]}}, "with": " with\n      type mgr = Manager.t\n  and type src = Nettypes.ipv4_src\n  and type dst = Nettypes.ipv4_dst\n  and type msg = Bitstring.t"}, "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Net.Channel", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|30561"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Net.Channel.TCPv4", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31420"}, "info": "", "type": "sig  end", "module_with": {"module_alias": {"name": "CHANNEL"}, "with": " with\n      type src = ipv4_src\n  and type dst = ipv4_dst\n  and type mgr = Manager.t"}, "dependencies": {"uses": []}}}, {"module": {"name": "Net.Channel.Shmem", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31528"}, "info": "", "type": "sig  end", "module_with": {"module_alias": {"name": "CHANNEL"}, "with": " with\n      type src = peer_uid\n  and type dst = peer_uid\n  and type mgr = Manager.t"}, "dependencies": {"uses": []}}}, {"type": {"name": "Net.Channel.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31644"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Net.Channel.read_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31644"}, "info": "", "type": "Net.Channel.t -> char Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}]}}, {"value": {"name": "Net.Channel.read_some", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31675"}, "info": "", "type": "?len:int -> Net.Channel.t -> Bitstring.t Lwt.t", "params": [{"name": "len", "type": "int option"}, {"name": "", "type": "Net.Channel.t"}]}}, {"value": {"name": "Net.Channel.read_until", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31725"}, "info": "", "type": "Net.Channel.t -> char -> (bool * Bitstring.t) Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Net.Channel.read_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31781"}, "info": "", "type": "?len:int -> Net.Channel.t -> Bitstring.t Lwt_stream.t", "params": [{"name": "len", "type": "int option"}, {"name": "", "type": "Net.Channel.t"}]}}, {"value": {"name": "Net.Channel.read_crlf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31840"}, "info": "", "type": "Net.Channel.t -> Bitstring.t Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}]}}, {"value": {"name": "Net.Channel.write_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31879"}, "info": "", "type": "Net.Channel.t -> char -> unit Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Net.Channel.write_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31920"}, "info": "", "type": "Net.Channel.t -> string -> unit Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Net.Channel.write_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|31965"}, "info": "", "type": "Net.Channel.t -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Net.Channel.write_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|32018"}, "info": "", "type": "Net.Channel.t -> string -> unit Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Net.Channel.flush", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|32062"}, "info": "", "type": "Net.Channel.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}]}}, {"value": {"name": "Net.Channel.close", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|32090"}, "info": "", "type": "Net.Channel.t -> unit Lwt.t", "params": [{"name": "", "type": "Net.Channel.t"}]}}, {"value": {"name": "Net.Channel.connect", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|32119"}, "info": "", "type": "Net.Manager.t ->\n  [> `Shmem of\n       Net.Nettypes.peer_uid option * Net.Nettypes.peer_uid *\n       (Net.Channel.t -> 'a Lwt.t)\n   | `TCPv4 of\n       Net.Nettypes.ipv4_src option * Net.Nettypes.ipv4_dst *\n       (Net.Channel.t -> 'a Lwt.t) ] ->\n  'a Lwt.t", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "[> `Shmem of\n       Net.Nettypes.peer_uid option * Net.Nettypes.peer_uid *\n       (Net.Channel.t -> 'a Lwt.t)\n   | `TCPv4 of\n       Net.Nettypes.ipv4_src option * Net.Nettypes.ipv4_dst *\n       (Net.Channel.t -> 'a Lwt.t) ]"}]}}, {"value": {"name": "Net.Channel.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/net.mli|32289"}, "info": "", "type": "Net.Manager.t ->\n  [> `Shmem of\n       Net.Nettypes.peer_uid *\n       (Net.Nettypes.peer_uid -> Net.Channel.t -> unit Lwt.t)\n   | `TCPv4 of\n       Net.Nettypes.ipv4_src *\n       (Net.Nettypes.ipv4_dst -> Net.Channel.t -> unit Lwt.t) ] ->\n  unit Lwt.t", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "[> `Shmem of\n       Net.Nettypes.peer_uid *\n       (Net.Nettypes.peer_uid -> Net.Channel.t -> unit Lwt.t)\n   | `TCPv4 of\n       Net.Nettypes.ipv4_src *\n       (Net.Nettypes.ipv4_dst -> Net.Channel.t -> unit Lwt.t) ]"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Printf", "OS", "Lwt_stream", "Lwt_mvar", "Lwt", "Bitstring"], "used_by": ["Dns", "Http", "Openflow"]}}}, "Block": {"module": {"name": "Block", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/block.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/block.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Block.SimpleKV", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/block.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/block.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "Block.SimpleKV.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/block.mli|848"}, "info": "", "type": "id:string -> vbd:OS.Devices.blkif -> OS.Devices.kv_ro Lwt.t", "params": [{"name": "id", "type": "string"}, {"name": "vbd", "type": "OS.Devices.blkif"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["OS", "Lwt"], "used_by": []}}}, "Dns": {"module": {"name": "Dns", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|0"}, "info": {"description": "<span class=\"code\" >create n<\/span> creates an empty table of initial size <span class=\"code\" >n<\/span>. The table\n      will grow as needed."}, "type": "sig  end", "module_structure": [{"module": {"name": "Dns.Hashcons", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Hashcons.hash_consed", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|1230"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'a"}], "kind": {"type": "record", "private": "true", "fields": [{"name": "hkey", "mutable": false, "type": "int"}, {"name": "tag", "mutable": false, "type": "int"}, {"name": "node", "mutable": false, "type": "'a"}]}}}, {"type": {"name": "Dns.Hashcons.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|1364"}, "info": "", "params": [{"covariant": true, "contravariant": true, "type": "'b"}], "kind": {"type": "abstract"}}}, {"value": {"name": "Dns.Hashcons.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|1364"}, "info": {"description": "<span class=\"code\" >create n<\/span> creates an empty table of initial size <span class=\"code\" >n<\/span>. The table\n      will grow as needed."}, "type": "int -> 'a Dns.Hashcons.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Hashcons.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|1492"}, "info": {"description": "Removes all elements from the table."}, "type": "'a Dns.Hashcons.t -> unit", "params": [{"name": "", "type": "'a Dns.Hashcons.t"}]}}, {"value": {"name": "Dns.Hashcons.hashcons", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|1563"}, "info": {"description": "<span class=\"code\" >hashcons t n<\/span> hash-cons the value <span class=\"code\" >n<\/span> using table <span class=\"code\" >t<\/span> i.e. returns\n      any existing value in <span class=\"code\" >t<\/span> equal to <span class=\"code\" >n<\/span>, if any; otherwise, allocates\n      a new one hash-consed value of node <span class=\"code\" >n<\/span> and returns it. \n      As a consequence the returned value is physically equal to\n      any equal value already hash-consed using table <span class=\"code\" >t<\/span>."}, "type": "'a Dns.Hashcons.t -> 'a -> 'a Dns.Hashcons.hash_consed", "params": [{"name": "", "type": "'a Dns.Hashcons.t"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Dns.Hashcons.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|1946"}, "info": {"description": "<span class=\"code\" >iter f t<\/span> iterates <span class=\"code\" >f<\/span> over all elements of <span class=\"code\" >t<\/span>."}, "type": "('a Dns.Hashcons.hash_consed -> unit) -> 'a Dns.Hashcons.t -> unit", "params": [{"name": "", "type": "'a Dns.Hashcons.hash_consed -> unit"}, {"name": "", "type": "'a Dns.Hashcons.t"}]}}, {"value": {"name": "Dns.Hashcons.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2057"}, "info": {"description": "Return statistics on the table.  The numbers are, in order:\n      table length, number of entries, sum of bucket lengths,\n      smallest bucket length, median bucket length, biggest bucket length."}, "type": "'a Dns.Hashcons.t -> int * int * int * int * int * int", "params": [{"name": "", "type": "'a Dns.Hashcons.t"}]}}, {"module_type": {"name": "Dns.Hashcons.HashedType", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2349"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Hashcons.HashedType.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2395"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Dns.Hashcons.HashedType.equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2395"}, "info": "", "type": "Dns.Hashcons.HashedType.t -> Dns.Hashcons.HashedType.t -> bool", "params": [{"name": "", "type": "Dns.Hashcons.HashedType.t"}, {"name": "", "type": "Dns.Hashcons.HashedType.t"}]}}, {"value": {"name": "Dns.Hashcons.HashedType.hash", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2426"}, "info": "", "type": "Dns.Hashcons.HashedType.t -> int", "params": [{"name": "", "type": "Dns.Hashcons.HashedType.t"}]}}]}}, {"module_type": {"name": "Dns.Hashcons.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2453"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Hashcons.S.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2492"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Dns.Hashcons.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2503"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Dns.Hashcons.S.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2503"}, "info": "", "type": "int -> Dns.Hashcons.S.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Hashcons.S.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2529"}, "info": "", "type": "Dns.Hashcons.S.t -> unit", "params": [{"name": "", "type": "Dns.Hashcons.S.t"}]}}, {"value": {"name": "Dns.Hashcons.S.hashcons", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2555"}, "info": "", "type": "Dns.Hashcons.S.t ->\n  Dns.Hashcons.S.key -> Dns.Hashcons.S.key Dns.Hashcons.hash_consed", "params": [{"name": "", "type": "Dns.Hashcons.S.t"}, {"name": "", "type": "Dns.Hashcons.S.key"}]}}, {"value": {"name": "Dns.Hashcons.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2602"}, "info": "", "type": "(Dns.Hashcons.S.key Dns.Hashcons.hash_consed -> unit) ->\n  Dns.Hashcons.S.t -> unit", "params": [{"name": "", "type": "Dns.Hashcons.S.key Dns.Hashcons.hash_consed -> unit"}, {"name": "", "type": "Dns.Hashcons.S.t"}]}}, {"value": {"name": "Dns.Hashcons.S.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2656"}, "info": "", "type": "Dns.Hashcons.S.t -> int * int * int * int * int * int", "params": [{"name": "", "type": "Dns.Hashcons.S.t"}]}}]}}, {"module": {"name": "Dns.Hashcons.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2714"}, "info": "", "type": "functor (H : HashedType) -> sig  end", "module_functor": {"parameter": {"name": "H", "module_alias": {"name": "Dns.Hashcons.HashedType"}}, "module_with": {"module_alias": {"name": "Dns.Hashcons.S", "module_type": {"name": "Dns.Hashcons.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2453"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Hashcons.S.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2492"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Dns.Hashcons.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2503"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Dns.Hashcons.S.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2503"}, "info": "", "type": "int -> Dns.Hashcons.S.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Hashcons.S.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2529"}, "info": "", "type": "Dns.Hashcons.S.t -> unit", "params": [{"name": "", "type": "Dns.Hashcons.S.t"}]}}, {"value": {"name": "Dns.Hashcons.S.hashcons", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2555"}, "info": "", "type": "Dns.Hashcons.S.t ->\n  Dns.Hashcons.S.key -> Dns.Hashcons.S.key Dns.Hashcons.hash_consed", "params": [{"name": "", "type": "Dns.Hashcons.S.t"}, {"name": "", "type": "Dns.Hashcons.S.key"}]}}, {"value": {"name": "Dns.Hashcons.S.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2602"}, "info": "", "type": "(Dns.Hashcons.S.key Dns.Hashcons.hash_consed -> unit) ->\n  Dns.Hashcons.S.t -> unit", "params": [{"name": "", "type": "Dns.Hashcons.S.key Dns.Hashcons.hash_consed -> unit"}, {"name": "", "type": "Dns.Hashcons.S.t"}]}}, {"value": {"name": "Dns.Hashcons.S.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2656"}, "info": "", "type": "Dns.Hashcons.S.t -> int * int * int * int * int * int", "params": [{"name": "", "type": "Dns.Hashcons.S.t"}]}}]}}, "with": " with type key = H.t"}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Dns.Dnsrr", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|2772"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Dnsrr.serial", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|3689"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int32"}}, {"type": {"name": "Dns.Dnsrr.ipv4", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|3707"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int32"}}, {"type": {"name": "Dns.Dnsrr.cstr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|3724"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string Dns.Hashcons.hash_consed"}}, {"type": {"name": "Dns.Dnsrr.dnsnode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|3766"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "owner", "mutable": false, "type": "string list Dns.Hashcons.hash_consed"}, {"name": "rrsets", "mutable": true, "type": "Dns.Dnsrr.rrset list"}]}}}, {"type": {"name": "Dns.Dnsrr.rrset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|3856"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "ttl", "mutable": false, "type": "int32"}, {"name": "rdata", "mutable": false, "type": "Dns.Dnsrr.rdata"}]}}}, {"type": {"name": "Dns.Dnsrr.rdata", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|3904"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "A", "type": ["Dns.Dnsrr.ipv4 list"]}, {"name": "NS", "type": ["Dns.Dnsrr.dnsnode list"]}, {"name": "CNAME", "type": ["Dns.Dnsrr.dnsnode list"]}, {"name": "SOA", "type": ["(Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode * Dns.Dnsrr.serial * int32 * int32 *\n   int32 * int32)\n  list"]}, {"name": "MB", "type": ["Dns.Dnsrr.dnsnode list"]}, {"name": "MG", "type": ["Dns.Dnsrr.dnsnode list"]}, {"name": "MR", "type": ["Dns.Dnsrr.dnsnode list"]}, {"name": "WKS", "type": ["(int32 * int * Dns.Dnsrr.cstr) list"]}, {"name": "PTR", "type": ["Dns.Dnsrr.dnsnode list"]}, {"name": "HINFO", "type": ["(Dns.Dnsrr.cstr * Dns.Dnsrr.cstr) list"]}, {"name": "MINFO", "type": ["(Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode) list"]}, {"name": "MX", "type": ["(int * Dns.Dnsrr.dnsnode) list"]}, {"name": "TXT", "type": ["Dns.Dnsrr.cstr list list"]}, {"name": "RP", "type": ["(Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode) list"]}, {"name": "AFSDB", "type": ["(int * Dns.Dnsrr.dnsnode) list"]}, {"name": "X25", "type": ["Dns.Dnsrr.cstr list"]}, {"name": "ISDN", "type": ["(Dns.Dnsrr.cstr * Dns.Dnsrr.cstr option) list"]}, {"name": "RT", "type": ["(int * Dns.Dnsrr.dnsnode) list"]}, {"name": "AAAA", "type": ["Dns.Dnsrr.cstr list"]}, {"name": "SRV", "type": ["(int * int * int * Dns.Dnsrr.dnsnode) list"]}, {"name": "UNSPEC", "type": ["Dns.Dnsrr.cstr list"]}, {"name": "Unknown", "type": ["int", "Dns.Dnsrr.cstr list"]}]}}}, {"value": {"name": "Dns.Dnsrr.hashcons_charstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|4605"}, "info": "", "type": "string -> Dns.Dnsrr.cstr", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Dns.Dnsrr.hashcons_domainname", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|4646"}, "info": "", "type": "string list -> string list Dns.Hashcons.hash_consed", "params": [{"name": "", "type": "string list"}]}}, {"value": {"name": "Dns.Dnsrr.clear_cons_tables", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|4720"}, "info": "", "type": "unit -> unit", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Dns.Dnsrr.get_rrsets", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|4875"}, "info": "", "type": "[> `A\n   | `AAAA\n   | `AFSDB\n   | `ANY\n   | `CNAME\n   | `HINFO\n   | `ISDN\n   | `MAILB\n   | `MB\n   | `MG\n   | `MINFO\n   | `MR\n   | `MX\n   | `NS\n   | `PTR\n   | `RP\n   | `RT\n   | `SOA\n   | `SRV\n   | `TXT\n   | `UNSPEC\n   | `Unknown of int * string\n   | `WKS\n   | `X25 ] ->\n  Dns.Dnsrr.rrset list -> bool -> Dns.Dnsrr.rrset list", "params": [{"name": "", "type": "[> `A\n   | `AAAA\n   | `AFSDB\n   | `ANY\n   | `CNAME\n   | `HINFO\n   | `ISDN\n   | `MAILB\n   | `MB\n   | `MG\n   | `MINFO\n   | `MR\n   | `MX\n   | `NS\n   | `PTR\n   | `RP\n   | `RT\n   | `SOA\n   | `SRV\n   | `TXT\n   | `UNSPEC\n   | `Unknown of int * string\n   | `WKS\n   | `X25 ]"}, {"name": "", "type": "Dns.Dnsrr.rrset list"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Dns.Dnsrr.merge_rrset", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|5301"}, "info": "", "type": "Dns.Dnsrr.rrset -> Dns.Dnsrr.rrset list -> int32 * Dns.Dnsrr.rrset list", "params": [{"name": "", "type": "Dns.Dnsrr.rrset"}, {"name": "", "type": "Dns.Dnsrr.rrset list"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Dns.Dnstrie", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|5365"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Dnstrie.dnstrie", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|6316"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Dns.Dnstrie.key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|6360"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"exception": {"name": "Dns.Dnstrie.BadDomainName", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|6360"}, "info": "", "exception_args": ["string"]}}, {"exception": {"name": "Dns.Dnstrie.TrieCorrupt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|6429"}, "info": ""}}, {"value": {"name": "Dns.Dnstrie.canon2key", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|6627"}, "info": "", "type": "string list -> Dns.Dnstrie.key", "params": [{"name": "", "type": "string list"}]}}, {"value": {"name": "Dns.Dnstrie.new_trie", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|6694"}, "info": "", "type": "unit -> Dns.Dnstrie.dnstrie", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Dns.Dnstrie.simple_lookup", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|6775"}, "info": "", "type": "Dns.Dnstrie.key -> Dns.Dnstrie.dnstrie -> Dns.Dnsrr.dnsnode option", "params": [{"name": "", "type": "Dns.Dnstrie.key"}, {"name": "", "type": "Dns.Dnstrie.dnstrie"}]}}, {"value": {"name": "Dns.Dnstrie.lookup", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|6891"}, "info": "", "type": "Dns.Dnstrie.key ->\n  Dns.Dnstrie.dnstrie ->\n  [> `Delegated of bool * Dns.Dnsrr.dnsnode\n   | `Found of bool * Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode\n   | `NXDomain of Dns.Dnsrr.dnsnode\n   | `NXDomainNSEC of Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode\n   | `NoError of Dns.Dnsrr.dnsnode\n   | `NoErrorNSEC of Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode\n   | `Wildcard of Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode\n   | `WildcardNSEC of Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode * Dns.Dnsrr.dnsnode ]", "params": [{"name": "", "type": "Dns.Dnstrie.key"}, {"name": "", "type": "Dns.Dnstrie.dnstrie"}]}}, {"value": {"name": "Dns.Dnstrie.lookup_or_insert", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|7422"}, "info": "", "type": "Dns.Dnstrie.key ->\n  Dns.Dnstrie.dnstrie ->\n  ?parent:Dns.Dnstrie.dnstrie ->\n  (unit -> Dns.Dnsrr.dnsnode) -> Dns.Dnsrr.dnsnode", "params": [{"name": "", "type": "Dns.Dnstrie.key"}, {"name": "", "type": "Dns.Dnstrie.dnstrie"}, {"name": "parent", "type": "Dns.Dnstrie.dnstrie option"}, {"name": "", "type": "unit -> Dns.Dnsrr.dnsnode"}]}}, {"value": {"name": "Dns.Dnstrie.fix_flags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|7625"}, "info": "", "type": "Dns.Dnstrie.key -> Dns.Dnstrie.dnstrie -> unit", "params": [{"name": "", "type": "Dns.Dnstrie.key"}, {"name": "", "type": "Dns.Dnstrie.dnstrie"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Dns.Dnsloader", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|7669"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Dnsloader.db", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|8668"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "trie", "mutable": false, "type": "Dns.Dnstrie.dnstrie"}, {"name": "names", "mutable": true, "type": "(Dns.Dnstrie.key, Dns.Dnsrr.dnsnode) Hashtbl.t"}]}}}, {"value": {"name": "Dns.Dnsloader.new_db", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|8793"}, "info": "", "type": "unit -> Dns.Dnsloader.db", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Dns.Dnsloader.no_more_updates", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|8875"}, "info": "", "type": "Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_generic_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|8974"}, "info": "", "type": "int -> string -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "int"}, {"name": "", "type": "string"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_a_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9047"}, "info": "", "type": "Dns.Dnsrr.ipv4 -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "Dns.Dnsrr.ipv4"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_ns_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9111"}, "info": "", "type": "string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_cname_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9177"}, "info": "", "type": "string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_soa_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9246"}, "info": "", "type": "string list ->\n  string list ->\n  Dns.Dnsrr.serial ->\n  int32 ->\n  int32 -> int32 -> int32 -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsrr.serial"}, {"name": "", "type": "int32"}, {"name": "", "type": "int32"}, {"name": "", "type": "int32"}, {"name": "", "type": "int32"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_mb_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9394"}, "info": "", "type": "string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_mg_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9460"}, "info": "", "type": "string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_mr_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9526"}, "info": "", "type": "string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_wks_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9592"}, "info": "", "type": "int32 -> int -> string -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int"}, {"name": "", "type": "string"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_ptr_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9670"}, "info": "", "type": "string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_hinfo_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9737"}, "info": "", "type": "string -> string -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "string"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_minfo_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9811"}, "info": "", "type": "string list ->\n  string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_mx_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9900"}, "info": "", "type": "int -> string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "int"}, {"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_txt_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|9973"}, "info": "", "type": "string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_rp_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10040"}, "info": "", "type": "string list ->\n  string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_afsdb_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10125"}, "info": "", "type": "int -> string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "int"}, {"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_x25_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10201"}, "info": "", "type": "string -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_isdn_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10263"}, "info": "", "type": "string -> string option -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "string option"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_rt_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10343"}, "info": "", "type": "int -> string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "int"}, {"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_aaaa_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10416"}, "info": "", "type": "string -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_srv_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10479"}, "info": "", "type": "int ->\n  int -> int -> string list -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "string list"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"value": {"name": "Dns.Dnsloader.add_unspec_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10569"}, "info": "", "type": "string -> int32 -> string list -> Dns.Dnsloader.db -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int32"}, {"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnsloader.db"}]}}, {"exception": {"name": "Dns.Dnsloader.TTLMismatch", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10872"}, "info": ""}}, {"type": {"name": "Dns.Dnsloader.parserstate", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|10962"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "db", "mutable": true, "type": "Dns.Dnsloader.db"}, {"name": "paren", "mutable": true, "type": "int"}, {"name": "filename", "mutable": true, "type": "string"}, {"name": "lineno", "mutable": true, "type": "int"}, {"name": "origin", "mutable": true, "type": "string list"}, {"name": "ttl", "mutable": true, "type": "int32"}, {"name": "owner", "mutable": true, "type": "string list"}]}}}, {"value": {"name": "Dns.Dnsloader.state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|11156"}, "info": "", "type": "Dns.Dnsloader.parserstate", "params": []}}], "dependencies": {"uses": []}}}, {"module": {"name": "Dns.Dnspacket", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|11184"}, "info": "", "type": "sig  end", "module_structure": [{"exception": {"name": "Dns.Dnspacket.Unparsable", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12081"}, "info": "", "exception_args": ["string", "Bitstring.bitstring"]}}, {"value": {"name": "Dns.Dnspacket.(|>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12135"}, "info": "", "type": "'a -> ('a -> 'b) -> 'b", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a -> 'b"}]}}, {"value": {"name": "Dns.Dnspacket.(>>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12171"}, "info": "", "type": "('a -> 'b) -> ('b -> 'c) -> 'a -> 'c", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Dns.Dnspacket.(||>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12221"}, "info": "", "type": "'a list -> ('a -> 'b) -> 'b list", "params": [{"name": "", "type": "'a list"}, {"name": "", "type": "'a -> 'b"}]}}, {"value": {"name": "Dns.Dnspacket.(+++)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12268"}, "info": "", "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Dns.Dnspacket.(&&&)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12306"}, "info": "", "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Dns.Dnspacket.(|||)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12344"}, "info": "", "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Dns.Dnspacket.(^^^)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12382"}, "info": "", "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Dns.Dnspacket.(<<<)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12420"}, "info": "", "type": "int32 -> int -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.(>>>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12456"}, "info": "", "type": "int32 -> int -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.join", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12492"}, "info": "", "type": "string -> string list -> string", "params": [{"name": "", "type": "string"}, {"name": "", "type": "string list"}]}}, {"value": {"name": "Dns.Dnspacket.stop", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12535"}, "info": "", "type": "'a * 'b -> 'a", "params": [{"tuple": {"type": "'a * 'b", "contents": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}]}}, {"type": {"name": "Dns.Dnspacket.domain_name", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12579"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string list"}}, {"type": {"name": "Dns.Dnspacket.int16", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12604"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int"}}, {"type": {"name": "Dns.Dnspacket.ipv4", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12620"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int32"}}, {"value": {"name": "Dns.Dnspacket.ipv4_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12626"}, "info": "", "type": "int32 -> string", "params": [{"name": "", "type": "int32"}]}}, {"type": {"name": "Dns.Dnspacket.byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12675"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "char"}}, {"value": {"name": "Dns.Dnspacket.byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12680"}, "info": "", "type": "int -> Dns.Dnspacket.byte", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.int_of_byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12703"}, "info": "", "type": "char -> int", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Dns.Dnspacket.int32_of_byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12733"}, "info": "", "type": "char -> int32", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Dns.Dnspacket.int32_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12767"}, "info": "", "type": "int -> int32", "params": [{"name": "", "type": "int"}]}}, {"type": {"name": "Dns.Dnspacket.bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12812"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"value": {"name": "Dns.Dnspacket.bytes_to_hex_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12819"}, "info": "", "type": "char array -> string array", "params": [{"name": "", "type": "char array"}]}}, {"value": {"name": "Dns.Dnspacket.bytes_of_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12872"}, "info": "", "type": "Bitstring.bitstring -> string", "params": [{"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Dns.Dnspacket.ipv4_addr_of_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12927"}, "info": "", "type": "string -> int32", "params": [{"name": "", "type": "string"}]}}, {"type": {"name": "Dns.Dnspacket.label", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|12981"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "L", "type": ["string", "int"]}, {"name": "P", "type": ["int", "int"]}, {"name": "Z", "type": ["int"]}]}}}, {"value": {"name": "Dns.Dnspacket.parse_charstr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|13027"}, "info": "", "type": "string * int * int -> string * (string * int * int)", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"value": {"name": "Dns.Dnspacket.parse_label", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|13099"}, "info": "", "type": "int -> Bitstring.bitstring -> Dns.Dnspacket.label * (string * int * int)", "params": [{"name": "", "type": "int"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Dns.Dnspacket.parse_name", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|13176"}, "info": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t ->\n  int -> Bitstring.bitstring -> string list * Bitstring.bitstring", "params": [{"name": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t"}, {"name": "", "type": "int"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"type": {"name": "Dns.Dnspacket.rr_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|13302"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `A\n  | `A6\n  | `AAAA\n  | `AFSDB\n  | `APL\n  | `ATMA\n  | `CERT\n  | `CNAME\n  | `DNAME\n  | `DNSKEY\n  | `DS\n  | `EID\n  | `GID\n  | `GPOS\n  | `HINFO\n  | `IPSECKEY\n  | `ISDN\n  | `KEY\n  | `KM\n  | `LOC\n  | `MB\n  | `MD\n  | `MF\n  | `MG\n  | `MINFO\n  | `MR\n  | `MX\n  | `NAPTR\n  | `NIMLOC\n  | `NS\n  | `NSAP\n  | `NSAP_PTR\n  | `NSEC\n  | `NULL\n  | `NXT\n  | `OPT\n  | `PTR\n  | `PX\n  | `RP\n  | `RRSIG\n  | `RT\n  | `SIG\n  | `SINK\n  | `SOA\n  | `SPF\n  | `SRV\n  | `SSHFP\n  | `TXT\n  | `UID\n  | `UINFO\n  | `UNSPEC\n  | `Unknown of int * Dns.Dnspacket.bytes\n  | `WKS\n  | `X25 ]"}}, {"value": {"name": "Dns.Dnspacket.int_of_rr_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|13944"}, "info": "", "type": "Dns.Dnspacket.rr_type -> int", "params": [{"name": "", "type": "Dns.Dnspacket.rr_type"}]}}, {"value": {"name": "Dns.Dnspacket.rr_type_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|13980"}, "info": "", "type": "int -> Dns.Dnspacket.rr_type", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.string_of_rr_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|14016"}, "info": "", "type": "Dns.Dnspacket.rr_type -> string", "params": [{"name": "", "type": "Dns.Dnspacket.rr_type"}]}}, {"type": {"name": "Dns.Dnspacket.rr_rdata", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|14078"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `A of int32\n  | `AAAA of Dns.Dnspacket.bytes\n  | `AFSDB of Dns.Dnspacket.int16 * Dns.Dnspacket.domain_name\n  | `CNAME of Dns.Dnspacket.domain_name\n  | `HINFO of string * string\n  | `ISDN of string\n  | `MB of Dns.Dnspacket.domain_name\n  | `MD of Dns.Dnspacket.domain_name\n  | `MF of Dns.Dnspacket.domain_name\n  | `MG of Dns.Dnspacket.domain_name\n  | `MINFO of Dns.Dnspacket.domain_name * Dns.Dnspacket.domain_name\n  | `MR of Dns.Dnspacket.domain_name\n  | `MX of Dns.Dnspacket.int16 * Dns.Dnspacket.domain_name\n  | `NS of Dns.Dnspacket.domain_name\n  | `PTR of Dns.Dnspacket.domain_name\n  | `RP of Dns.Dnspacket.domain_name * Dns.Dnspacket.domain_name\n  | `RT of Dns.Dnspacket.int16 * Dns.Dnspacket.domain_name\n  | `SOA of\n      Dns.Dnspacket.domain_name * Dns.Dnspacket.domain_name * int32 * int32 *\n      int32 * int32 * int32\n  | `SRV of\n      Dns.Dnspacket.int16 * Dns.Dnspacket.int16 * Dns.Dnspacket.int16 *\n      Dns.Dnspacket.domain_name\n  | `TXT of string list\n  | `UNKNOWN of int * Dns.Dnspacket.bytes\n  | `UNSPEC of Dns.Dnspacket.bytes\n  | `WKS of int32 * Dns.Dnspacket.byte * string\n  | `X25 of string ]"}}, {"value": {"name": "Dns.Dnspacket.string_of_rdata", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|14830"}, "info": "", "type": "[> `A of int32 | `NS of string list ] -> string", "params": [{"name": "", "type": "[> `A of int32 | `NS of string list ]"}]}}, {"value": {"name": "Dns.Dnspacket.parse_rdata", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|14900"}, "info": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t ->\n  int ->\n  Dns.Dnspacket.rr_type ->\n  Bitstring.bitstring ->\n  [> `A of int32\n   | `CNAME of string list\n   | `HINFO of string * string\n   | `MINFO of string list * string list\n   | `MX of int * string list\n   | `NS of string list\n   | `PTR of string list\n   | `SOA of string list * string list * int32 * int32 * int32 * int32 * int32\n   | `TXT of 'a\n   | `UNKNOWN of int * string\n   | `WKS of int32 * Dns.Dnspacket.byte * string ]", "params": [{"name": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t"}, {"name": "", "type": "int"}, {"name": "", "type": "Dns.Dnspacket.rr_type"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"type": {"name": "Dns.Dnspacket.rr_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|15358"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `CH | `CS | `HS | `IN ]"}}, {"value": {"name": "Dns.Dnspacket.int_of_rr_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|15384"}, "info": "", "type": "Dns.Dnspacket.rr_class -> int", "params": [{"name": "", "type": "Dns.Dnspacket.rr_class"}]}}, {"value": {"name": "Dns.Dnspacket.rr_class_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|15422"}, "info": "", "type": "int -> Dns.Dnspacket.rr_class", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.string_of_rr_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|15460"}, "info": "", "type": "Dns.Dnspacket.rr_class -> string", "params": [{"name": "", "type": "Dns.Dnspacket.rr_class"}]}}, {"type": {"name": "Dns.Dnspacket.rsrc_record", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|15523"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "rr_name", "mutable": false, "type": "Dns.Dnspacket.domain_name"}, {"name": "rr_class", "mutable": false, "type": "Dns.Dnspacket.rr_class"}, {"name": "rr_ttl", "mutable": false, "type": "int32"}, {"name": "rr_rdata", "mutable": false, "type": "Dns.Dnspacket.rr_rdata"}]}}}, {"value": {"name": "Dns.Dnspacket.rr_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|15616"}, "info": "", "type": "Dns.Dnspacket.rsrc_record -> string", "params": [{"name": "", "type": "Dns.Dnspacket.rsrc_record"}]}}, {"value": {"name": "Dns.Dnspacket.parse_rr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|15657"}, "info": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t ->\n  int ->\n  Bitstring.bitstring -> Dns.Dnspacket.rsrc_record * (string * int * int)", "params": [{"name": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t"}, {"name": "", "type": "int"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"type": {"name": "Dns.Dnspacket.q_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|15781"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `A\n  | `A6\n  | `AAAA\n  | `AFSDB\n  | `ANY\n  | `APL\n  | `ATMA\n  | `AXFR\n  | `CERT\n  | `CNAME\n  | `DLV\n  | `DNAME\n  | `DNSKEY\n  | `DS\n  | `EID\n  | `GID\n  | `GPOS\n  | `HINFO\n  | `IPSECKEY\n  | `ISDN\n  | `KEY\n  | `KM\n  | `LOC\n  | `MAILA\n  | `MAILB\n  | `MB\n  | `MD\n  | `MF\n  | `MG\n  | `MINFO\n  | `MR\n  | `MX\n  | `NAPTR\n  | `NIMLOC\n  | `NS\n  | `NSAP\n  | `NSAP_PTR\n  | `NSEC\n  | `NULL\n  | `NXT\n  | `OPT\n  | `PTR\n  | `PX\n  | `RP\n  | `RRSIG\n  | `RT\n  | `SIG\n  | `SINK\n  | `SOA\n  | `SPF\n  | `SRV\n  | `SSHFP\n  | `TA\n  | `TXT\n  | `UID\n  | `UINFO\n  | `UNSPEC\n  | `Unknown of int * Dns.Dnspacket.bytes\n  | `WKS\n  | `X25 ]"}}, {"value": {"name": "Dns.Dnspacket.int_of_q_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16493"}, "info": "", "type": "Dns.Dnspacket.q_type -> int", "params": [{"name": "", "type": "Dns.Dnspacket.q_type"}]}}, {"value": {"name": "Dns.Dnspacket.q_type_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16527"}, "info": "", "type": "int -> Dns.Dnspacket.q_type", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.string_of_q_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16561"}, "info": "", "type": "Dns.Dnspacket.q_type -> string", "params": [{"name": "", "type": "Dns.Dnspacket.q_type"}]}}, {"type": {"name": "Dns.Dnspacket.q_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16616"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `ANY | `CH | `CS | `HS | `IN | `NONE ]"}}, {"value": {"name": "Dns.Dnspacket.int_of_q_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16657"}, "info": "", "type": "Dns.Dnspacket.q_class -> int", "params": [{"name": "", "type": "Dns.Dnspacket.q_class"}]}}, {"value": {"name": "Dns.Dnspacket.q_class_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16693"}, "info": "", "type": "int -> Dns.Dnspacket.q_class", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.string_of_q_class", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16729"}, "info": "", "type": "Dns.Dnspacket.q_class -> string", "params": [{"name": "", "type": "Dns.Dnspacket.q_class"}]}}, {"type": {"name": "Dns.Dnspacket.question", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16787"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "q_name", "mutable": false, "type": "Dns.Dnspacket.domain_name"}, {"name": "q_type", "mutable": false, "type": "Dns.Dnspacket.q_type"}, {"name": "q_class", "mutable": false, "type": "Dns.Dnspacket.q_class"}]}}}, {"value": {"name": "Dns.Dnspacket.question_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16849"}, "info": "", "type": "Dns.Dnspacket.question -> string", "params": [{"name": "", "type": "Dns.Dnspacket.question"}]}}, {"value": {"name": "Dns.Dnspacket.parse_question", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|16893"}, "info": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t ->\n  int -> Bitstring.bitstring -> Dns.Dnspacket.question * (string * int * int)", "params": [{"name": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t"}, {"name": "", "type": "int"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"type": {"name": "Dns.Dnspacket.qr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17012"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Answer | `Query ]"}}, {"value": {"name": "Dns.Dnspacket.qr_of_bool", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17033"}, "info": "", "type": "bool -> [> `Answer | `Query ]", "params": [{"name": "", "type": "bool"}]}}, {"value": {"name": "Dns.Dnspacket.bool_of_qr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17080"}, "info": "", "type": "[< `Answer | `Query ] -> bool", "params": [{"name": "", "type": "[< `Answer | `Query ]"}]}}, {"type": {"name": "Dns.Dnspacket.opcode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17141"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Answer | `Notify | `Query | `Reserved | `Status | `Update ]"}}, {"value": {"name": "Dns.Dnspacket.opcode_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17204"}, "info": "", "type": "int -> [> `Answer | `Notify | `Query | `Reserved | `Status | `Update ]", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.int_of_opcode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17295"}, "info": "", "type": "[> `Answer | `Notify | `Query | `Reserved | `Status | `Update ] -> int", "params": [{"name": "", "type": "[> `Answer | `Notify | `Query | `Reserved | `Status | `Update ]"}]}}, {"type": {"name": "Dns.Dnspacket.rcode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17403"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `BadAlg\n  | `BadKey\n  | `BadMode\n  | `BadName\n  | `BadTime\n  | `BadVers\n  | `FormErr\n  | `NXDomain\n  | `NXRRSet\n  | `NoError\n  | `NotAuth\n  | `NotImp\n  | `NotZone\n  | `Refused\n  | `ServFail\n  | `YXDomain\n  | `YXRRSet ]"}}, {"value": {"name": "Dns.Dnspacket.rcode_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17656"}, "info": "", "type": "int ->\n  [> `BadAlg\n   | `BadKey\n   | `BadMode\n   | `BadName\n   | `BadTime\n   | `BadVers\n   | `FormErr\n   | `NXDomain\n   | `NXRRSet\n   | `NoError\n   | `NotAuth\n   | `NotImp\n   | `NotZone\n   | `Refused\n   | `ServFail\n   | `YXDomain\n   | `YXRRSet ]", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Dns.Dnspacket.int_of_rcode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|17924"}, "info": "", "type": "[> `BadAlg\n   | `BadKey\n   | `BadMode\n   | `BadName\n   | `BadTime\n   | `BadVers\n   | `FormErr\n   | `NXDomain\n   | `NXRRSet\n   | `NoError\n   | `NotAuth\n   | `NotImp\n   | `NotZone\n   | `Refused\n   | `ServFail\n   | `YXDomain\n   | `YXRRSet ] ->\n  int", "params": [{"name": "", "type": "[> `BadAlg\n   | `BadKey\n   | `BadMode\n   | `BadName\n   | `BadTime\n   | `BadVers\n   | `FormErr\n   | `NXDomain\n   | `NXRRSet\n   | `NoError\n   | `NotAuth\n   | `NotImp\n   | `NotZone\n   | `Refused\n   | `ServFail\n   | `YXDomain\n   | `YXRRSet ]"}]}}, {"type": {"name": "Dns.Dnspacket.detail", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18206"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "qr", "mutable": false, "type": "Dns.Dnspacket.qr"}, {"name": "opcode", "mutable": false, "type": "Dns.Dnspacket.opcode"}, {"name": "aa", "mutable": false, "type": "bool"}, {"name": "tc", "mutable": false, "type": "bool"}, {"name": "rd", "mutable": false, "type": "bool"}, {"name": "ra", "mutable": false, "type": "bool"}, {"name": "rcode", "mutable": false, "type": "Dns.Dnspacket.rcode"}]}}}, {"value": {"name": "Dns.Dnspacket.detail_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18309"}, "info": "", "type": "Dns.Dnspacket.detail -> string", "params": [{"name": "", "type": "Dns.Dnspacket.detail"}]}}, {"value": {"name": "Dns.Dnspacket.parse_detail", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18349"}, "info": "", "type": "string * int * int -> Dns.Dnspacket.detail", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"value": {"name": "Dns.Dnspacket.build_detail", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18397"}, "info": "", "type": "Dns.Dnspacket.detail -> Bitstring.bitstring", "params": [{"name": "", "type": "Dns.Dnspacket.detail"}]}}, {"type": {"name": "Dns.Dnspacket.dns", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18457"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "id", "mutable": false, "type": "Dns.Dnspacket.int16"}, {"name": "detail", "mutable": false, "type": "Bitstring.t"}, {"name": "questions", "mutable": false, "type": "Dns.Dnspacket.question list"}, {"name": "answers", "mutable": false, "type": "Dns.Dnspacket.rsrc_record list"}, {"name": "authorities", "mutable": false, "type": "Dns.Dnspacket.rsrc_record list"}, {"name": "additionals", "mutable": false, "type": "Dns.Dnspacket.rsrc_record list"}]}}}, {"value": {"name": "Dns.Dnspacket.dns_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18626"}, "info": "", "type": "Dns.Dnspacket.dns -> string", "params": [{"name": "", "type": "Dns.Dnspacket.dns"}]}}, {"value": {"name": "Dns.Dnspacket.parse_dns", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18660"}, "info": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t ->\n  Bitstring.bitstring -> Dns.Dnspacket.dns", "params": [{"name": "", "type": "(int, Dns.Dnspacket.label) Hashtbl.t"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Dns.Dnspacket.marshal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18729"}, "info": "", "type": "Dns.Dnspacket.dns -> Bitstring.bitstring", "params": [{"name": "", "type": "Dns.Dnspacket.dns"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Dns.Dnsquery", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|18774"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Dnsquery.query_answer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|19711"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "rcode", "mutable": false, "type": "Dns.Dnspacket.rcode"}, {"name": "aa", "mutable": false, "type": "bool"}, {"name": "answer", "mutable": false, "type": "Dns.Dnspacket.rsrc_record list"}, {"name": "authority", "mutable": false, "type": "Dns.Dnspacket.rsrc_record list"}, {"name": "additional", "mutable": false, "type": "Dns.Dnspacket.rsrc_record list"}]}}}, {"value": {"name": "Dns.Dnsquery.answer_query", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|19876"}, "info": "", "type": "string list ->\n  Dns.Dnspacket.q_type -> Dns.Dnstrie.dnstrie -> Dns.Dnsquery.query_answer", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "Dns.Dnspacket.q_type"}, {"name": "", "type": "Dns.Dnstrie.dnstrie"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Dns.Dnsparser", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|19969"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Dns.Dnsparser.token", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|20030"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "EOF", "type": []}, {"name": "EOL", "type": []}, {"name": "SORIGIN", "type": []}, {"name": "STTL", "type": []}, {"name": "AT", "type": []}, {"name": "DOT", "type": []}, {"name": "SPACE", "type": []}, {"name": "GENERIC", "type": []}, {"name": "NUMBER", "type": ["string"]}, {"name": "CHARSTRING", "type": ["string"]}, {"name": "TYPE_A", "type": ["string"]}, {"name": "TYPE_NS", "type": ["string"]}, {"name": "TYPE_MD", "type": ["string"]}, {"name": "TYPE_MF", "type": ["string"]}, {"name": "TYPE_CNAME", "type": ["string"]}, {"name": "TYPE_SOA", "type": ["string"]}, {"name": "TYPE_MB", "type": ["string"]}, {"name": "TYPE_MG", "type": ["string"]}, {"name": "TYPE_MR", "type": ["string"]}, {"name": "TYPE_NULL", "type": ["string"]}, {"name": "TYPE_WKS", "type": ["string"]}, {"name": "TYPE_PTR", "type": ["string"]}, {"name": "TYPE_HINFO", "type": ["string"]}, {"name": "TYPE_MINFO", "type": ["string"]}, {"name": "TYPE_MX", "type": ["string"]}, {"name": "TYPE_TXT", "type": ["string"]}, {"name": "TYPE_RP", "type": ["string"]}, {"name": "TYPE_AFSDB", "type": ["string"]}, {"name": "TYPE_X25", "type": ["string"]}, {"name": "TYPE_ISDN", "type": ["string"]}, {"name": "TYPE_RT", "type": ["string"]}, {"name": "TYPE_NSAP", "type": ["string"]}, {"name": "TYPE_NSAP_PTR", "type": ["string"]}, {"name": "TYPE_SIG", "type": ["string"]}, {"name": "TYPE_KEY", "type": ["string"]}, {"name": "TYPE_PX", "type": ["string"]}, {"name": "TYPE_GPOS", "type": ["string"]}, {"name": "TYPE_AAAA", "type": ["string"]}, {"name": "TYPE_LOC", "type": ["string"]}, {"name": "TYPE_NXT", "type": ["string"]}, {"name": "TYPE_EID", "type": ["string"]}, {"name": "TYPE_NIMLOC", "type": ["string"]}, {"name": "TYPE_SRV", "type": ["string"]}, {"name": "TYPE_ATMA", "type": ["string"]}, {"name": "TYPE_NAPTR", "type": ["string"]}, {"name": "TYPE_KX", "type": ["string"]}, {"name": "TYPE_CERT", "type": ["string"]}, {"name": "TYPE_A6", "type": ["string"]}, {"name": "TYPE_DNAME", "type": ["string"]}, {"name": "TYPE_SINK", "type": ["string"]}, {"name": "TYPE_OPT", "type": ["string"]}, {"name": "TYPE_APL", "type": ["string"]}, {"name": "TYPE_DS", "type": ["string"]}, {"name": "TYPE_SSHFP", "type": ["string"]}, {"name": "TYPE_IPSECKEY", "type": ["string"]}, {"name": "TYPE_RRSIG", "type": ["string"]}, {"name": "TYPE_NSEC", "type": ["string"]}, {"name": "TYPE_DNSKEY", "type": ["string"]}, {"name": "TYPE_SPF", "type": ["string"]}, {"name": "TYPE_UINFO", "type": ["string"]}, {"name": "TYPE_UID", "type": ["string"]}, {"name": "TYPE_GID", "type": ["string"]}, {"name": "TYPE_UNSPEC", "type": ["string"]}, {"name": "TYPE_TKEY", "type": ["string"]}, {"name": "TYPE_TSIG", "type": ["string"]}, {"name": "TYPE_MAILB", "type": ["string"]}, {"name": "TYPE_MAILA", "type": ["string"]}, {"name": "TYPE_GENERIC", "type": ["string"]}, {"name": "CLASS_IN", "type": ["string"]}, {"name": "CLASS_CS", "type": ["string"]}, {"name": "CLASS_CH", "type": ["string"]}, {"name": "CLASS_HS", "type": ["string"]}]}}}, {"value": {"name": "Dns.Dnsparser.zfile", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|21744"}, "info": "", "type": "(Lexing.lexbuf -> Dns.Dnsparser.token) -> Lexing.lexbuf -> unit", "params": [{"name": "", "type": "Lexing.lexbuf -> Dns.Dnsparser.token"}, {"name": "", "type": "Lexing.lexbuf"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Dns.Dnsserver", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|21813"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "Dns.Dnsserver.load_zone", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|22708"}, "info": "", "type": "string list -> string -> unit", "params": [{"name": "", "type": "string list"}, {"name": "", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Dns.Server", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|22758"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "Dns.Server.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dns.mli|23714"}, "info": "", "type": "?mode:[< `leaky | `none > `none ] ->\n  zonebuf:string ->\n  Net.Datagram.UDPv4.mgr -> Net.Datagram.UDPv4.src -> unit Lwt.t", "params": [{"name": "mode", "type": "[< `leaky | `none > `none ] option"}, {"name": "zonebuf", "type": "string"}, {"name": "", "type": "Net.Datagram.UDPv4.mgr"}, {"name": "", "type": "Net.Datagram.UDPv4.src"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Net", "Lwt", "Lexing", "Hashtbl", "Bitstring"], "used_by": []}}}, "Http": {"module": {"name": "Http", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|0"}, "info": {"description": "Type definitions"}, "type": "sig  end", "module_structure": [{"module": {"name": "Http.Types", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Type definitions"}, {"type": {"name": "Http.Types.version", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|1093"}, "info": {"description": "HTTP version, actually only 1.0 and 1.1 are supported. Note that\n  'supported' here means only 'accepted inside a HTTP request line', no\n  different behaviours are actually implemented depending on HTTP version"}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `HTTP_1_0 | `HTTP_1_1 ]"}}, {"type": {"name": "Http.Types.meth", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|1209"}, "info": {"description": "HTTP method, actually only GET and POST methods are supported"}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `DELETE | `GET | `HEAD | `POST ]"}}, {"type": {"name": "Http.Types.auth_info", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|1308"}, "info": {"description": "authentication information"}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Basic of string * (string -> string -> bool) | `None ]"}}, {"type": {"name": "Http.Types.informational_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|1541"}, "info": {"see": [{"doc": "RFC2616", "text": "informational HTTP status"}]}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Continue | `Switching_protocols ]"}}, {"type": {"name": "Http.Types.success_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|1651"}, "info": {"see": [{"doc": "RFC2616", "text": "success HTTP status"}]}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Accepted\n  | `Created\n  | `No_content\n  | `Non_authoritative_information\n  | `OK\n  | `Partial_content\n  | `Reset_content ]"}}, {"type": {"name": "Http.Types.redirection_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|1856"}, "info": {"see": [{"doc": "RFC2616", "text": "redirection HTTP status"}]}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Found\n  | `Moved_permanently\n  | `Multiple_choices\n  | `Not_modified\n  | `See_other\n  | `Temporary_redirect\n  | `Use_proxy ]"}}, {"type": {"name": "Http.Types.client_error_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|2065"}, "info": {"see": [{"doc": "RFC2616", "text": "client error HTTP status"}]}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Bad_request\n  | `Conflict\n  | `Expectation_failed\n  | `Forbidden\n  | `Gone\n  | `Length_required\n  | `Method_not_allowed\n  | `Not_acceptable\n  | `Not_found\n  | `Payment_required\n  | `Precondition_failed\n  | `Proxy_authentication_required\n  | `Request_URI_too_large\n  | `Request_entity_too_large\n  | `Request_time_out\n  | `Requested_range_not_satisfiable\n  | `Unauthorized\n  | `Unsupported_media_type ]"}}, {"type": {"name": "Http.Types.server_error_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|2550"}, "info": {"see": [{"doc": "RFC2616", "text": "server error HTTP status"}]}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Bad_gateway\n  | `Gateway_time_out\n  | `HTTP_version_not_supported\n  | `Internal_server_error\n  | `Not_implemented\n  | `Service_unavailable ]"}}, {"type": {"name": "Http.Types.error_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|2719"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Bad_gateway\n  | `Bad_request\n  | `Conflict\n  | `Expectation_failed\n  | `Forbidden\n  | `Gateway_time_out\n  | `Gone\n  | `HTTP_version_not_supported\n  | `Internal_server_error\n  | `Length_required\n  | `Method_not_allowed\n  | `Not_acceptable\n  | `Not_found\n  | `Not_implemented\n  | `Payment_required\n  | `Precondition_failed\n  | `Proxy_authentication_required\n  | `Request_URI_too_large\n  | `Request_entity_too_large\n  | `Request_time_out\n  | `Requested_range_not_satisfiable\n  | `Service_unavailable\n  | `Unauthorized\n  | `Unsupported_media_type ]"}}, {"type": {"name": "Http.Types.status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|2807"}, "info": {"description": "HTTP status"}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Accepted\n  | `Bad_gateway\n  | `Bad_request\n  | `Conflict\n  | `Continue\n  | `Created\n  | `Expectation_failed\n  | `Forbidden\n  | `Found\n  | `Gateway_time_out\n  | `Gone\n  | `HTTP_version_not_supported\n  | `Internal_server_error\n  | `Length_required\n  | `Method_not_allowed\n  | `Moved_permanently\n  | `Multiple_choices\n  | `No_content\n  | `Non_authoritative_information\n  | `Not_acceptable\n  | `Not_found\n  | `Not_implemented\n  | `Not_modified\n  | `OK\n  | `Partial_content\n  | `Payment_required\n  | `Precondition_failed\n  | `Proxy_authentication_required\n  | `Request_URI_too_large\n  | `Request_entity_too_large\n  | `Request_time_out\n  | `Requested_range_not_satisfiable\n  | `Reset_content\n  | `See_other\n  | `Service_unavailable\n  | `Switching_protocols\n  | `Temporary_redirect\n  | `Unauthorized\n  | `Unsupported_media_type\n  | `Use_proxy ]"}}, {"type": {"name": "Http.Types.status_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|2944"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Accepted\n  | `Bad_gateway\n  | `Bad_request\n  | `Code of int\n  | `Conflict\n  | `Continue\n  | `Created\n  | `Expectation_failed\n  | `Forbidden\n  | `Found\n  | `Gateway_time_out\n  | `Gone\n  | `HTTP_version_not_supported\n  | `Internal_server_error\n  | `Length_required\n  | `Method_not_allowed\n  | `Moved_permanently\n  | `Multiple_choices\n  | `No_content\n  | `Non_authoritative_information\n  | `Not_acceptable\n  | `Not_found\n  | `Not_implemented\n  | `Not_modified\n  | `OK\n  | `Partial_content\n  | `Payment_required\n  | `Precondition_failed\n  | `Proxy_authentication_required\n  | `Request_URI_too_large\n  | `Request_entity_too_large\n  | `Request_time_out\n  | `Requested_range_not_satisfiable\n  | `Reset_content\n  | `See_other\n  | `Service_unavailable\n  | `Switching_protocols\n  | `Temporary_redirect\n  | `Unauthorized\n  | `Unsupported_media_type\n  | `Use_proxy ]"}}, {"comment": "<h2>Exceptions<\/h2>"}, {"exception": {"name": "Http.Types.Invalid_header", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3032"}, "info": {"description": "invalid header encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Invalid_header_name", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3109"}, "info": {"description": "invalid header name encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Invalid_header_value", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3192"}, "info": {"description": "invalid header value encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Invalid_HTTP_version", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3291"}, "info": {"description": "unsupported or invalid HTTP version encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Invalid_HTTP_method", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3389"}, "info": {"description": "unsupported or invalid HTTP method encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Invalid_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3499"}, "info": {"description": "invalid HTTP status code integer representation encountered"}, "exception_args": ["int"]}}, {"exception": {"name": "Http.Types.Malformed_URL", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3563"}, "info": {"description": "invalid URL encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Malformed_query", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3640"}, "info": {"description": "invalid query string encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Malformed_query_part", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3776"}, "info": {"description": "invalid query string part encountered, arguments are parameter name and\n  parameter value"}, "exception_args": ["string", "string"]}}, {"exception": {"name": "Http.Types.Malformed_request_URI", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3868"}, "info": {"description": "invalid request URI encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Malformed_request", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|3947"}, "info": {"description": "malformed request received"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Malformed_response", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|4058"}, "info": {"description": "malformed response received, argument is response's first line"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Param_not_found", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|4154"}, "info": {"description": "a parameter you were looking for was not found"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Invalid_status_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|4237"}, "info": {"description": "invalid HTTP status line encountered"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Header_not_found", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|4332"}, "info": {"description": "an header you were looking for was not found"}, "exception_args": ["string"]}}, {"exception": {"name": "Http.Types.Unauthorized", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|4610"}, "info": {"description": "raisable by callbacks to force a 401 (unauthorized) HTTP answer.\n      This exception should be raised _before_ sending any data over given out\n      channel."}, "exception_args": ["string"]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Misc", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|4647"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Helpers and other not better classified functions which should not be\nexposed in the final API"}, {"value": {"name": "Http.Misc.date_822", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|5693"}, "info": {"return": "the current date compliant to RFC 1123, which updates RFC 822\n  zone info are retrieved from UTC"}, "type": "unit -> string", "params": [{"name": "", "type": "unit"}]}}, {"value": {"name": "Http.Misc.rfc822_of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|5791"}, "info": {"description": "Convert a number of seconds to a date compliant with RFC 822"}, "type": "float -> string", "params": [{"name": "", "type": "float"}]}}, {"value": {"name": "Http.Misc.strip_trailing_slash", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|5908"}, "info": {"description": "strip trailing '\/', if any, from a string and", "return": "the new string"}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Http.Misc.strip_heading_slash", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|6029"}, "info": {"description": "strip heading '\/', if any, from a string and", "return": "the new string"}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Http.Misc.reason_phrase_of_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|6148"}, "info": {"description": "given an HTTP response code return the corresponding reason phrase"}, "type": "int -> string", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Http.Misc.list_assoc_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|6289"}, "info": {"description": "like List.assoc but return all bindings of a given key instead of the\n  leftmost one only"}, "type": "'a -> ('a * 'b) list -> 'b list", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "('a * 'b) list"}]}}, {"value": {"name": "Http.Misc.warn", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|6342"}, "info": {"description": "print a warning msg to stderr. Adds trailing \\n"}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Http.Misc.error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|6422"}, "info": {"description": "print an error msg to stderr. Adds trailing \\n"}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Url", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|6507"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Http.Url.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|7368"}, "info": {"description": "URL type"}, "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "scheme", "mutable": false, "type": "string option"}, {"name": "userinfo", "mutable": false, "type": "string option"}, {"name": "host", "mutable": false, "type": "string option"}, {"name": "port", "mutable": false, "type": "int option"}, {"name": "path", "mutable": false, "type": "string list option"}, {"name": "path_string", "mutable": false, "type": "string option"}, {"name": "query", "mutable": false, "type": "(string * string) list option"}, {"name": "query_string", "mutable": false, "type": "string option"}, {"name": "fragment", "mutable": false, "type": "string option"}]}}}, {"value": {"name": "Http.Url.full_path", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|7762"}, "info": {"description": "Get the full path of an url (ie. including leading \/, queries and fragments"}, "type": "Http.Url.t -> string", "params": [{"name": "", "type": "Http.Url.t"}]}}, {"value": {"name": "Http.Url.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|7834"}, "info": {"description": "Build an encoded string from an URL"}, "type": "Http.Url.t -> string", "params": [{"name": "", "type": "Http.Url.t"}]}}, {"value": {"name": "Http.Url.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|7906"}, "info": {"description": "Build an URL from an encoded string"}, "type": "string -> Http.Url.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Http.Url.encode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|7964"}, "info": {"description": "URL encode the string"}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Http.Url.decode", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|8024"}, "info": {"description": "URL decode the string"}, "type": "string -> string", "params": [{"name": "", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Common", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|8058"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Common functionalities shared by other OCaml HTTP modules"}, {"value": {"name": "Http.Common.string_of_version", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|9009"}, "info": {"description": "pretty print an HTTP version"}, "type": "Http.Types.version -> string", "params": [{"name": "", "type": "Http.Types.version"}]}}, {"value": {"name": "Http.Common.version_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|9187"}, "info": {"description": "parse an HTTP version from a string", "raised_exceptions": [{"raised_exception": "Invalid_HTTP_version", "text": "if given string doesn't represent a supported HTTP\n  version"}]}, "type": "string -> Http.Types.version", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Http.Common.string_of_method", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|9266"}, "info": {"description": "pretty print an HTTP method"}, "type": "Http.Types.meth -> string", "params": [{"name": "", "type": "Http.Types.meth"}]}}, {"value": {"name": "Http.Common.method_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|9432"}, "info": {"description": "parse an HTTP method from a string", "raised_exceptions": [{"raised_exception": "Invalid_HTTP_method", "text": "if given string doesn't represent a supported\n  method"}]}, "type": "string -> Http.Types.meth", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Http.Common.status_of_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|9615"}, "info": {"description": "converts an integer HTTP status to the corresponding status value", "raised_exceptions": [{"raised_exception": "Invalid_code", "text": "if given integer isn't a valid HTTP status code"}]}, "type": "int -> Http.Types.status", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Http.Common.code_of_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|9718"}, "info": {"description": "converts an HTTP status to the corresponding integer value"}, "type": "[< Http.Types.status ] -> int", "params": [{"name": "", "type": "[< Http.Types.status ]"}]}}, {"value": {"name": "Http.Common.is_informational", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|9828"}, "info": {"return": "true on \"informational\" status codes, false elsewhere"}, "type": "int -> bool", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Http.Common.is_success", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|9928"}, "info": {"return": "true on \"success\" status codes, false elsewhere"}, "type": "int -> bool", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Http.Common.is_redirection", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|10026"}, "info": {"return": "true on \"redirection\" status codes, false elsewhere"}, "type": "int -> bool", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Http.Common.is_client_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|10129"}, "info": {"return": "true on \"client error\" status codes, false elsewhere"}, "type": "int -> bool", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Http.Common.is_server_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|10233"}, "info": {"return": "true on \"server error\" status codes, false elsewhere"}, "type": "int -> bool", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Http.Common.is_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|10357"}, "info": {"return": "true on \"client error\" and \"server error\" status code, false\n  elsewhere"}, "type": "int -> bool", "params": [{"name": "", "type": "int"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Constants", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|10388"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Constants"}, {"value": {"name": "Http.Constants.default_version", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11245"}, "info": "", "type": "Http.Types.version", "params": []}}, {"value": {"name": "Http.Constants.server_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11281"}, "info": "", "type": "string", "params": []}}, {"value": {"name": "Http.Constants.crlf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11308"}, "info": "", "type": "string", "params": []}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Message", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11329"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Http.Message.contents", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11388"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Inchan of int64 * Bitstring.t Lwt_stream.t | `String of string ]"}}, {"type": {"name": "Http.Message.message", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11474"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Http.Message.body", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11474"}, "info": "", "type": "Http.Message.message -> Http.Message.contents list", "params": [{"name": "", "type": "Http.Message.message"}]}}, {"value": {"name": "Http.Message.body_size", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11510"}, "info": "", "type": "Http.Message.contents list -> int64", "params": [{"name": "", "type": "Http.Message.contents list"}]}}, {"value": {"name": "Http.Message.set_body", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11549"}, "info": "", "type": "Http.Message.message -> Http.Message.contents -> unit", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "", "type": "Http.Message.contents"}]}}, {"value": {"name": "Http.Message.add_body", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11592"}, "info": "", "type": "Http.Message.message -> Http.Message.contents -> unit", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "", "type": "Http.Message.contents"}]}}, {"value": {"name": "Http.Message.add_header", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11635"}, "info": "", "type": "Http.Message.message -> name:string -> value:string -> unit", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "name", "type": "string"}, {"name": "value", "type": "string"}]}}, {"value": {"name": "Http.Message.add_headers", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11699"}, "info": "", "type": "Http.Message.message -> (string * string) list -> unit", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "", "type": "(string * string) list"}]}}, {"value": {"name": "Http.Message.replace_header", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11759"}, "info": "", "type": "Http.Message.message -> name:string -> value:string -> unit", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "name", "type": "string"}, {"name": "value", "type": "string"}]}}, {"value": {"name": "Http.Message.replace_headers", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11827"}, "info": "", "type": "Http.Message.message -> (string * string) list -> unit", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "", "type": "(string * string) list"}]}}, {"value": {"name": "Http.Message.remove_header", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11891"}, "info": "", "type": "Http.Message.message -> name:string -> unit", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "name", "type": "string"}]}}, {"value": {"name": "Http.Message.has_header", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11942"}, "info": "", "type": "Http.Message.message -> name:string -> bool", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "name", "type": "string"}]}}, {"value": {"name": "Http.Message.header", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|11990"}, "info": "", "type": "Http.Message.message -> name:string -> string list", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "name", "type": "string"}]}}, {"value": {"name": "Http.Message.headers", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|12041"}, "info": "", "type": "Http.Message.message -> (string * string) list", "params": [{"name": "", "type": "Http.Message.message"}]}}, {"value": {"name": "Http.Message.version", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|12089"}, "info": "", "type": "Http.Message.message -> Http.Types.version", "params": [{"name": "", "type": "Http.Message.message"}]}}, {"value": {"name": "Http.Message.init", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|12128"}, "info": "", "type": "body:Http.Message.contents list ->\n  headers:(string * string) list ->\n  version:Http.Types.version -> Http.Message.message", "params": [{"name": "body", "type": "Http.Message.contents list"}, {"name": "headers", "type": "(string * string) list"}, {"name": "version", "type": "Http.Types.version"}]}}, {"value": {"name": "Http.Message.serialize_to_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|12234"}, "info": "", "type": "Http.Message.message -> fstLineToString:string -> Net.Channel.t -> unit Lwt.t", "params": [{"name": "", "type": "Http.Message.message"}, {"name": "fstLineToString", "type": "string"}, {"name": "", "type": "Net.Channel.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Parser", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|12332"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "HTTP messages parsing"}, {"value": {"name": "Http.Parser.parse_request_fst_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|13617"}, "info": {"description": "parse 1st line of an HTTP request", "raised_exceptions": [{"raised_exception": "Malformed_request", "text": "if request 1st linst isn't well formed"}, {"raised_exception": "Malformed_request_URI", "text": "if requested URI isn't well formed"}], "return": "a triple meth * url * version, meth is the HTTP method invoked, url is\n  the requested url, version is the HTTP version specified or None if no version\n  was specified"}, "type": "(unit -> string Lwt.t) ->\n  (Http.Types.meth * Http.Url.t * Http.Types.version) Lwt.t", "params": [{"name": "", "type": "unit -> string Lwt.t"}]}}, {"value": {"name": "Http.Parser.parse_response_fst_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|13871"}, "info": {"description": "parse 1st line of an HTTP response\n   *", "raised_exceptions": [{"raised_exception": "Malformed_response", "text": "if first line isn't well formed"}]}, "type": "(unit -> string Lwt.t) -> (Http.Types.version * Http.Types.status) Lwt.t", "params": [{"name": "", "type": "unit -> string Lwt.t"}]}}, {"value": {"name": "Http.Parser.parse_headers", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|14210"}, "info": {"description": "parse HTTP headers. Consumes also trailing CRLF at the end of header list", "raised_exceptions": [{"raised_exception": "Invalid_header", "text": "if a not well formed header is encountered"}], "return": "a list of pairs header_name * header_value"}, "type": "(unit -> string Lwt.t) -> (string * string) list Lwt.t", "params": [{"name": "", "type": "unit -> string Lwt.t"}]}}, {"value": {"name": "Http.Parser.parse_request", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|14525"}, "info": {"description": "given an input channel, reads from it a GET HTTP request and", "return": "a pair &lt;path, query_params&gt; where path is a string representing the\n  requested path and query_params is a list of pairs &lt;name, value&gt; (the GET\n  parameters)"}, "type": "(unit -> string Lwt.t) -> (string * (string * string) list) Lwt.t", "params": [{"name": "", "type": "unit -> string Lwt.t"}]}}, {"value": {"name": "Http.Parser.parse_content_range", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|14737"}, "info": {"description": "parse content-range header in a request", "return": "number of bytes to read, or None if all available should be read"}, "type": "(string * string) list -> int option", "params": [{"name": "", "type": "(string * string) list"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Request", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|14803"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Http.Request.request", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|14878"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Http.Request.init_request", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|14878"}, "info": "", "type": "unit Lwt.u -> (unit -> string Lwt.t) -> Http.Request.request Lwt.t", "params": [{"name": "", "type": "unit Lwt.u"}, {"name": "", "type": "unit -> string Lwt.t"}]}}, {"value": {"name": "Http.Request.meth", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|14951"}, "info": "", "type": "Http.Request.request -> Http.Types.meth", "params": [{"name": "", "type": "Http.Request.request"}]}}, {"value": {"name": "Http.Request.uri", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|14984"}, "info": "", "type": "Http.Request.request -> string", "params": [{"name": "", "type": "Http.Request.request"}]}}, {"value": {"name": "Http.Request.path", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15012"}, "info": "", "type": "Http.Request.request -> string", "params": [{"name": "", "type": "Http.Request.request"}]}}, {"value": {"name": "Http.Request.body", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15041"}, "info": "", "type": "Http.Request.request -> Http.Message.contents list", "params": [{"name": "", "type": "Http.Request.request"}]}}, {"value": {"name": "Http.Request.param", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15085"}, "info": "", "type": "?meth:[< `GET | `POST ] ->\n  ?default:string -> Http.Request.request -> string -> string", "params": [{"name": "meth", "type": "[< `GET | `POST ] option"}, {"name": "default", "type": "string option"}, {"name": "", "type": "Http.Request.request"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Http.Request.param_all", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15173"}, "info": "", "type": "?meth:Http.Types.meth -> Http.Request.request -> string -> string list", "params": [{"name": "meth", "type": "Http.Types.meth option"}, {"name": "", "type": "Http.Request.request"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Http.Request.params", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15242"}, "info": "", "type": "Http.Request.request -> (string, string) Hashtbl.t", "params": [{"name": "", "type": "Http.Request.request"}]}}, {"value": {"name": "Http.Request.params_get", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15293"}, "info": "", "type": "Http.Request.request -> (string * string) list", "params": [{"name": "", "type": "Http.Request.request"}]}}, {"value": {"name": "Http.Request.params_post", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15344"}, "info": "", "type": "Http.Request.request -> (string * string) list", "params": [{"name": "", "type": "Http.Request.request"}]}}, {"value": {"name": "Http.Request.authorization", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15396"}, "info": "", "type": "Http.Request.request -> [> `Basic of string * string ] option", "params": [{"name": "", "type": "Http.Request.request"}]}}, {"value": {"name": "Http.Request.header", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15465"}, "info": "", "type": "Http.Request.request -> name:string -> string list", "params": [{"name": "", "type": "Http.Request.request"}, {"name": "name", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Response", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15520"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Http.Response.response", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15598"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Http.Response.init", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15598"}, "info": "", "type": "?body:Http.Message.contents list ->\n  ?headers:(string * string) list ->\n  ?version:Http.Types.version ->\n  ?status:Http.Types.status_code ->\n  ?reason:string -> unit -> Http.Response.response", "params": [{"name": "body", "type": "Http.Message.contents list option"}, {"name": "headers", "type": "(string * string) list option"}, {"name": "version", "type": "Http.Types.version option"}, {"name": "status", "type": "Http.Types.status_code option"}, {"name": "reason", "type": "string option"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Http.Response.version_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15777"}, "info": "", "type": "Http.Response.response -> string", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15817"}, "info": "", "type": "Http.Response.response -> int", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.set_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15844"}, "info": "", "type": "Http.Response.response -> int -> unit", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Http.Response.status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15883"}, "info": "", "type": "Http.Response.response -> Http.Types.status", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.set_status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15921"}, "info": "", "type": "Http.Response.response -> Http.Types.status -> unit", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "", "type": "Http.Types.status"}]}}, {"value": {"name": "Http.Response.reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|15971"}, "info": "", "type": "Http.Response.response -> string", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.set_reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16003"}, "info": "", "type": "Http.Response.response -> string -> unit", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Http.Response.status_line", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16047"}, "info": "", "type": "Http.Response.response -> string", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.is_informational", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16084"}, "info": "", "type": "Http.Response.response -> bool", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.is_success", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16124"}, "info": "", "type": "Http.Response.response -> bool", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.is_redirection", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16158"}, "info": "", "type": "Http.Response.response -> bool", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.is_client_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16196"}, "info": "", "type": "Http.Response.response -> bool", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.is_server_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16235"}, "info": "", "type": "Http.Response.response -> bool", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.is_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16274"}, "info": "", "type": "Http.Response.response -> bool", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.add_basic_headers", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16306"}, "info": "", "type": "Http.Response.response -> unit", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.content_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16347"}, "info": "", "type": "Http.Response.response -> string option", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.set_content_type", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16392"}, "info": "", "type": "Http.Response.response -> value:string -> unit", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "value", "type": "string"}]}}, {"value": {"name": "Http.Response.content_encoding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16448"}, "info": "", "type": "Http.Response.response -> string option", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.set_content_encoding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16497"}, "info": "", "type": "Http.Response.response -> value:string -> unit", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "value", "type": "string"}]}}, {"value": {"name": "Http.Response.date", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16557"}, "info": "", "type": "Http.Response.response -> string option", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.set_date", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16594"}, "info": "", "type": "Http.Response.response -> value:string -> unit", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "value", "type": "string"}]}}, {"value": {"name": "Http.Response.expires", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16642"}, "info": "", "type": "Http.Response.response -> string option", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.set_expires", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16682"}, "info": "", "type": "Http.Response.response -> value:string -> unit", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "value", "type": "string"}]}}, {"value": {"name": "Http.Response.server", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16733"}, "info": "", "type": "Http.Response.response -> string option", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Response.set_server", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16772"}, "info": "", "type": "Http.Response.response -> value:string -> unit", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "value", "type": "string"}]}}, {"value": {"name": "Http.Response.serialize_to_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16822"}, "info": "", "type": "Http.Response.response -> Net.Channel.t -> unit Lwt.t", "params": [{"name": "", "type": "Http.Response.response"}, {"name": "", "type": "Net.Channel.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Cookie", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16893"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Http.Cookie.time", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|16950"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Day of int | `Hour of int | `Minute of int | `Second of int ] list"}}, {"type": {"name": "Http.Cookie.expiration", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|17038"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Age of Http.Cookie.time | `Discard | `Session | `Until of float ]"}}, {"type": {"name": "Http.Cookie.cookie", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|17108"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Http.Cookie.make", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|17108"}, "info": "", "type": "?expiry:Http.Cookie.expiration ->\n  ?path:string ->\n  ?domain:string ->\n  ?secure:bool -> string -> string -> string * Http.Cookie.cookie", "params": [{"name": "expiry", "type": "Http.Cookie.expiration option"}, {"name": "path", "type": "string option"}, {"name": "domain", "type": "string option"}, {"name": "secure", "type": "bool option"}, {"name": "", "type": "string"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Http.Cookie.serialize", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|17233"}, "info": "", "type": "?version:[ `HTTP_1_0 | `HTTP_1_1 ] ->\n  string * Http.Cookie.cookie -> string * string", "params": [{"name": "version", "type": "[ `HTTP_1_0 | `HTTP_1_1 ] option"}, {"tuple": {"type": "string * Http.Cookie.cookie", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "Http.Cookie.cookie"}]}}]}}, {"value": {"name": "Http.Cookie.extract", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|17326"}, "info": "", "type": "Http.Request.request -> (string * string) list", "params": [{"name": "", "type": "Http.Request.request"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Http.Server", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|17386"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Http.Server.conn_id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|18295"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Http.Server.string_of_conn_id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|18295"}, "info": "", "type": "Http.Server.conn_id -> string", "params": [{"name": "", "type": "Http.Server.conn_id"}]}}, {"type": {"name": "Http.Server.daemon_spec", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|18357"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "address", "mutable": false, "type": "string"}, {"name": "auth", "mutable": false, "type": "Http.Types.auth_info"}, {"name": "callback", "mutable": false, "type": "Http.Server.conn_id ->\n  Http.Request.request -> (Net.Channel.t -> unit Lwt.t) Lwt.t"}, {"name": "conn_closed", "mutable": false, "type": "Http.Server.conn_id -> unit"}, {"name": "port", "mutable": false, "type": "int"}, {"name": "exn_handler", "mutable": false, "type": "exn -> unit Lwt.t"}, {"name": "timeout", "mutable": false, "type": "float option"}]}}}, {"value": {"name": "Http.Server.control_body", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|18598"}, "info": "", "type": "int -> string -> string", "params": [{"name": "", "type": "int"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Http.Server.respond_with", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|18641"}, "info": "", "type": "Http.Response.response -> (Net.Channel.t -> unit Lwt.t) Lwt.t", "params": [{"name": "", "type": "Http.Response.response"}]}}, {"value": {"name": "Http.Server.respond", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|18717"}, "info": "", "type": "?body:string ->\n  ?headers:(string * string) list ->\n  ?version:Http.Types.version ->\n  ?status:Http.Types.status_code -> unit -> (Net.Channel.t -> unit Lwt.t) Lwt.t", "params": [{"name": "body", "type": "string option"}, {"name": "headers", "type": "(string * string) list option"}, {"name": "version", "type": "Http.Types.version option"}, {"name": "status", "type": "Http.Types.status_code option"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Http.Server.respond_control", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|18889"}, "info": "", "type": "string ->\n  ?is_valid_status:(int -> bool) ->\n  ?headers:(string * string) list ->\n  ?body:string ->\n  ?version:Http.Types.version ->\n  Http.Types.status_code -> (Net.Channel.t -> unit Lwt.t) Lwt.t", "params": [{"name": "", "type": "string"}, {"name": "is_valid_status", "type": "(int -> bool) option"}, {"name": "headers", "type": "(string * string) list option"}, {"name": "body", "type": "string option"}, {"name": "version", "type": "Http.Types.version option"}, {"name": "", "type": "Http.Types.status_code"}]}}, {"value": {"name": "Http.Server.respond_redirect", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|19101"}, "info": "", "type": "location:string ->\n  ?body:string ->\n  ?version:Http.Types.version ->\n  ?status:Http.Types.status_code -> unit -> (Net.Channel.t -> unit Lwt.t) Lwt.t", "params": [{"name": "location", "type": "string"}, {"name": "body", "type": "string option"}, {"name": "version", "type": "Http.Types.version option"}, {"name": "status", "type": "Http.Types.status_code option"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Http.Server.respond_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|19266"}, "info": "", "type": "?body:string ->\n  ?version:Http.Types.version ->\n  ?status:Http.Types.status_code -> unit -> (Net.Channel.t -> unit Lwt.t) Lwt.t", "params": [{"name": "body", "type": "string option"}, {"name": "version", "type": "Http.Types.version option"}, {"name": "status", "type": "Http.Types.status_code option"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Http.Server.respond_not_found", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|19407"}, "info": "", "type": "url:'a ->\n  ?version:Http.Types.version -> unit -> (Net.Channel.t -> unit Lwt.t) Lwt.t", "params": [{"name": "url", "type": "'a"}, {"name": "version", "type": "Http.Types.version option"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Http.Server.respond_forbidden", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|19515"}, "info": "", "type": "url:'a ->\n  ?version:Http.Types.version -> unit -> (Net.Channel.t -> unit Lwt.t) Lwt.t", "params": [{"name": "url", "type": "'a"}, {"name": "version", "type": "Http.Types.version option"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Http.Server.respond_unauthorized", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|19623"}, "info": "", "type": "?version:'a -> ?realm:string -> unit -> (Net.Channel.t -> unit Lwt.t) Lwt.t", "params": [{"name": "version", "type": "'a option"}, {"name": "realm", "type": "string option"}, {"name": "", "type": "unit"}]}}, {"value": {"name": "Http.Server.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/http.mli|19728"}, "info": "", "type": "Net.Manager.t ->\n  [< `TCPv4 of Net.Nettypes.ipv4_src * Http.Server.daemon_spec ] -> unit Lwt.t", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "[< `TCPv4 of Net.Nettypes.ipv4_src * Http.Server.daemon_spec ]"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Net", "Lwt_stream", "Lwt", "Hashtbl", "Bitstring"], "used_by": []}}}, "Utf8": {"module": {"name": "Utf8", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"exception": {"name": "Utf8.MalFormed", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|0"}, "info": ""}}, {"value": {"name": "Utf8.width", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|21"}, "info": "", "type": "int array", "params": []}}, {"value": {"name": "Utf8.next", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|42"}, "info": "", "type": "string -> int -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf8.compute_len", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|73"}, "info": "", "type": "string -> int -> int -> int", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf8.blit_to_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|118"}, "info": "", "type": "string -> int -> int array -> int -> int -> unit", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int array"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf8.to_int_array", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|184"}, "info": "", "type": "string -> int -> int -> int array", "params": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf8.store", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|237"}, "info": "", "type": "Buffer.t -> int -> unit", "params": [{"name": "", "type": "Buffer.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf8.from_int_array", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|272"}, "info": "", "type": "int array -> int -> int -> string", "params": [{"name": "", "type": "int array"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf8.from_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|327"}, "info": "", "type": "char Stream.t -> int", "params": [{"name": "", "type": "char Stream.t"}]}}, {"value": {"name": "Utf8.stream_from_char_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf8.mli|365"}, "info": "", "type": "char Stream.t -> int Stream.t", "params": [{"name": "", "type": "char Stream.t"}]}}], "dependencies": {"uses": ["Stream", "Buffer"], "used_by": []}}}, "Utf16": {"module": {"name": "Utf16", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|0"}, "info": {"description": "UTF-16 support for Ulex.\n   Implementation as described in \"http:\/\/www.ietf.org\/rfc\/rfc2781.txt\"."}, "type": "sig  end", "module_structure": [{"exception": {"name": "Utf16.MalFormed", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|108"}, "info": ""}}, {"comment": "UTF-16 can be encoded in little endian format (0xabcd -&gt;\n   (0xcd|0xab)) or big endian format (0xabcd -&gt; (0xab|0xcd)."}, {"type": {"name": "Utf16.byte_order", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|274"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Little_endian", "type": []}, {"name": "Big_endian", "type": []}]}}}, {"comment": "<h6>Interface <\/h6>"}, {"value": {"name": "Utf16.to_int_array", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|703"}, "info": {"description": "<span class=\"code\" >to_int_array opt_bo str spos bytes<\/span> decodes the string <span class=\"code\" >str<\/span> of\n   length <span class=\"code\" >bytes<\/span> starting in position <span class=\"code\" >spos<\/span>. If <span class=\"code\" >opt_bo<\/span> matches\n   with <span class=\"code\" >None<\/span> the functions tries to detect a BOM, if it can't it\n   assumes big endian byte order. If <span class=\"code\" >opt_bo<\/span> matches with <span class=\"code\" >Some bo<\/span>\n   byte order <span class=\"code\" >bo<\/span> is assumed and potential byte order marks are\n   interpreted as code points 0xfeff."}, "type": "Utf16.byte_order option -> string -> int -> int -> int array", "params": [{"name": "", "type": "Utf16.byte_order option"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf16.from_int_array", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|986"}, "info": {"description": "<span class=\"code\" >from_int_array bo a apos len bom<\/span> encodes an int array <span class=\"code\" >a<\/span>\n   containing <span class=\"code\" >len<\/span> code points from position <span class=\"code\" >apos<\/span> into a string\n   with byte order <span class=\"code\" >bo<\/span>. The results starts with a BOM if <span class=\"code\" >bom =\n   true<\/span>."}, "type": "Utf16.byte_order -> int array -> int -> int -> bool -> string", "params": [{"name": "", "type": "Utf16.byte_order"}, {"name": "", "type": "int array"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Utf16.stream_from_char_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|1216"}, "info": {"description": "<span class=\"code\" >stream_from_char_stream opt_stro<\/span> creates a new int stream\n   containing the code points encoded in <span class=\"code\" >str<\/span>. Treats <span class=\"code\" >opt_bo<\/span> as\n   <span class=\"code\" >to_int_array<\/span>."}, "type": "Utf16.byte_order option -> char Stream.t -> int Stream.t", "params": [{"name": "", "type": "Utf16.byte_order option"}, {"name": "", "type": "char Stream.t"}]}}, {"comment": "<h6>Low level<\/h6>"}, {"value": {"name": "Utf16.get_byte_order", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|1424"}, "info": {"description": "<span class=\"code\" >get_byte_order c1 c2<\/span> determines the byte order by a pair of\n   bytes\/characters <span class=\"code\" >c1<\/span> and <span class=\"code\" >c2<\/span>."}, "type": "char -> char -> Utf16.byte_order", "params": [{"name": "", "type": "char"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Utf16.from_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|1570"}, "info": {"description": "<span class=\"code\" >from_stream bo s<\/span> reads the next code point from a stream encoded\n   in byte order <span class=\"code\" >bo<\/span>."}, "type": "Utf16.byte_order -> char Stream.t -> int", "params": [{"name": "", "type": "Utf16.byte_order"}, {"name": "", "type": "char Stream.t"}]}}, {"value": {"name": "Utf16.number_of_char_pair", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|1739"}, "info": {"description": "<span class=\"code\" >number_of_char_pair bo c1 c2<\/span> returns the code point encoded in\n   <span class=\"code\" >c1<\/span> and <span class=\"code\" >c2<\/span> following byte order <span class=\"code\" >bo<\/span>."}, "type": "Utf16.byte_order -> char -> char -> int", "params": [{"name": "", "type": "Utf16.byte_order"}, {"name": "", "type": "char"}, {"name": "", "type": "char"}]}}, {"value": {"name": "Utf16.char_pair_of_number", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|1904"}, "info": {"description": "<span class=\"code\" >char_pair_of_number bo cp<\/span> encodes code point <span class=\"code\" >cp<\/span> into two\n   characters with byte order <span class=\"code\" >bo<\/span>."}, "type": "Utf16.byte_order -> int -> char * char", "params": [{"name": "", "type": "Utf16.byte_order"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf16.next_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|2093"}, "info": {"description": "<span class=\"code\" >next_code bo s pos bytes bo<\/span> reads the code point starting at\n   position <span class=\"code\" >pos<\/span> in a string <span class=\"code\" >s<\/span> of total length <span class=\"code\" >bytes<\/span>."}, "type": "Utf16.byte_order -> string -> int -> int -> int * int", "params": [{"name": "", "type": "Utf16.byte_order"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf16.compute_len", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|2298"}, "info": {"description": "<span class=\"code\" >compute_len opt_bo str pos len<\/span> computes the\n   number of encoded code points in string <span class=\"code\" >str<\/span> from position\n   <span class=\"code\" >pos<\/span> to <span class=\"code\" >pos+len-1<\/span>."}, "type": "Utf16.byte_order option -> string -> int -> int -> int", "params": [{"name": "", "type": "Utf16.byte_order option"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf16.blit_to_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|2514"}, "info": {"description": "<span class=\"code\" >blit_to_int bo str spos a apos n<\/span> decode <span class=\"code\" >len<\/span> bytes\n   from string <span class=\"code\" >str<\/span> starting at position <span class=\"code\" >spos<\/span> into\n   array <span class=\"code\" >a<\/span>, at position <span class=\"code\" >apos<\/span>."}, "type": "Utf16.byte_order option -> string -> int -> int array -> int -> int -> unit", "params": [{"name": "", "type": "Utf16.byte_order option"}, {"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int array"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf16.store", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|2703"}, "info": {"description": "<span class=\"code\" >store bo buf cp<\/span> adds a codepoint <span class=\"code\" >cp<\/span> to a buffer <span class=\"code\" >buf<\/span>\n   following the byte order <span class=\"code\" >bo<\/span>."}, "type": "Utf16.byte_order -> Buffer.t -> int -> unit", "params": [{"name": "", "type": "Utf16.byte_order"}, {"name": "", "type": "Buffer.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Utf16.from_utf16_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|2756"}, "info": {"description": "<span class=\"code\" >from_utf16_stream s opt_bo<\/span> creates a lexbuf from an UTF-16\n      encoded stream. If <span class=\"code\" >opt_bo<\/span> matches with <span class=\"code\" >None<\/span> the function\n      expects a BOM (Byte Order Mark), and takes the byte order as\n      <span class=\"code\" >Utf16.Big_endian<\/span> if it cannot find one. When <span class=\"code\" >opt_bo<\/span> matches \n      with <span class=\"code\" >Some bo<\/span>, <span class=\"code\" >bo<\/span> is taken as byte order. In this case a\n      leading BOM is kept in the stream - the lexer has to ignore it\n      and a `wrong' BOM (<span class=\"code\" >0xfffe<\/span>) will raise Utf16.InvalidCodepoint."}, "type": "char Stream.t -> Utf16.byte_order option -> Ulexing.lexbuf", "params": [{"name": "", "type": "char Stream.t"}, {"name": "", "type": "Utf16.byte_order option"}]}}, {"value": {"name": "Utf16.from_utf16_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|3317"}, "info": {"description": "Works as <span class=\"code\" >from_utf16_stream<\/span> with an <span class=\"code\" >in_channel<\/span>."}, "type": "Pervasives.in_channel -> Utf16.byte_order option -> Ulexing.lexbuf", "params": [{"name": "", "type": "Pervasives.in_channel"}, {"name": "", "type": "Utf16.byte_order option"}]}}, {"value": {"name": "Utf16.from_utf16_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|3517"}, "info": {"description": "Works as <span class=\"code\" >from_utf16_stream<\/span> with a <span class=\"code\" >string<\/span>."}, "type": "string -> Utf16.byte_order option -> Ulexing.lexbuf", "params": [{"name": "", "type": "string"}, {"name": "", "type": "Utf16.byte_order option"}]}}, {"value": {"name": "Utf16.utf16_lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|3705"}, "info": {"description": "<span class=\"code\" >utf16_lexeme lb bo bom<\/span> as <span class=\"code\" >Ulexing.lexeme<\/span> with a result encoded in\n      UTF-16 in byte_order <span class=\"code\" >bo<\/span> and starting with a BOM if <span class=\"code\" >bom = true<\/span>."}, "type": "Ulexing.lexbuf -> Utf16.byte_order -> bool -> string", "params": [{"name": "", "type": "Ulexing.lexbuf"}, {"name": "", "type": "Utf16.byte_order"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "Utf16.utf16_sub_lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/utf16.mli|3975"}, "info": {"description": "<span class=\"code\" >utf16_sub_lexeme lb pos len bo bom<\/span> as <span class=\"code\" >Ulexing.sub_lexeme<\/span> with a \n      result encoded in UTF-16 with byte order <span class=\"code\" >bo<\/span> and starting with a BOM\n      if <span class=\"code\" >bom=true<\/span>"}, "type": "Ulexing.lexbuf -> int -> int -> Utf16.byte_order -> bool -> string", "params": [{"name": "", "type": "Ulexing.lexbuf"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}, {"name": "", "type": "Utf16.byte_order"}, {"name": "", "type": "bool"}]}}], "dependencies": {"uses": ["Ulexing", "Stream", "Buffer"], "used_by": []}}}, "Ulexing": {"module": {"name": "Ulexing", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|0"}, "info": {"description": "Runtime support for lexers generated by <span class=\"code\" >ulex<\/span>.\n  This module is roughly equivalent to the module Lexing from \n  the OCaml standard library, except that its lexbuffers handles\n  Unicode code points (OCaml type: <span class=\"code\" >int<\/span> in the range\n  <span class=\"code\" >0..0x10ffff<\/span>) instead of bytes (OCaml type: <span class=\"code\" >char<\/span>).<br><\/br>\n  It is possible to have ulex-generated lexers work on a custom\n  implementation for lex buffers. To do this, define a module <span class=\"code\" >L<\/span> which\n  implements the <span class=\"code\" >start<\/span>, <span class=\"code\" >next<\/span>, <span class=\"code\" >mark<\/span> and <span class=\"code\" >backtrack<\/span> functions\n  (See the Internal Interface section below for a specification),\n  and the <span class=\"code\" >Error<\/span> exception.  \n  They need not work on a type named <span class=\"code\" >lexbuf<\/span>: you can use the type\n  name you want. Then, just do in your ulex-processed source, before\n  the first lexer specification:<br><\/br>\n  <span class=\"code\" >module Ulexing = L<\/span><br><\/br>\n  Of course, you'll probably want to define functions like <span class=\"code\" >lexeme<\/span>\n  to be used in the lexers semantic actions."}, "type": "sig  end", "module_structure": [{"type": {"name": "Ulexing.lexbuf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|1285"}, "info": {"description": "The type of lexer buffers. A lexer buffer is the argument passed\n    to the scanning functions defined by the generated lexers.\n    The lexer buffer holds the internal information for the\n    scanners, including the code points of the token currently scanned,\n    its position from the beginning of the input stream,\n    and the current position of the lexer."}, "params": [], "kind": {"type": "abstract"}}}, {"exception": {"name": "Ulexing.Error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|1285"}, "info": {"description": "Raised by a lexer when it cannot parse a token from the lexbuf. \n    The functions <span class=\"code\" >Ulexing.lexeme_start<\/span> (resp. <span class=\"code\" >Ulexing.lexeme_end<\/span>) can be \n    used to find to positions of the first code point of the current\n    matched substring (resp. the first code point that yield the error)."}}}, {"exception": {"name": "Ulexing.InvalidCodepoint", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|1596"}, "info": {"description": "Raised by some functions to signal that some code point is not\n    compatible with a specified encoding."}, "exception_args": ["int"]}}, {"comment": "<h6>Clients interface<\/h6>"}, {"value": {"name": "Ulexing.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|1775"}, "info": {"description": "Create a generic lexer buffer.  When the lexer needs more\n    characters, it will call the given function, giving it an array of\n    integers <span class=\"code\" >a<\/span>, a position <span class=\"code\" >pos<\/span> and a code point count <span class=\"code\" >n<\/span>.  The\n    function should put <span class=\"code\" >n<\/span> code points or less in <span class=\"code\" >a<\/span>, starting at\n    position <span class=\"code\" >pos<\/span>, and return the number of characters provided. A\n    return value of 0 means end of input."}, "type": "(int array -> int -> int -> int) -> Ulexing.lexbuf", "params": [{"name": "", "type": "int array -> int -> int -> int"}]}}, {"value": {"name": "Ulexing.from_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|2217"}, "info": {"description": "Create a lexbuf from a stream of Unicode code points."}, "type": "int Stream.t -> Ulexing.lexbuf", "params": [{"name": "", "type": "int Stream.t"}]}}, {"value": {"name": "Ulexing.from_int_array", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|2321"}, "info": {"description": "Create a lexbuf from an array of Unicode code points."}, "type": "int array -> Ulexing.lexbuf", "params": [{"name": "", "type": "int array"}]}}, {"value": {"name": "Ulexing.from_latin1_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|2425"}, "info": {"description": "Create a lexbuf from a Latin1 encoded stream (ie a stream\n    of Unicode code points in the range <span class=\"code\" >0..255<\/span>)"}, "type": "char Stream.t -> Ulexing.lexbuf", "params": [{"name": "", "type": "char Stream.t"}]}}, {"value": {"name": "Ulexing.from_latin1_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|2591"}, "info": {"description": "Create a lexbuf from a Latin1 encoded input channel.\n    The client is responsible for closing the channel."}, "type": "Pervasives.in_channel -> Ulexing.lexbuf", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Ulexing.from_latin1_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|2755"}, "info": {"description": "Create a lexbuf from a Latin1 encoded string."}, "type": "string -> Ulexing.lexbuf", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Ulexing.from_utf8_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|2852"}, "info": {"description": "Create a lexbuf from a UTF-8 encoded stream."}, "type": "char Stream.t -> Ulexing.lexbuf", "params": [{"name": "", "type": "char Stream.t"}]}}, {"value": {"name": "Ulexing.from_utf8_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|2953"}, "info": {"description": "Create a lexbuf from a UTF-8 encoded input channel."}, "type": "Pervasives.in_channel -> Ulexing.lexbuf", "params": [{"name": "", "type": "Pervasives.in_channel"}]}}, {"value": {"name": "Ulexing.from_utf8_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|3059"}, "info": {"description": "Create a lexbuf from a UTF-8 encoded string."}, "type": "string -> Ulexing.lexbuf", "params": [{"name": "", "type": "string"}]}}, {"type": {"name": "Ulexing.enc", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|3164"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Ascii", "type": []}, {"name": "Latin1", "type": []}, {"name": "Utf8", "type": []}]}}}, {"value": {"name": "Ulexing.from_var_enc_stream", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|3186"}, "info": {"description": "Create a lexbuf from a stream whose encoding is subject\n    to change during lexing. The reference can be changed at any point.\n    Note that bytes that have been consumed by the lexer buffer\n    are not re-interpreted with the new encoding.<br><\/br>\n    In <span class=\"code\" >Ascii<\/span> mode, non-ASCII bytes (ie <span class=\"code\" >&gt;127<\/span>) in the stream\n    raise an <span class=\"code\" >InvalidCodepoint<\/span> exception."}, "type": "Ulexing.enc Pervasives.ref -> char Stream.t -> Ulexing.lexbuf", "params": [{"name": "", "type": "Ulexing.enc Pervasives.ref"}, {"name": "", "type": "char Stream.t"}]}}, {"value": {"name": "Ulexing.from_var_enc_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|3605"}, "info": {"description": "Same as <span class=\"code\" >Ulexing.from_var_enc_stream<\/span> with a string as input."}, "type": "Ulexing.enc Pervasives.ref -> string -> Ulexing.lexbuf", "params": [{"name": "", "type": "Ulexing.enc Pervasives.ref"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Ulexing.from_var_enc_channel", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|3730"}, "info": {"description": "Same as <span class=\"code\" >Ulexing.from_var_enc_stream<\/span> with a channel as input."}, "type": "Ulexing.enc Pervasives.ref -> Pervasives.in_channel -> Ulexing.lexbuf", "params": [{"name": "", "type": "Ulexing.enc Pervasives.ref"}, {"name": "", "type": "Pervasives.in_channel"}]}}, {"comment": "<h6>Interface for lexers semantic actions<\/h6>"}, {"comment": "The following functions can be called from the semantic actions of\n  lexer definitions.  They give access to the character string matched\n  by the regular expression associated with the semantic action. These\n  functions must be applied to the argument <span class=\"code\" >lexbuf<\/span>, which, in the\n  code generated by <span class=\"code\" >ulex<\/span>, is bound to the lexer buffer passed to the\n  parsing function.<br><\/br>\n  These functions can also be called when capturing a <span class=\"code\" >Ulexing.Error<\/span> \n  exception to retrieve the problematic string."}, {"value": {"name": "Ulexing.lexeme_start", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|4407"}, "info": {"description": "<span class=\"code\" >Ulexing.lexeme_start lexbuf<\/span> returns the offset in the\n    input stream of the first code point of the matched string.\n    The first code point of the stream has offset 0."}, "type": "Ulexing.lexbuf -> int", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.lexeme_end", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|4622"}, "info": {"description": "<span class=\"code\" >Ulexing.lexeme_end lexbuf<\/span> returns the offset in the input stream\n   of the character following the last code point of the matched\n   string. The first character of the stream has offset 0."}, "type": "Ulexing.lexbuf -> int", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.loc", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|4851"}, "info": {"description": "<span class=\"code\" >Ulexing.loc lexbuf<\/span> returns the pair \n  <span class=\"code\" >(Ulexing.lexeme_start lexbuf,Ulexing.lexeme_end lexbuf)<\/span>."}, "type": "Ulexing.lexbuf -> int * int", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.lexeme_length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|4988"}, "info": {"description": "<span class=\"code\" >Ulexing.loc lexbuf<\/span> returns the difference \n  <span class=\"code\" >(Ulexing.lexeme_end lexbuf) - (Ulexing.lexeme_start lexbuf)<\/span>,\n  that is, the length (in code points) of the matched string."}, "type": "Ulexing.lexbuf -> int", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|5201"}, "info": {"description": "<span class=\"code\" >Ulexing.lexeme lexbuf<\/span> returns the string matched by\n  the regular expression as an array of Unicode code point."}, "type": "Ulexing.lexbuf -> int array", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.get_buf", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|5355"}, "info": {"description": "Direct access to the internal buffer."}, "type": "Ulexing.lexbuf -> int array", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.get_start", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|5435"}, "info": {"description": "Direct access to the starting position of the lexeme in the\n      internal buffer."}, "type": "Ulexing.lexbuf -> int", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.get_pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|5556"}, "info": {"description": "Direct access to the current position (end of lexeme) in the\n      internal buffer."}, "type": "Ulexing.lexbuf -> int", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.lexeme_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|5677"}, "info": {"description": "<span class=\"code\" >Ulexing.lexeme_char lexbuf pos<\/span> returns code point number <span class=\"code\" >pos<\/span> in\n      the matched string."}, "type": "Ulexing.lexbuf -> int -> int", "params": [{"name": "", "type": "Ulexing.lexbuf"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Ulexing.sub_lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|5819"}, "info": {"description": "<span class=\"code\" >Ulexing.lexeme lexbuf pos len<\/span> returns a substring of the string\n  matched by the regular expression as an array of Unicode code point."}, "type": "Ulexing.lexbuf -> int -> int -> int array", "params": [{"name": "", "type": "Ulexing.lexbuf"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Ulexing.latin1_lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|6015"}, "info": {"description": "As <span class=\"code\" >Ulexing.lexeme<\/span> with a result encoded in Latin1.\n  This function throws an exception <span class=\"code\" >InvalidCodepoint<\/span> if it is not possible\n  to encode the result in Latin1."}, "type": "Ulexing.lexbuf -> string", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.latin1_sub_lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|6223"}, "info": {"description": "As <span class=\"code\" >Ulexing.sub_lexeme<\/span> with a result encoded in Latin1.\n  This function throws an exception <span class=\"code\" >InvalidCodepoint<\/span> if it is not possible\n  to encode the result in Latin1."}, "type": "Ulexing.lexbuf -> int -> int -> string", "params": [{"name": "", "type": "Ulexing.lexbuf"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Ulexing.latin1_lexeme_char", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|6453"}, "info": {"description": "As <span class=\"code\" >Ulexing.lexeme_char<\/span> with a result encoded in Latin1.\n  This function throws an exception <span class=\"code\" >InvalidCodepoint<\/span> if it is not possible\n  to encode the result in Latin1."}, "type": "Ulexing.lexbuf -> int -> char", "params": [{"name": "", "type": "Ulexing.lexbuf"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Ulexing.utf8_lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|6678"}, "info": {"description": "As <span class=\"code\" >Ulexing.lexeme<\/span> with a result encoded in UTF-8."}, "type": "Ulexing.lexbuf -> string", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.utf8_sub_lexeme", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|6772"}, "info": {"description": "As <span class=\"code\" >Ulexing.sub_lexeme<\/span> with a result encoded in UTF-8."}, "type": "Ulexing.lexbuf -> int -> int -> string", "params": [{"name": "", "type": "Ulexing.lexbuf"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Ulexing.rollback", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|6889"}, "info": {"description": "<span class=\"code\" >Ulexing.rollback lexbuf<\/span> puts <span class=\"code\" >lexbuf<\/span> back in its configuration before\n  the last lexeme was matched. It is then possible to use another\n  lexer to parse the same characters again. The other functions\n  above in this section should not be used in the semantic action\n  after a call to <span class=\"code\" >Ulexing.rollback<\/span>."}, "type": "Ulexing.lexbuf -> unit", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"comment": "<h6>Internal interface<\/h6>"}, {"comment": "These functions are used internally by the lexers. They could be used\n  to write lexers by hand, or with a lexer generator different from\n  <span class=\"code\" >ulex<\/span>. The lexer buffers have a unique internal slot that can store\n  an integer. They also store a \"backtrack\" position."}, {"value": {"name": "Ulexing.start", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|7535"}, "info": {"description": "<span class=\"code\" >Ulexing.start lexbuf<\/span> informs the lexer buffer that any\n  code points until the current position can be discarded.\n  The current position become the \"start\" position as returned\n  by <span class=\"code\" >Ulexing.lexeme_start<\/span>. Moreover, the internal slot is set to\n  <span class=\"code\" >-1<\/span> and the backtrack position is set to the current position."}, "type": "Ulexing.lexbuf -> unit", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.next", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|7881"}, "info": {"description": "<span class=\"code\" >Ulexing.next lexbuf next<\/span> extracts the next code point from the\n  lexer buffer and increments to current position. If the input stream\n  is exhausted, the function returns <span class=\"code\" >-1<\/span>."}, "type": "Ulexing.lexbuf -> int", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}, {"value": {"name": "Ulexing.mark", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|8092"}, "info": {"description": "<span class=\"code\" >Ulexing.mark lexbuf i<\/span> stores the integer <span class=\"code\" >i<\/span> in the internal\n  slot. The backtrack position is set to the current position."}, "type": "Ulexing.lexbuf -> int -> unit", "params": [{"name": "", "type": "Ulexing.lexbuf"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Ulexing.backtrack", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/ulexing.mli|8258"}, "info": {"description": "<span class=\"code\" >Ulexing.backtrack lexbuf<\/span> returns the value stored in the\n  internal slot of the buffer, and performs backtracking\n  (the current position is set to the value of the backtrack position)."}, "type": "Ulexing.lexbuf -> int", "params": [{"name": "", "type": "Ulexing.lexbuf"}]}}], "dependencies": {"uses": ["Stream"], "used_by": ["Utf16"]}}}, "Dyntype": {"module": {"name": "Dyntype", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|0"}, "info": {"description": "Dynamic types"}, "type": "sig  end", "module_structure": [{"type": {"name": "Dyntype.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|837"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Unit", "description": "unit", "type": []}, {"name": "Bool", "description": "booleans", "type": []}, {"name": "Float", "description": "floating-point numbers", "type": []}, {"name": "Char", "description": "characters", "type": []}, {"name": "String", "description": "strings", "type": []}, {"name": "Int", "description": "integer type of a given size (as 31-,32- or 64-bits); <span class=\"code\" >Int None<\/span> is for bigints", "type": ["int option"]}, {"name": "List", "description": "collection of stuff of the same type (stored as lists)", "type": ["Dyntype.t"]}, {"name": "Array", "description": "collection of stuff of the same type (stored as arrays)", "type": ["Dyntype.t"]}, {"name": "Tuple", "description": "Cartesian product", "type": ["Dyntype.t list"]}, {"name": "Dict", "description": "record <span class=\"code\" >'R<\/span> or object <span class=\"code\" >'O<\/span> type; <span class=\"code\" >`RW<\/span> stands for mutable fields", "type": ["[ `O | `R ]", "(string * [ `RO | `RW ] * Dyntype.t) list"]}, {"name": "Sum", "description": "polymorphic <span class=\"code\" >`P<\/span> or normal <span class=\"code\" >`N<\/span> variant type", "type": ["[ `N | `P ]", "(string * Dyntype.t list) list"]}, {"name": "Option", "description": "option type", "type": ["Dyntype.t"]}, {"name": "Rec", "description": "recursive type", "type": ["string", "Dyntype.t"]}, {"name": "Var", "description": "recursive fix-point", "type": ["string"]}, {"name": "Arrow", "description": "arrow type", "type": ["Dyntype.t", "Dyntype.t"]}, {"name": "Ext", "description": "type variable", "type": ["string", "Dyntype.t"]}]}}}, {"comment": "<h2>Utility functions<\/h2>"}, {"value": {"name": "Dyntype.is_mutable", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|1794"}, "info": {"description": "<span class=\"code\" >is_mutable t<\/span> checks whether <span class=\"code\" >t<\/span> contains a mutable field"}, "type": "Dyntype.t -> bool", "params": [{"name": "", "type": "Dyntype.t"}]}}, {"value": {"name": "Dyntype.free_vars", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|1990"}, "info": {"description": "<span class=\"code\" >free_vars t<\/span> returns all the free variables of type <span class=\"code\" >t<\/span>.\n\tIf <span class=\"code\" >t<\/span> is unfolded (as it should be when calling <span class=\"code\" >type_of_t<\/span>,\n\tthis call should return an empty list."}, "type": "Dyntype.t -> string list", "params": [{"name": "", "type": "Dyntype.t"}]}}, {"value": {"name": "Dyntype.foreigns", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|2093"}, "info": {"description": "<span class=\"code\" >foreigns t<\/span> returns all the type variables appearing in <span class=\"code\" >t<\/span>."}, "type": "Dyntype.t -> string list", "params": [{"name": "", "type": "Dyntype.t"}]}}, {"value": {"name": "Dyntype.unroll", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|2221"}, "info": {"description": "<span class=\"code\" >unroll env t<\/span> replaces every type appearing in <span class=\"code\" >t<\/span> by its type value defined in <span class=\"code\" >env<\/span>."}, "type": "(string * Dyntype.t) list -> Dyntype.t -> Dyntype.t", "params": [{"name": "", "type": "(string * Dyntype.t) list"}, {"name": "", "type": "Dyntype.t"}]}}, {"comment": "<h2>Sub-typing<\/h2>"}, {"value": {"name": "Dyntype.is_subtype_of", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|2551"}, "info": {"description": "<span class=\"code\" >is_subtype_of s t<\/span> checks whether <span class=\"code\" >s<\/span> is a sub-type of <span class=\"code\" >t<\/span>. Sub-typing relation is based on\n\tnaming. Basically, <span class=\"code\" >s<\/span> is a sub-type of <span class=\"code\" >t<\/span> if (i) named attributes have either compatible types\n\t(ii) or some fields\/methods defined in <span class=\"code\" >t<\/span> do not appear in <span class=\"code\" >s<\/span>."}, "type": "Dyntype.t -> Dyntype.t -> bool", "params": [{"name": "", "type": "Dyntype.t"}, {"name": "", "type": "Dyntype.t"}]}}, {"value": {"name": "Dyntype.(<:)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|2642"}, "info": {"description": "<span class=\"code\" >s &lt;: t<\/span> is a short-cut for <span class=\"code\" >is_subtype_of s t<\/span>"}, "type": "Dyntype.t -> Dyntype.t -> bool", "params": [{"name": "", "type": "Dyntype.t"}, {"name": "", "type": "Dyntype.t"}]}}, {"value": {"name": "Dyntype.string_of_last_type_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|2764"}, "info": {"description": "Returns the more recent failing sub-type relation tested by <span class=\"code\" >(&lt;:)<\/span> or <span class=\"code\" >is_subtype_of<\/span>"}, "type": "unit -> string", "params": [{"name": "", "type": "unit"}]}}, {"comment": "<h2>Pretty-printing<\/h2>"}, {"value": {"name": "Dyntype.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|2888"}, "info": {"description": "<span class=\"code\" >to_string t<\/span> pretty-prints the type <span class=\"code\" >t<\/span>"}, "type": "Dyntype.t -> string", "params": [{"name": "", "type": "Dyntype.t"}]}}, {"exception": {"name": "Dyntype.Parse_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|2970"}, "info": {"description": "Exception that may be raised by <span class=\"code\" >!of_string<\/span>"}, "exception_args": ["string"]}}, {"value": {"name": "Dyntype.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/dyntype.mli|3145"}, "info": {"description": "<span class=\"code\" >of_string str<\/span> returns the type <span class=\"code\" >t<\/span> corresponding to the pretty-printed string <span class=\"code\" >str<\/span>. Raises <span class=\"code\" >!Parse_error<\/span>\n\tif is not a valid string"}, "type": "string -> Dyntype.t", "params": [{"name": "", "type": "string"}]}}], "dependencies": {"uses": [], "used_by": []}}}, "Cow": {"module": {"name": "Cow", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|0"}, "info": {"description": "Streaming XML IO.  <br><\/br>\n    A well-formed sequence of <a href=\"#TYPEsignal\" >signals<\/a> represents an\n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\" >XML<\/a> document tree traversal in\n    depth first order (this has nothing to do with XML\n    well-formedness). Input pulls a well-formed sequence of signals\n    from a data source and output pushes a well-formed sequence of\n    signals to a data destination. Functions are provided to easily \n    transform sequences of signals to\/from arborescent data structures.<br><\/br>\n    Consult the <a href=\"#io\" >features and limitations<\/a> and <a href=\"#ex\" >examples<\/a> \n    of use.<br><\/br>\n    <em>Version 1.0.2 - daniel.buenzl i@erratique.ch <\/em><br><\/br>\n    <b>References.<\/b><br><\/br>\n    Tim Bray. \n    <em><a href=\"http:\/\/www.xml.com\/axml\/axml.html\" >The annotated XML Specification<\/a><\/em>, \n    1998. <br><\/br>\n    Tim Bray et al. \n    <em><a href=\"http:\/\/www.w3.org\/TR\/xml-names11\" >Namespaces in XML 1.1 (2nd ed.)<\/a><\/em>,\n    2006.<br><\/br>\n    <h1>Basic types and values<\/h1>"}, "type": "sig  end", "module_structure": [{"module": {"name": "Cow.Xml", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"comment": "Streaming XML IO.  <br><\/br>\n    A well-formed sequence of <a href=\"#TYPEsignal\" >signals<\/a> represents an\n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\" >XML<\/a> document tree traversal in\n    depth first order (this has nothing to do with XML\n    well-formedness). Input pulls a well-formed sequence of signals\n    from a data source and output pushes a well-formed sequence of\n    signals to a data destination. Functions are provided to easily \n    transform sequences of signals to\/from arborescent data structures.<br><\/br>\n    Consult the <a href=\"#io\" >features and limitations<\/a> and <a href=\"#ex\" >examples<\/a> \n    of use.<br><\/br>\n    <em>Version 1.0.2 - daniel.buenzl i@erratique.ch <\/em><br><\/br>\n    <b>References.<\/b><br><\/br>\n    Tim Bray. \n    <em><a href=\"http:\/\/www.xml.com\/axml\/axml.html\" >The annotated XML Specification<\/a><\/em>, \n    1998. <br><\/br>\n    Tim Bray et al. \n    <em><a href=\"http:\/\/www.w3.org\/TR\/xml-names11\" >Namespaces in XML 1.1 (2nd ed.)<\/a><\/em>,\n    2006.<br><\/br>\n    <h1>Basic types and values<\/h1>"}, {"type": {"name": "Cow.Xml.encoding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|1439"}, "info": {"description": "The type for character encodings. For <span class=\"code\" >`UTF_16<\/span>, endianness is\n    determined from the \n    <a href=\"http:\/\/www.unicode.org\/unicode\/faq\/utf_bom.html#BOM\" >BOM<\/a>."}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `ISO_8859_1 | `US_ASCII | `UTF_16 | `UTF_16BE | `UTF_16LE | `UTF_8 ]"}}, {"type": {"name": "Cow.Xml.dtd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|1657"}, "info": {"description": "The type for the optional\n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#dt-doctype\" >DTD<\/a>."}, "params": [], "kind": {"type": "abstract"}, "manifest": "string option"}}, {"type": {"name": "Cow.Xml.name", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|1771"}, "info": {"description": "The type for attribute and element's\n    <a href=\"http:\/\/www.w3.org\/TR\/xml-names11\/#dt-expname\" >expanded names<\/a> \n    <span class=\"code\" >(uri,local)<\/span>. An empty <span class=\"code\" >uri<\/span> represents a name without a\n    namespace name, i.e. an unprefixed name \n    that is not under the scope of a default namespace."}, "params": [], "kind": {"type": "abstract"}, "manifest": "string * string"}}, {"type": {"name": "Cow.Xml.attribute", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|2082"}, "info": {"description": "The type for attributes. Name and attribute data."}, "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.name * string"}}, {"type": {"name": "Cow.Xml.tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|2165"}, "info": {"description": "The type for an element tag. Tag name and attribute list."}, "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.name * Cow.Xml.attribute list"}}, {"type": {"name": "Cow.Xml.signal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|2267"}, "info": {"description": "The type for signals. A <em>well-formed<\/em> sequence of signals belongs\n    to the language of the <span class=\"code\" >doc<\/span> grammar :\n    <span class=\"codepre\" >doc ::= `Dtd tree\ntree ::= `El_start child `El_end\nchild ::= `Data | tree | epsilon <\/span>\n    Input and output deal only with well-formed sequences or\n    exceptions are raised."}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Data of string\n  | `Dtd of Cow.Xml.dtd\n  | `El_end\n  | `El_start of Cow.Xml.tag\n  | `Raw of string ]"}}, {"value": {"name": "Cow.Xml.ns_xml", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|2649"}, "info": {"description": "Namespace name <a href=\"http:\/\/www.w3.org\/XML\/1998\/namespace\" >value<\/a> bound to the \n    reserved <span class=\"code\" >\"xml\"<\/span> prefix."}, "type": "string", "params": []}}, {"value": {"name": "Cow.Xml.ns_xmlns", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|2783"}, "info": {"description": "Namespace name <a href=\"http:\/\/www.w3.org\/2000\/xmlns\/\" >value<\/a> bound to the \n    reserved <span class=\"code\" >\"xmlns\"<\/span> prefix."}, "type": "string", "params": []}}, {"comment": "<h1>Input<\/h1>"}, {"type": {"name": "Cow.Xml.pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|2942"}, "info": {"description": "The type for input positions. Line and column number, both start\n    with 1."}, "params": [], "kind": {"type": "abstract"}, "manifest": "int * int"}}, {"type": {"name": "Cow.Xml.error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|3085"}, "info": {"description": "The type for input errors."}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Expected_char_seqs of string list * string\n  | `Expected_root_element\n  | `Illegal_char_ref of string\n  | `Illegal_char_seq of string\n  | `Malformed_char_stream\n  | `Max_buffer_size\n  | `Unexpected_eoi\n  | `Unknown_encoding of string\n  | `Unknown_entity_ref of string\n  | `Unknown_ns_prefix of string ]"}}, {"value": {"name": "Cow.Xml.error_message", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|3893"}, "info": {"description": "Converts the error to an english error message."}, "type": "Cow.Xml.error -> string", "params": [{"name": "", "type": "Cow.Xml.error"}]}}, {"exception": {"name": "Cow.Xml.Error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|3985"}, "info": {"description": "Raised on input errors."}, "exception_args": ["Cow.Xml.pos", "Cow.Xml.error"]}}, {"type": {"name": "Cow.Xml.source", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|4062"}, "info": {"description": "The type for input sources. For <span class=\"code\" >`String<\/span> starts reading at the\n    given integer position. For <span class=\"code\" >`Fun<\/span> the function must return the\n    next <em>byte<\/em> as an <span class=\"code\" >int<\/span> and raise <span class=\"code\" >End_of_file<\/span> if there is no\n    such byte."}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Fun of unit -> int | `String of int * string ]"}}, {"type": {"name": "Cow.Xml.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|4393"}, "info": {"description": "The type for input abstractions."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Cow.Xml.make_input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|4393"}, "info": {"description": "Returns a new input abstraction reading from the given source.\n    <ul><li><span class=\"code\" >enc<\/span>, character encoding of the document, <a href=\"#inenc\" > details<\/a>. \n       Defaults to <span class=\"code\" >None<\/span>.<\/li><li><span class=\"code\" >strip<\/span>, strips whitespace in character data, <a href=\"#inwspace\" > details<\/a>.\n       Defaults to <span class=\"code\" >false<\/span>.<\/li><li><span class=\"code\" >ns<\/span> is called to bind undeclared namespace prefixes,\n       <a href=\"#inns\" > details<\/a>. Default returns always <span class=\"code\" >None<\/span>.<\/li><li><span class=\"code\" >entity<\/span> is called to resolve non predefined entity references,\n       <a href=\"#inentity\" > details<\/a>. Default returns always <span class=\"code\" >None<\/span>.<\/li><\/ul>"}, "type": "?templates:bool ->\n  ?enc:Cow.Xml.encoding option ->\n  ?strip:bool ->\n  ?ns:(string -> string option) ->\n  ?entity:(string -> string option) -> Cow.Xml.source -> Cow.Xml.input", "params": [{"name": "templates", "type": "bool option"}, {"name": "enc", "type": "Cow.Xml.encoding option option"}, {"name": "strip", "type": "bool option"}, {"name": "ns", "type": "(string -> string option) option"}, {"name": "entity", "type": "(string -> string option) option"}, {"name": "", "type": "Cow.Xml.source"}]}}, {"value": {"name": "Cow.Xml.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|5106"}, "info": {"description": "Inputs a signal. Repeated invocation of the function with the same\n    input abstraction will generate a <a href=\"#TYPEsignal\" >well-formed<\/a> sequence\n    of signals or an <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error<\/span><\/a> is raised. Furthermore there will be no\n    two consecutive <span class=\"code\" >`Data<\/span> signals in the sequence and their string\n    is always non empty. After a well-formed sequence was input another may \n    be input, see <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi<\/span><\/a> and <a href=\"#iseq\" >details<\/a>.<br><\/br>\n    <b>Raises<\/b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error<\/span><\/a> on input errors."}, "type": "Cow.Xml.input -> Cow.Xml.signal", "params": [{"name": "", "type": "Cow.Xml.input"}]}}, {"value": {"name": "Cow.Xml.input_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|5590"}, "info": {"description": "If the next signal is a :\n    <ul><li><span class=\"code\" >`Data<\/span> signal, inputs it and invokes <span class=\"code\" >data<\/span> with the character data.<\/li><li><span class=\"code\" >`El_start<\/span> signal, inputs the sequence of signals until its \n       matching <span class=\"code\" >`El_end<\/span> and invokes <span class=\"code\" >el<\/span> and <span class=\"code\" >data<\/span> as follows\n    <ul><li><span class=\"code\" >el<\/span>, is called on each <span class=\"code\" >`El_end<\/span> signals with the corresponding \n      <span class=\"code\" >`El_start<\/span> tag and the result of the callback invocation for the \n      element's children.<\/li><li><span class=\"code\" >data<\/span>, is called on each <span class=\"code\" >`Data<\/span> signals with the character data. \n      This function won't be called twice consecutively or with the empty \n      string.<\/li><\/ul><\/li><li>Other signals, raises <span class=\"code\" >Invalid_argument<\/span>.<\/li><\/ul><br><\/br>\n    <b>Raises<\/b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error<\/span><\/a> on input errors and <span class=\"code\" >Invalid_argument<\/span>\n      if the next signal is not <span class=\"code\" >`El_start<\/span> or <span class=\"code\" >`Data<\/span>."}, "type": "el:(Cow.Xml.tag -> 'a list -> 'a) ->\n  data:(string -> 'a) -> Cow.Xml.input -> 'a", "params": [{"name": "el", "type": "Cow.Xml.tag -> 'a list -> 'a"}, {"name": "data", "type": "string -> 'a"}, {"name": "", "type": "Cow.Xml.input"}]}}, {"value": {"name": "Cow.Xml.input_doc_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|6463"}, "info": {"description": "Same as <a href=\"{value|Cow.Xml.input_tree}\" ><span class=\"code\" >Cow.Xml.input_tree<\/span><\/a> but reads a complete <a href=\"#TYPEsignal\" >well-formed<\/a>  \n    sequence of signals. <br><\/br>\n    <b>Raises<\/b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error<\/span><\/a> on input errors and <span class=\"code\" >Invalid_argument<\/span>\n     if the next signal is not <span class=\"code\" >`Dtd<\/span>."}, "type": "el:(Cow.Xml.tag -> 'a list -> 'a) ->\n  data:(string -> 'a) -> Cow.Xml.input -> Cow.Xml.dtd * 'a", "params": [{"name": "el", "type": "Cow.Xml.tag -> 'a list -> 'a"}, {"name": "data", "type": "string -> 'a"}, {"name": "", "type": "Cow.Xml.input"}]}}, {"value": {"name": "Cow.Xml.peek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|6792"}, "info": {"description": "Same as <a href=\"{value|Cow.Xml.input}\" ><span class=\"code\" >Cow.Xml.input<\/span><\/a> but doesn't remove the signal from the sequence. <br><\/br>\n    <b>Raises<\/b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error<\/span><\/a> on input errors."}, "type": "Cow.Xml.input -> Cow.Xml.signal", "params": [{"name": "", "type": "Cow.Xml.input"}]}}, {"value": {"name": "Cow.Xml.eoi", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|6936"}, "info": {"description": "Returns <span class=\"code\" >true<\/span> if the end of input is reached. See <a href=\"#iseq\" >details<\/a>.<br><\/br>\n    <b>Raises<\/b> <a href=\"{exception|Cow.Xml.Error}\" ><span class=\"code\" >Cow.Xml.Error<\/span><\/a> on input errors."}, "type": "Cow.Xml.input -> bool", "params": [{"name": "", "type": "Cow.Xml.input"}]}}, {"value": {"name": "Cow.Xml.pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|7081"}, "info": {"description": "Current position in the input abstraction."}, "type": "Cow.Xml.input -> Cow.Xml.pos", "params": [{"name": "", "type": "Cow.Xml.input"}]}}, {"comment": "<h1>Output<\/h1>"}, {"type": {"name": "Cow.Xml.frag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|7190"}, "info": {"description": "The type for deconstructing data structures of type <span class=\"code\" >'a<\/span>."}, "params": [{"covariant": true, "contravariant": false, "type": "'a"}], "kind": {"type": "abstract"}, "manifest": "[ `Data of string | `El of Cow.Xml.tag * 'a list ]"}}, {"type": {"name": "Cow.Xml.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|7308"}, "info": {"description": "The type for XML fragments"}, "params": [], "kind": {"type": "abstract"}, "manifest": "('a Cow.Xml.frag as 'a) Cow.Xml.frag list"}}, {"type": {"name": "Cow.Xml.dest", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|7383"}, "info": {"description": "The type for output destinations. For <span class=\"code\" >`Buffer<\/span>, the buffer won't\n    be cleared. For <span class=\"code\" >`Fun<\/span> the function is called with the output <em>    bytes<\/em> as <span class=\"code\" >int<\/span>s."}, "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Buffer of Buffer.t | `Fun of int -> unit ]"}}, {"type": {"name": "Cow.Xml.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|7665"}, "info": {"description": "The type for output abstractions."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Cow.Xml.make_output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|7665"}, "info": {"description": "Returns a new output abstraction writing to the given destination.\n    <ul><li><span class=\"code\" >nl<\/span>, if <span class=\"code\" >true<\/span> a newline is output when the root's element <span class=\"code\" >`El_end<\/span> \n     signal is output.\n    Defaults to <span class=\"code\" >false<\/span>.<\/li><li><span class=\"code\" >indent<\/span>, identation behaviour, see <a href=\"#outindent\" > details<\/a>. Defaults to\n      <span class=\"code\" >None<\/span>.<\/li><li><span class=\"code\" >ns_prefix<\/span>, undeclared namespace prefix bindings, \n       see <a href=\"#outns\" >details<\/a>. Default returns always <span class=\"code\" >None<\/span>.<\/li><\/ul>"}, "type": "?nl:bool ->\n  ?indent:int option ->\n  ?ns_prefix:(string -> string option) -> Cow.Xml.dest -> Cow.Xml.output", "params": [{"name": "nl", "type": "bool option"}, {"name": "indent", "type": "int option option"}, {"name": "ns_prefix", "type": "(string -> string option) option"}, {"name": "", "type": "Cow.Xml.dest"}]}}, {"value": {"name": "Cow.Xml.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|8221"}, "info": {"description": "Outputs a signal. After a well-formed sequence of signals was \n    output a new well-formed sequence can be output.<br><\/br>\n    <b>Raises<\/b> <span class=\"code\" >Invalid_argument<\/span> if the resulting signal sequence on\n    the output abstraction is not <a href=\"#TYPEsignal\" >well-formed<\/a> or if a\n    namespace name could not be bound to a prefix."}, "type": "Cow.Xml.output -> Cow.Xml.signal -> unit", "params": [{"name": "", "type": "Cow.Xml.output"}, {"name": "", "type": "Cow.Xml.signal"}]}}, {"value": {"name": "Cow.Xml.output_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|8575"}, "info": {"description": "Outputs signals corresponding to a value by recursively\n    applying the given value deconstructor.<br><\/br>\n    <b>Raises<\/b> see <a href=\"{value|Cow.Xml.output}\" ><span class=\"code\" >Cow.Xml.output<\/span><\/a>."}, "type": "('a -> 'a Cow.Xml.frag) -> Cow.Xml.output -> 'a -> unit", "params": [{"name": "", "type": "'a -> 'a Cow.Xml.frag"}, {"name": "", "type": "Cow.Xml.output"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Cow.Xml.output_doc_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|8772"}, "info": {"description": "Same as <a href=\"{value|Cow.Xml.output_tree}\" ><span class=\"code\" >Cow.Xml.output_tree<\/span><\/a> but outputs a complete <a href=\"#TYPEsignal\" >well-formed<\/a> \n    sequence of signals.<br><\/br>\n    <b>Raises<\/b> see <a href=\"{value|Cow.Xml.output}\" ><span class=\"code\" >Cow.Xml.output<\/span><\/a>."}, "type": "('a -> 'a Cow.Xml.frag) -> Cow.Xml.output -> Cow.Xml.dtd * 'a -> unit", "params": [{"name": "", "type": "'a -> 'a Cow.Xml.frag"}, {"name": "", "type": "Cow.Xml.output"}, {"tuple": {"type": "Cow.Xml.dtd * 'a", "contents": [{"name": "", "type": "Cow.Xml.dtd"}, {"name": "", "type": "'a"}]}}]}}, {"comment": "<h1>Functorial interface<\/h1> <br><\/br>\n    <a href=\"{module|Cow.Xml.Make}\" ><span class=\"code\" >Cow.Xml.Make<\/span><\/a> allows client to specify types for strings and internal\n    buffers. Among other things this can be used to perform\n    hash-consing or to process the character stream, e.g. to normalize\n    unicode characters or to convert to a custom encoding."}, {"type": {"name": "Cow.Xml.std_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9299"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"type": {"name": "Cow.Xml.std_buffer", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9324"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Buffer.t"}}, {"module_type": {"name": "Cow.Xml.XMLString", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9370"}, "info": {"description": "Input signature for strings."}, "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Xml.XMLString.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9444"}, "info": {"description": "The type for strings."}, "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Cow.Xml.XMLString.empty", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9444"}, "info": {"description": "The empty string."}, "type": "Cow.Xml.XMLString.t", "params": []}}, {"value": {"name": "Cow.Xml.XMLString.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9489"}, "info": {"description": "Returns the length of the string."}, "type": "Cow.Xml.XMLString.t -> int", "params": [{"name": "", "type": "Cow.Xml.XMLString.t"}]}}, {"value": {"name": "Cow.Xml.XMLString.append", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9558"}, "info": {"description": "Concatenates two strings."}, "type": "Cow.Xml.XMLString.t -> Cow.Xml.XMLString.t -> Cow.Xml.XMLString.t", "params": [{"name": "", "type": "Cow.Xml.XMLString.t"}, {"name": "", "type": "Cow.Xml.XMLString.t"}]}}, {"value": {"name": "Cow.Xml.XMLString.lowercase", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9621"}, "info": {"description": "New string with uppercase letter translated\n      to lowercase (correctness is only needed for ASCII\n      <a href=\"http:\/\/www.unicode.org\/glossary\/#code_point\" >code point<\/a>)."}, "type": "Cow.Xml.XMLString.t -> Cow.Xml.XMLString.t", "params": [{"name": "", "type": "Cow.Xml.XMLString.t"}]}}, {"value": {"name": "Cow.Xml.XMLString.iter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9824"}, "info": {"description": "Iterates over the unicode \n      <a href=\"http:\/\/www.unicode.org\/glossary\/#code_point\" >code point<\/a>\n      of the given string."}, "type": "(int -> unit) -> Cow.Xml.XMLString.t -> unit", "params": [{"name": "", "type": "int -> unit"}, {"name": "", "type": "Cow.Xml.XMLString.t"}]}}, {"value": {"name": "Cow.Xml.XMLString.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|9993"}, "info": {"description": "String from an OCaml string."}, "type": "Cow.Xml.std_string -> Cow.Xml.XMLString.t", "params": [{"name": "", "type": "Cow.Xml.std_string"}]}}, {"value": {"name": "Cow.Xml.XMLString.to_utf_8", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10066"}, "info": {"description": "<span class=\"code\" >to_utf_8 f v s<\/span>, is <span class=\"code\" >f (... (f (f v s1) s2) ...) sn<\/span>. Where the\n      concatenation of <span class=\"code\" >s1<\/span>, <span class=\"code\" >s2<\/span>, ... <span class=\"code\" >sn<\/span> is <span class=\"code\" >s<\/span> as an UTF-8 stream."}, "type": "('a -> Cow.Xml.std_string -> 'a) -> 'a -> Cow.Xml.XMLString.t -> 'a", "params": [{"name": "", "type": "'a -> Cow.Xml.std_string -> 'a"}, {"name": "", "type": "'a"}, {"name": "", "type": "Cow.Xml.XMLString.t"}]}}, {"value": {"name": "Cow.Xml.XMLString.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10271"}, "info": {"description": "String comparison. Binary comparison is sufficent."}, "type": "Cow.Xml.XMLString.t -> Cow.Xml.XMLString.t -> int", "params": [{"name": "", "type": "Cow.Xml.XMLString.t"}, {"name": "", "type": "Cow.Xml.XMLString.t"}]}}]}}, {"module_type": {"name": "Cow.Xml.XMLBuffer", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10409"}, "info": {"description": "Input signature for internal buffers."}, "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Xml.XMLBuffer.string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10487"}, "info": {"description": "The type for strings."}, "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Cow.Xml.XMLBuffer.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10529"}, "info": {"description": "The type for buffers."}, "params": [], "kind": {"type": "abstract"}}}, {"exception": {"name": "Cow.Xml.XMLBuffer.Full", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10529"}, "info": {"description": "Raised if the buffer cannot be grown."}}}, {"value": {"name": "Cow.Xml.XMLBuffer.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10597"}, "info": {"description": "Creates a buffer of the given size."}, "type": "int -> Cow.Xml.XMLBuffer.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Cow.Xml.XMLBuffer.add_uchar", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10667"}, "info": {"description": "Adds the given (guaranteed valid) unicode\n      <a href=\"http:\/\/www.unicode.org\/glossary\/#code_point\" >code point<\/a> to a\n      buffer. <br><\/br>\n      <b>Raises<\/b> <a href=\"{exception|Cow.Xml.XMLBuffer.Full}\" ><span class=\"code\" >Cow.Xml.XMLBuffer.Full<\/span><\/a> if the buffer cannot be grown."}, "type": "Cow.Xml.XMLBuffer.t -> int -> unit", "params": [{"name": "", "type": "Cow.Xml.XMLBuffer.t"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Cow.Xml.XMLBuffer.clear", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10896"}, "info": {"description": "Clears the buffer."}, "type": "Cow.Xml.XMLBuffer.t -> unit", "params": [{"name": "", "type": "Cow.Xml.XMLBuffer.t"}]}}, {"value": {"name": "Cow.Xml.XMLBuffer.contents", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|10949"}, "info": {"description": "Returns the buffer contents."}, "type": "Cow.Xml.XMLBuffer.t -> Cow.Xml.XMLBuffer.string", "params": [{"name": "", "type": "Cow.Xml.XMLBuffer.t"}]}}, {"value": {"name": "Cow.Xml.XMLBuffer.length", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11019"}, "info": {"description": "Returns the number of characters contained in the buffer."}, "type": "Cow.Xml.XMLBuffer.t -> int", "params": [{"name": "", "type": "Cow.Xml.XMLBuffer.t"}]}}]}}, {"module_type": {"name": "Cow.Xml.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11149"}, "info": {"description": "Output signature of <a href=\"{module|Cow.Xml.Make}\" ><span class=\"code\" >Cow.Xml.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"comment": "<h1>Basic types and values<\/h1>"}, {"type": {"name": "Cow.Xml.S.string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11230"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Cow.Xml.S.encoding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11246"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `ISO_8859_1 | `US_ASCII | `UTF_16 | `UTF_16BE | `UTF_16LE | `UTF_8 ]"}}, {"type": {"name": "Cow.Xml.S.dtd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11336"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.S.string option"}}, {"type": {"name": "Cow.Xml.S.name", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11364"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.S.string * Cow.Xml.S.string"}}, {"type": {"name": "Cow.Xml.S.attribute", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11400"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.S.name * Cow.Xml.S.string"}}, {"type": {"name": "Cow.Xml.S.tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11427"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.S.name * Cow.Xml.S.attribute list"}}, {"type": {"name": "Cow.Xml.S.signal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11465"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Data of Cow.Xml.S.string\n  | `Dtd of Cow.Xml.S.dtd\n  | `El_end\n  | `El_start of Cow.Xml.S.tag\n  | `Raw of Cow.Xml.S.string ]"}}, {"value": {"name": "Cow.Xml.S.ns_xml", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11547"}, "info": "", "type": "Cow.Xml.S.string", "params": []}}, {"value": {"name": "Cow.Xml.S.ns_xmlns", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11570"}, "info": "", "type": "Cow.Xml.S.string", "params": []}}, {"comment": "<h1>Input<\/h1>"}, {"type": {"name": "Cow.Xml.S.pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11634"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int * int"}}, {"type": {"name": "Cow.Xml.S.error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11660"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Expected_char_seqs of Cow.Xml.S.string list * Cow.Xml.S.string\n  | `Expected_root_element\n  | `Illegal_char_ref of Cow.Xml.S.string\n  | `Illegal_char_seq of Cow.Xml.S.string\n  | `Malformed_char_stream\n  | `Max_buffer_size\n  | `Unexpected_eoi\n  | `Unknown_encoding of Cow.Xml.S.string\n  | `Unknown_entity_ref of Cow.Xml.S.string\n  | `Unknown_ns_prefix of Cow.Xml.S.string ]"}}, {"exception": {"name": "Cow.Xml.S.Error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12008"}, "info": "", "exception_args": ["Cow.Xml.S.pos", "Cow.Xml.S.error"]}}, {"value": {"name": "Cow.Xml.S.error_message", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12041"}, "info": "", "type": "Cow.Xml.S.error -> Cow.Xml.S.string", "params": [{"name": "", "type": "Cow.Xml.S.error"}]}}, {"type": {"name": "Cow.Xml.S.source", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12094"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Fun of unit -> int | `String of int * Cow.Xml.std_string ]"}}, {"type": {"name": "Cow.Xml.S.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12174"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Cow.Xml.S.make_input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12174"}, "info": "", "type": "?templates:bool ->\n  ?enc:Cow.Xml.S.encoding option ->\n  ?strip:bool ->\n  ?ns:(Cow.Xml.S.string -> Cow.Xml.S.string option) ->\n  ?entity:(Cow.Xml.S.string -> Cow.Xml.S.string option) ->\n  Cow.Xml.S.source -> Cow.Xml.S.input", "params": [{"name": "templates", "type": "bool option"}, {"name": "enc", "type": "Cow.Xml.S.encoding option option"}, {"name": "strip", "type": "bool option"}, {"name": "ns", "type": "(Cow.Xml.S.string -> Cow.Xml.S.string option) option"}, {"name": "entity", "type": "(Cow.Xml.S.string -> Cow.Xml.S.string option) option"}, {"name": "", "type": "Cow.Xml.S.source"}]}}, {"value": {"name": "Cow.Xml.S.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12355"}, "info": "", "type": "Cow.Xml.S.input -> Cow.Xml.S.signal", "params": [{"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.input_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12386"}, "info": "", "type": "el:(Cow.Xml.S.tag -> 'a list -> 'a) ->\n  data:(Cow.Xml.S.string -> 'a) -> Cow.Xml.S.input -> 'a", "params": [{"name": "el", "type": "Cow.Xml.S.tag -> 'a list -> 'a"}, {"name": "data", "type": "Cow.Xml.S.string -> 'a"}, {"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.input_doc_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12491"}, "info": "", "type": "el:(Cow.Xml.S.tag -> 'a list -> 'a) ->\n  data:(Cow.Xml.S.string -> 'a) -> Cow.Xml.S.input -> Cow.Xml.S.dtd * 'a", "params": [{"name": "el", "type": "Cow.Xml.S.tag -> 'a list -> 'a"}, {"name": "data", "type": "Cow.Xml.S.string -> 'a"}, {"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.peek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12615"}, "info": "", "type": "Cow.Xml.S.input -> Cow.Xml.S.signal", "params": [{"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.eoi", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12644"}, "info": "", "type": "Cow.Xml.S.input -> bool", "params": [{"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12670"}, "info": "", "type": "Cow.Xml.S.input -> Cow.Xml.S.pos", "params": [{"name": "", "type": "Cow.Xml.S.input"}]}}, {"comment": "<h1>Output<\/h1>"}, {"type": {"name": "Cow.Xml.S.frag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12733"}, "info": "", "params": [{"covariant": true, "contravariant": false, "type": "'a"}], "kind": {"type": "abstract"}, "manifest": "[ `Data of Cow.Xml.S.string | `El of Cow.Xml.S.tag * 'a list ]"}}, {"type": {"name": "Cow.Xml.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12788"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "('a Cow.Xml.S.frag as 'a) Cow.Xml.S.frag list"}}, {"type": {"name": "Cow.Xml.S.dest", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12831"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Buffer of Cow.Xml.std_buffer | `Fun of int -> unit ]"}}, {"type": {"name": "Cow.Xml.S.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12903"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Cow.Xml.S.make_output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12903"}, "info": "", "type": "?nl:bool ->\n  ?indent:int option ->\n  ?ns_prefix:(Cow.Xml.S.string -> Cow.Xml.S.string option) ->\n  Cow.Xml.S.dest -> Cow.Xml.S.output", "params": [{"name": "nl", "type": "bool option"}, {"name": "indent", "type": "int option option"}, {"name": "ns_prefix", "type": "(Cow.Xml.S.string -> Cow.Xml.S.string option) option"}, {"name": "", "type": "Cow.Xml.S.dest"}]}}, {"value": {"name": "Cow.Xml.S.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|13035"}, "info": "", "type": "Cow.Xml.S.output -> Cow.Xml.S.signal -> unit", "params": [{"name": "", "type": "Cow.Xml.S.output"}, {"name": "", "type": "Cow.Xml.S.signal"}]}}, {"value": {"name": "Cow.Xml.S.output_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|13075"}, "info": "", "type": "('a -> 'a Cow.Xml.S.frag) -> Cow.Xml.S.output -> 'a -> unit", "params": [{"name": "", "type": "'a -> 'a Cow.Xml.S.frag"}, {"name": "", "type": "Cow.Xml.S.output"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Cow.Xml.S.output_doc_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|13135"}, "info": "", "type": "('a -> 'a Cow.Xml.S.frag) -> Cow.Xml.S.output -> Cow.Xml.S.dtd * 'a -> unit", "params": [{"name": "", "type": "'a -> 'a Cow.Xml.S.frag"}, {"name": "", "type": "Cow.Xml.S.output"}, {"tuple": {"type": "Cow.Xml.S.dtd * 'a", "contents": [{"name": "", "type": "Cow.Xml.S.dtd"}, {"name": "", "type": "'a"}]}}]}}]}}, {"module": {"name": "Cow.Xml.Make", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|13290"}, "info": {"description": "Functor building streaming XML IO with the given strings and buffers."}, "type": "functor (String : XMLString) -> functor (Buffer : sig  end) -> sig  end", "module_functor": {"parameter": {"name": "String", "module_alias": {"name": "Cow.Xml.XMLString"}}, "module_functor": {"parameter": {"name": "Buffer", "module_with": {"module_alias": {"name": "Cow.Xml.XMLBuffer"}, "with": " with type string = String.t"}}, "module_with": {"module_alias": {"name": "Cow.Xml.S", "module_type": {"name": "Cow.Xml.S", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11149"}, "info": {"description": "Output signature of <a href=\"{module|Cow.Xml.Make}\" ><span class=\"code\" >Cow.Xml.Make<\/span><\/a>."}, "type": "sig  end", "module_structure": [{"comment": "<h1>Basic types and values<\/h1>"}, {"type": {"name": "Cow.Xml.S.string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11230"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"type": {"name": "Cow.Xml.S.encoding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11246"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `ISO_8859_1 | `US_ASCII | `UTF_16 | `UTF_16BE | `UTF_16LE | `UTF_8 ]"}}, {"type": {"name": "Cow.Xml.S.dtd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11336"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.S.string option"}}, {"type": {"name": "Cow.Xml.S.name", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11364"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.S.string * Cow.Xml.S.string"}}, {"type": {"name": "Cow.Xml.S.attribute", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11400"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.S.name * Cow.Xml.S.string"}}, {"type": {"name": "Cow.Xml.S.tag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11427"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Xml.S.name * Cow.Xml.S.attribute list"}}, {"type": {"name": "Cow.Xml.S.signal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11465"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Data of Cow.Xml.S.string\n  | `Dtd of Cow.Xml.S.dtd\n  | `El_end\n  | `El_start of Cow.Xml.S.tag\n  | `Raw of Cow.Xml.S.string ]"}}, {"value": {"name": "Cow.Xml.S.ns_xml", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11547"}, "info": "", "type": "Cow.Xml.S.string", "params": []}}, {"value": {"name": "Cow.Xml.S.ns_xmlns", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11570"}, "info": "", "type": "Cow.Xml.S.string", "params": []}}, {"comment": "<h1>Input<\/h1>"}, {"type": {"name": "Cow.Xml.S.pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11634"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int * int"}}, {"type": {"name": "Cow.Xml.S.error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|11660"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Expected_char_seqs of Cow.Xml.S.string list * Cow.Xml.S.string\n  | `Expected_root_element\n  | `Illegal_char_ref of Cow.Xml.S.string\n  | `Illegal_char_seq of Cow.Xml.S.string\n  | `Malformed_char_stream\n  | `Max_buffer_size\n  | `Unexpected_eoi\n  | `Unknown_encoding of Cow.Xml.S.string\n  | `Unknown_entity_ref of Cow.Xml.S.string\n  | `Unknown_ns_prefix of Cow.Xml.S.string ]"}}, {"exception": {"name": "Cow.Xml.S.Error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12008"}, "info": "", "exception_args": ["Cow.Xml.S.pos", "Cow.Xml.S.error"]}}, {"value": {"name": "Cow.Xml.S.error_message", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12041"}, "info": "", "type": "Cow.Xml.S.error -> Cow.Xml.S.string", "params": [{"name": "", "type": "Cow.Xml.S.error"}]}}, {"type": {"name": "Cow.Xml.S.source", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12094"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Fun of unit -> int | `String of int * Cow.Xml.std_string ]"}}, {"type": {"name": "Cow.Xml.S.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12174"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Cow.Xml.S.make_input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12174"}, "info": "", "type": "?templates:bool ->\n  ?enc:Cow.Xml.S.encoding option ->\n  ?strip:bool ->\n  ?ns:(Cow.Xml.S.string -> Cow.Xml.S.string option) ->\n  ?entity:(Cow.Xml.S.string -> Cow.Xml.S.string option) ->\n  Cow.Xml.S.source -> Cow.Xml.S.input", "params": [{"name": "templates", "type": "bool option"}, {"name": "enc", "type": "Cow.Xml.S.encoding option option"}, {"name": "strip", "type": "bool option"}, {"name": "ns", "type": "(Cow.Xml.S.string -> Cow.Xml.S.string option) option"}, {"name": "entity", "type": "(Cow.Xml.S.string -> Cow.Xml.S.string option) option"}, {"name": "", "type": "Cow.Xml.S.source"}]}}, {"value": {"name": "Cow.Xml.S.input", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12355"}, "info": "", "type": "Cow.Xml.S.input -> Cow.Xml.S.signal", "params": [{"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.input_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12386"}, "info": "", "type": "el:(Cow.Xml.S.tag -> 'a list -> 'a) ->\n  data:(Cow.Xml.S.string -> 'a) -> Cow.Xml.S.input -> 'a", "params": [{"name": "el", "type": "Cow.Xml.S.tag -> 'a list -> 'a"}, {"name": "data", "type": "Cow.Xml.S.string -> 'a"}, {"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.input_doc_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12491"}, "info": "", "type": "el:(Cow.Xml.S.tag -> 'a list -> 'a) ->\n  data:(Cow.Xml.S.string -> 'a) -> Cow.Xml.S.input -> Cow.Xml.S.dtd * 'a", "params": [{"name": "el", "type": "Cow.Xml.S.tag -> 'a list -> 'a"}, {"name": "data", "type": "Cow.Xml.S.string -> 'a"}, {"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.peek", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12615"}, "info": "", "type": "Cow.Xml.S.input -> Cow.Xml.S.signal", "params": [{"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.eoi", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12644"}, "info": "", "type": "Cow.Xml.S.input -> bool", "params": [{"name": "", "type": "Cow.Xml.S.input"}]}}, {"value": {"name": "Cow.Xml.S.pos", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12670"}, "info": "", "type": "Cow.Xml.S.input -> Cow.Xml.S.pos", "params": [{"name": "", "type": "Cow.Xml.S.input"}]}}, {"comment": "<h1>Output<\/h1>"}, {"type": {"name": "Cow.Xml.S.frag", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12733"}, "info": "", "params": [{"covariant": true, "contravariant": false, "type": "'a"}], "kind": {"type": "abstract"}, "manifest": "[ `Data of Cow.Xml.S.string | `El of Cow.Xml.S.tag * 'a list ]"}}, {"type": {"name": "Cow.Xml.S.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12788"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "('a Cow.Xml.S.frag as 'a) Cow.Xml.S.frag list"}}, {"type": {"name": "Cow.Xml.S.dest", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12831"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "[ `Buffer of Cow.Xml.std_buffer | `Fun of int -> unit ]"}}, {"type": {"name": "Cow.Xml.S.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12903"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Cow.Xml.S.make_output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|12903"}, "info": "", "type": "?nl:bool ->\n  ?indent:int option ->\n  ?ns_prefix:(Cow.Xml.S.string -> Cow.Xml.S.string option) ->\n  Cow.Xml.S.dest -> Cow.Xml.S.output", "params": [{"name": "nl", "type": "bool option"}, {"name": "indent", "type": "int option option"}, {"name": "ns_prefix", "type": "(Cow.Xml.S.string -> Cow.Xml.S.string option) option"}, {"name": "", "type": "Cow.Xml.S.dest"}]}}, {"value": {"name": "Cow.Xml.S.output", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|13035"}, "info": "", "type": "Cow.Xml.S.output -> Cow.Xml.S.signal -> unit", "params": [{"name": "", "type": "Cow.Xml.S.output"}, {"name": "", "type": "Cow.Xml.S.signal"}]}}, {"value": {"name": "Cow.Xml.S.output_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|13075"}, "info": "", "type": "('a -> 'a Cow.Xml.S.frag) -> Cow.Xml.S.output -> 'a -> unit", "params": [{"name": "", "type": "'a -> 'a Cow.Xml.S.frag"}, {"name": "", "type": "Cow.Xml.S.output"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Cow.Xml.S.output_doc_tree", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|13135"}, "info": "", "type": "('a -> 'a Cow.Xml.S.frag) -> Cow.Xml.S.output -> Cow.Xml.S.dtd * 'a -> unit", "params": [{"name": "", "type": "'a -> 'a Cow.Xml.S.frag"}, {"name": "", "type": "Cow.Xml.S.output"}, {"tuple": {"type": "Cow.Xml.S.dtd * 'a", "contents": [{"name": "", "type": "Cow.Xml.S.dtd"}, {"name": "", "type": "'a"}]}}]}}]}}, "with": "\nwith type string = String.t"}}}, "dependencies": {"uses": []}}}, {"comment": "<h1>Features and limitations<\/h1><br><\/br>\n    The module assumes strings are immutable, thus strings\n    the client gives or receives <em>during<\/em> the input and output process \n    must not be modified.\n    <h2>Input<\/h2>\n    <h3>Encoding<\/h3>    <br><\/br>\n    The parser supports ASCII, US-ASCII, \n    <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc3629.html\" > UTF-8<\/a>,\n    <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2781.html\" > UTF-16<\/a>,\n    <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2781.html\" > UTF-16LE<\/a>,\n    <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2781.html\" > UTF-16BE<\/a> and\n    <a href=\"http:\/\/anubis.dkuug.dk\/JTC1\/SC2\/WG3\/docs\/n411.pdf\" >ISO-8559-1<\/a> \n    (Latin-1) encoded documents. But strings returned by\n    the library are <b>always<\/b> UTF-8 encoded (unless you use the functor). <br><\/br>\n    The encoding can be specified explicitly using the optional\n    argument <span class=\"code\" >enc<\/span>. Otherwise the parser uses UTF-16 or UTF-8 if there is a\n    <a href=\"http:\/\/www.unicode.org\/unicode\/faq\/utf_bom.html#BOM\" >BOM<\/a> at the\n    beginning of the document. If there is no BOM it uses the encoding\n    specified in the <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#NT-XMLDecl\" > XML\n    declaration<\/a>. Finally, if there is no XML declaration UTF-8 is assumed.\n    <h3>White space handling<\/h3><br><\/br>\n    The parser performs\n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#AVNormalize\" >attribute data\n    normalization<\/a> on <em>every<\/em> attribute data.  This means that\n    attribute data does not have leading and trailling white space and that \n    any white space is collapsed and transformed to a single space \n    character (<span class=\"code\" >U+0020<\/span>).<br><\/br>\n    White space handling of character data depends on the <span class=\"code\" >strip<\/span>\n    argument. If <span class=\"code\" >strip<\/span> is <span class=\"code\" >true<\/span>, character data is treated like\n    attribute data, white space before and after elements is removed\n    and any white space is collapsed and transformed to a single\n    space character (<span class=\"code\" >U+0020<\/span>), except if the data is under the scope of a <em>    xml:space<\/em> attribute whose value is <em>preserve<\/em>.  If <span class=\"code\" >strip<\/span> is\n    <span class=\"code\" >false<\/span> all white space data is preserved as present in the\n    document (however all kinds of\n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#sec-line-ends\" >line ends<\/a> are\n    translated to the newline character (<span class=\"code\" >U+000A<\/span>).  <h3>Namespaces<\/h3><br><\/br>\n    Xmlm's <a href=\"#TYPEname\" >names<\/a> are\n    <a href=\"http:\/\/www.w3.org\/TR\/xml-names11\/#dt-expname\" >expanded names<\/a>.\n    The parser automatically handles the document's namespace\n    declarations.  Undeclared namespace prefixes can be bound via the\n    callback <span class=\"code\" >ns<\/span>, which must return a namespace name. If <span class=\"code\" >ns<\/span> returns\n    <span class=\"code\" >None<\/span> an <span class=\"code\" >`Unknown_ns_prefix<\/span> error is raised.<br><\/br>\n    Attributes used for namespace declarations are preserved by the\n    parser. They are in the <a href=\"{value|Cow.Xml.ns_xmlns}\" ><span class=\"code\" >Cow.Xml.ns_xmlns<\/span><\/a> namespace. Default namespace\n    declarations made with <i>xmlns<\/i> have the attribute name\n    <span class=\"code\" >(Xmlm.ns_xmlns, \"xmlns\")<\/span>. Prefix declarations have the prefix as\n    the local name, for example <i>xmlns:ex<\/i> results in the attribute name\n    <span class=\"code\" >(Xmlm.ns_xmlns, \"ex\")<\/span>.<br><\/br>\n    Regarding constraints on the usage of the <i>xml<\/i> and <i>xmlns<\/i>\n    prefixes by documents, the parser does not report errors on violations \n    of the <i>must<\/i> constraints listed in\n    <a href=\"http:\/\/www.w3.org\/TR\/xml-names11\/#xmlReserved\" >this paragraph<\/a>. \n    <h3>Character and entity references<\/h3><br><\/br>\n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#dt-charref\" >Character references<\/a>\n    and <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#sec-predefined-ent\" >predefined\n    entities<\/a> are automatically resolved. Other entity references can\n    be resolved by the callback <span class=\"code\" >entity<\/span>, which must return an UTF-8\n    (unless you use the functor) string corresponding to the\n    replacement character data.  The replacement data is <em>not<\/em>\n    analysed for further references, it is added to the data as such\n    modulo white space stripping. If <span class=\"code\" >entity<\/span> returns <span class=\"code\" >None<\/span> the error\n    <span class=\"code\" >`Unknown_entity_ref<\/span> is returned.    \n    <h3>Sequences of documents<\/h3><br><\/br>\n    When a well-formed sequence of signals is input, no data is consumed beyond\n    the closing <span class=\"code\" >'&gt;'<\/span> of the document's root element. <br><\/br>\n    If you want to parse a document as\n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#NT-document\" >defined<\/a> in the XML\n    specification, call <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi<\/span><\/a> after a well-formed sequence of\n    signals, it must return <span class=\"code\" >true<\/span>. If you expect another document on\n    the same input abstraction a new well-formed sequence of signals\n    can be <a href=\"{value|Cow.Xml.input}\" ><span class=\"code\" >Cow.Xml.input<\/span><\/a>. Use <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi<\/span><\/a> to check if a document follows (this\n    may consume data).<br><\/br>\n    Invoking <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi<\/span><\/a> after a well-formed sequence of signals skips\n    whitespaces, comments and processing instructions until it gets to\n    either an <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#NT-XMLDecl\" > XML\n    declaration<\/a> or a <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#dt-doctype\" >DTD<\/a>\n    or the start of a new element or the end of input (in which case\n    <a href=\"{value|Cow.Xml.eoi}\" ><span class=\"code\" >Cow.Xml.eoi<\/span><\/a> returns <span class=\"code\" >true<\/span>).  If there is a new document but there is no\n    XML declaration or the declaration specifies UTF-16, the same\n    encoding as for the previous document is used.<br><\/br>\n    <h3>Miscellaneous<\/h3>\n    <ul><li>Parses the more liberal and simpler XML 1.1 \n    <a href=\"http:\/\/www.w3.org\/TR\/xml11\/#NT-Name\" >Name<\/a> definition (minus <span class=\"code\" >':'<\/span> because\n    of namespaces).<\/li><li>The <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#dt-doctype\" >DTD<\/a> is parsed\n      roughly (no guarantee it is well formed) and its information is ignored.<\/li><li>The parser drops \n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#dt-comment\" >comments<\/a>, \n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#dt-pi\" >processing instructions<\/a>, and \n    <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#sec-rmd\" >standalone declaration<\/a>.<\/li><li>Element attributes are not checked for uniqueness.<\/li><li>Attribute and character data chunks are limited by \n       <span class=\"code\" >Sys.max_string_length<\/span> (unless you use the functor). \n       The error <span class=\"code\" >`Max_buffer_size<\/span> is raised if the limit is hit.<\/li><li>Tail recursive.<\/li><li>Non validating.<\/li><\/ul><br><\/br>\n    <h2>Output<\/h2> \n    <h3>Encoding<\/h3> <br><\/br>\n    Outputs only <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc3629.html\" > UTF-8<\/a>\n    encoded documents (even if you use the functor).  Strings given to\n    output functions <b>must be<\/b> UTF-8 encoded (unless you use the\n    functor, but you need to provide a translation), no checks are\n    performed.  <h3>Namespaces<\/h3><br><\/br>\n    Xmlm's <a href=\"#TYPEname\" >names<\/a> are\n    <a href=\"http:\/\/www.w3.org\/TR\/xml-names11\/#dt-expname\" >expanded names<\/a>.\n    Expanded names are automatically converted to\n    <a href=\"http:\/\/www.w3.org\/TR\/xml-names11\/#dt-qualname\" >qualified\n    names<\/a> by the output abstraction. There is no particular api to specify \n    prefixes and default namespaces, \n    the actual result depends solely on the output\n    of attributes belonging to the <a href=\"{value|Cow.Xml.ns_xmlns}\" ><span class=\"code\" >Cow.Xml.ns_xmlns<\/span><\/a> namespace. For example to set \n    the default namespace of an element to <i>http:\/\/example.org\/myns<\/i>, \n    use the following attribute :\n    <span class=\"codepre\" >(* xmlns='http:\/\/example.org\/myns' *)\nlet default_ns = (Xmlm.ns_xmlns, \"xmlns\"), \"http:\/\/example.org\/myns\"<\/span>\n    To bind the prefix <span class=\"code\" >\"ex\"<\/span> to <i>http:\/\/example.org\/ex<\/i>, use the \n    following attribute :\n    <span class=\"codepre\" >(* xmlns:ex='http:\/\/example.org\/ex' *)\nlet ex_ns = (Xmlm.ns_xmlns, \"ex\"), \"http:\/\/example.org\/ex\"<\/span>\n    Note that outputing input signals without\n    touching namespace declaration attributes will preserve existing\n    prefixes and bindings provided the same namespace name is not\n    bound to different prefixes in a given context.<br><\/br>\n    The callback <span class=\"code\" >ns_prefix<\/span> of an output abstraction can be used to\n    give a prefix to a namespace name lacking a prefix binding in the\n    current output scope. Given a namespace name the function must return \n    the prefix to use. Note that this\n    will <b>not<\/b> add any namespace declaration attribute to the\n    output.  If the function returns <span class=\"code\" >None<\/span>, <a href=\"{value|Cow.Xml.output}\" ><span class=\"code\" >Cow.Xml.output<\/span><\/a> will raise\n    <span class=\"code\" >Invalid_argument<\/span>.  The default function returns always <span class=\"code\" >None<\/span>.\n    <h3>Indentation<\/h3><br><\/br>\n    Output can be indented by specifying the <span class=\"code\" >indent<\/span> argument when an\n       output abstraction is created. If <span class=\"code\" >indent<\/span> is <span class=\"code\" >None<\/span> (default)\n       signal output does not introduce any extra white space.  If\n       <span class=\"code\" >ident<\/span> is <span class=\"code\" >Some c<\/span>, each <a href=\"{type|Cow.Xml.signal}\" ><span class=\"code\" >Cow.Xml.signal<\/span><\/a> is output on its own line\n       (for empty elements <span class=\"code\" >`El_start<\/span> and <span class=\"code\" >`El_end<\/span> are collapsed on a single\n       line) and nested elements are indented with <span class=\"code\" >c<\/span> space\n       characters.\n    <h3>Sequences of documents<\/h3> <br><\/br>\n    After a well-formed sequence of signals was output, the output\n    abstraction can be reused to output a new well-formed sequence of\n    signals.<br><\/br>\n    <h3>Miscellaneous<\/h3>\n    <ul><li>In attribute and character data you provide, markup \n       delimiters <span class=\"code\" >'&lt;'<\/span>,<span class=\"code\" >'&gt;'<\/span>,<span class=\"code\" >'&amp;'<\/span>, and <span class=\"code\" >'\\\"'<\/span> are \n        automatically escaped to \n        <a href=\"http:\/\/www.w3.org\/TR\/REC-xml\/#sec-predefined-ent\" >predefined\n        entities<\/a>.<\/li><li>No checks are peformed on the prefix and local part of output\n      names to verify they are\n      <a href=\"http:\/\/www.w3.org\/TR\/xml-names11\/#NT-NCName\" >NCName<\/a>s.\n      For example using the tag name <span class=\"code\" >(\"\",\"dip d\")<\/span> will produce \n      a non well-formed document because of the space character.<\/li><li>Tail recursive.<\/li><\/ul><br><\/br>\n    <h2>Tips<\/h2> \n    <ul><li>The best options to do an input\/output round trip\n       and preserve as much information as possible is to \n       input with <span class=\"code\" >strip = false<\/span> and output with <span class=\"code\" >indent = None<\/span>.<\/li><li>Complete whitespace control on output is achieved \n       with <span class=\"code\" >indent = None<\/span> and suitable <span class=\"code\" >`Data<\/span> signals<\/li><\/ul>"}, {"comment": "<h1>Examples<\/h1> <br><\/br>\n    <h2>Sequential processing<\/h2>    <br><\/br>\n    Sequential processing has the advantage that you don't need to get\n    the whole document tree in memory to process it.<br><\/br>\n    The following function reads a <em>single<\/em> document on an\n    input channel and outputs it.\n<span class=\"codepre\" >let id ic oc = \n  let i = Xmlm.make_input (`Channel ic) in \n  let o = Xmlm.make_output (`Channel oc) in \n  let rec pull i o depth = \n    Xmlm.output o (Xmlm.peek i);\n    match Xmlm.input i with \n    | `El_start _ -&gt; pull i o (depth + 1)\n    | `El_end -&gt; if depth = 1 then () else pull i o (depth - 1)\n    | `Data _ -&gt; pull i o depth \n    | `Dtd _ -&gt; assert false\n  in\n  Xmlm.output o (Xmlm.input i); (* `Dtd *)\n  pull i o 0;\n  if not (Xmlm.eoi i) then invalid_arg \"document not well-formed\"<\/span>\n    The following function reads a <em>sequence<\/em> of documents on an\n    input channel and outputs it.\n<span class=\"codepre\" >let id_seq ic oc = \n  let i = Xmlm.make_input (`Channel ic) in \n  let o = Xmlm.make_output ~nl:true (`Channel oc) in \n  while not (Xmlm.eoi i) do Xmlm.output o (Xmlm.input i) done<\/span>\n    The following function reads a <em>sequence<\/em> of documents on the \n    input channel. In each document's tree it prunes non root elements\n    whose name belongs to <span class=\"code\" >prune_list<\/span>.\n<span class=\"codepre\" >let prune_docs prune_list ic oc = \n  let i = Xmlm.make_input (`Channel ic) in\n  let o = Xmlm.make_output ~nl:true (`Channel oc) in\n  let copy i o = Xmlm.output o (Xmlm.input i) in\n  let prune (name, _) = List.mem name prune_list in\n  let rec process i o d = \n    let rec skip i d = match Xmlm.input i with\n    | `El_start _ -&gt; skip i (d + 1)\n    | `El_end -&gt; if d = 1 then () else skip i (d - 1)\n    | s -&gt; skip i d\n    in\n    match Xmlm.peek i with \n    | `El_start tag when prune tag -&gt; skip i 0; process i o d\n    | `El_start _ -&gt; copy i o; process i o (d + 1)\n    | `El_end -&gt; copy i o; if d = 0 then () else process i o (d - 1)\n    | `Data _ -&gt; copy i o; process i o d\n    | `Dtd _ -&gt; assert false\n  in\n  let rec docs i o = \n    copy i o; (* `Dtd *)\n    copy i o; (* root start *)\n    process i o 0;\n    if Xmlm.eoi i then () else docs i o\n  in\n  docs i o<\/span><br><\/br>\n    <h2>Tree processing<\/h2> <br><\/br>\n    A document's sequence of signals can be easily converted\n    to an arborescent data structure. Assume your trees are defined by :\n    <span class=\"codepre\" >type tree = E of Xmlm.tag * tree list | D of string<\/span>\n    The following functions input\/output xml documents from\/to abstractions \n    as value of type <span class=\"code\" >tree<\/span>.\n<span class=\"codepre\" >let in_tree i = \n  let el tag childs = E (tag, childs)  in\n  let data d = D d in\n  Xmlm.input_doc_tree ~el ~data i\n\nlet out_tree o t = \n  let frag = function\n  | E (tag, childs) -&gt; `El (tag, childs) \n  | D d -&gt; `Data d \n  in\n  Xmlm.output_doc_tree frag o t<\/span> <br><\/br>\n    <h2>Tabular data processing<\/h2><br><\/br>\n    We show how to process XML data that represents tabular data (some\n    people like do that).<br><\/br>\n    The file we need to deal with represents nominal data about\n    <a href=\"http:\/\/www.w3.org\/\" >W3C bureaucrats<\/a>. There are no namespaces\n    and attributes are ignored. The element structure of the document\n    is :\n    <ul><li>&lt;list&gt;\n     <ul><li>&lt;bureaucrat&gt; represents a W3C bureaucrat\n           (zero or more).<br><\/br>\n        A bureaucrat contains the following elements, in order.\n        <ul><li>&lt;name&gt; its name (mandatory, string).<\/li><li>&lt;surname&gt; its surname (mandatory, string).<\/li><li>&lt;honest&gt; present iff he implemented one of its spec \n               (optional, empty).<\/li><li>&lt;obfuscation_level&gt; its grade on the\n               open scale of obfuscation (mandatory, float).<\/li><li>&lt;tr&gt; (zero or more, string), technical reports he\n               worked on.<\/li><\/ul><\/li><\/ul><\/li><\/ul><br><\/br>\n    In OCaml we represent a W3C bureaucrat by this type :\n<span class=\"codepre\" >type w3c_bureaucrat = { \n    name : string; \n    surname : string; \n    honest : bool; \n    obfuscation_level : float;\n    trs : string list; }<\/span>\n    The following functions input and output W3C bureaucrats as lists\n    of values of type <span class=\"code\" >w3c_bureaucrat<\/span>.\n<span class=\"codepre\" >let in_w3c_bureaucrats src = \n  let i = Xmlm.make_input ~strip:true src in\n  let tag n = (\"\", n), [] in\n  let error () = invalid_arg \"parse error\" in\n  let accept s i = if Xmlm.input i = s then () else error () in\n  let rec i_seq el acc i = match Xmlm.peek i with \n  | `El_start _ -&gt; i_seq el ((el i) :: acc) i\n  | `El_end -&gt; List.rev acc\n  | _ -&gt; error ()\n  in\n  let i_el n i = \n    accept (`El_start (tag n)) i;\n    let d = match Xmlm.peek i with\n    | `Data d -&gt; ignore (Xmlm.input i); d\n    | `El_end -&gt; \"\"\n    | _ -&gt; error ()\n    in\n    accept (`El_end) i;\n    d\n  in\n  let i_bureaucrat i = \n    try\n      accept (`El_start (tag \"bureaucrat\")) i;\n      let name = i_el \"name\" i in\n      let surname = i_el \"surname\" i in\n      let honest = match Xmlm.peek i with\n      | `El_start ((\"\", \"honest\"), []) -&gt; ignore (i_el \"honest\" i); true\n      | _ -&gt; false\n      in\n      let obf = float_of_string (i_el \"obfuscation_level\" i) in\n      let trs = i_seq (i_el \"tr\") [] i in\n      accept (`El_end) i;\n      { name = name; surname = surname; honest = honest; \n        obfuscation_level = obf; trs = trs }\n    with\n    | Failure _ -&gt; error () (* float_of_string *)\n  in\n  accept (`Dtd None) i;\n  accept (`El_start (tag \"list\")) i;\n  let bl = i_seq i_bureaucrat [] i in\n  accept (`El_end) i;\n  if not (Xmlm.eoi i) then invalid_arg \"more than one document\";\n  bl\n\nlet out_w3c_bureaucrats dst bl = \n  let tag n = (\"\", n), [] in\n  let o = Xmlm.make_output ~nl:true ~indent:(Some 2) dst in\n  let out = Xmlm.output o in\n  let o_el n d = \n    out (`El_start (tag n)); \n    if d &lt;&gt; \"\" then out (`Data d); \n    out `El_end \n  in\n  let o_bureaucrat b = \n    out (`El_start (tag \"bureaucrat\"));\n    o_el \"name\" b.name;\n    o_el \"surname\" b.surname;\n    if b.honest then o_el \"honest\" \"\";\n    o_el \"obfuscation_level\" (string_of_float b.obfuscation_level);\n    List.iter (o_el \"tr\") b.trs;\n    out `El_end\n  in\n  out (`Dtd None);\n  out (`El_start (tag \"list\"));\n  List.iter o_bureaucrat bl;\n  out (`El_end)<\/span>"}, {"value": {"name": "Cow.Xml.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|28657"}, "info": "", "type": "Cow.Xml.t -> string", "params": [{"name": "", "type": "Cow.Xml.t"}]}}, {"value": {"name": "Cow.Xml.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|28685"}, "info": "", "type": "?entity:(string -> string option) ->\n  ?templates:(string * Cow.Xml.t) list ->\n  ?enc:Cow.Xml.encoding -> string -> Cow.Xml.t", "params": [{"name": "entity", "type": "(string -> string option) option"}, {"name": "templates", "type": "(string * Cow.Xml.t) list option"}, {"name": "enc", "type": "Cow.Xml.encoding option"}, {"name": "", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Cow.Html", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|30541"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Html.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31387"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "('a Cow.Xml.frag as 'a) Cow.Xml.frag list"}}, {"value": {"name": "Cow.Html.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31424"}, "info": "", "type": "Cow.Html.t -> string", "params": [{"name": "", "type": "Cow.Html.t"}]}}, {"value": {"name": "Cow.Html.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31453"}, "info": "", "type": "?templates:(string * Cow.Html.t) list ->\n  ?enc:Cow.Xml.encoding -> string -> Cow.Html.t", "params": [{"name": "templates", "type": "(string * Cow.Html.t) list option"}, {"name": "enc", "type": "Cow.Xml.encoding option"}, {"name": "", "type": "string"}]}}, {"comment": "<h2>HTML library<\/h2>"}, {"type": {"name": "Cow.Html.link", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31582"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "text", "mutable": false, "type": "string"}, {"name": "href", "mutable": false, "type": "string"}]}}}, {"value": {"name": "Cow.Html.html_of_link", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31620"}, "info": "", "type": "Cow.Html.link -> Cow.Html.t", "params": [{"name": "", "type": "Cow.Html.link"}]}}, {"value": {"name": "Cow.Html.interleave", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31650"}, "info": "", "type": "string array -> Cow.Html.t list -> Cow.Html.t list", "params": [{"name": "", "type": "string array"}, {"name": "", "type": "Cow.Html.t list"}]}}, {"value": {"name": "Cow.Html.html_of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31701"}, "info": "", "type": "string -> Cow.Html.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Cow.Html.html_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31734"}, "info": "", "type": "int -> Cow.Html.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Cow.Html.html_of_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31761"}, "info": "", "type": "float -> Cow.Html.t", "params": [{"name": "", "type": "float"}]}}, {"type": {"name": "Cow.Html.table", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31806"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Html.t array array"}}, {"value": {"name": "Cow.Html.html_of_table", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31821"}, "info": "", "type": "?headings:bool -> Cow.Html.table -> Cow.Html.t", "params": [{"name": "headings", "type": "bool option"}, {"name": "", "type": "Cow.Html.table"}]}}, {"value": {"name": "Cow.Html.nil", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31871"}, "info": "", "type": "Cow.Html.t", "params": []}}], "dependencies": {"uses": []}}}, {"module": {"name": "Cow.Css", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|31887"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Css.elt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|32757"}, "info": {"description": "Single element"}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Str", "type": ["string"]}, {"name": "Fun", "type": ["string", "Cow.Css.expr list"]}]}}}, {"type": {"name": "Cow.Css.expr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|32867"}, "info": {"description": "Expression: `.body a:hover`. No commas here."}, "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Css.elt list"}}, {"type": {"name": "Cow.Css.prop_decl", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|32988"}, "info": {"description": "We allow nested declarations"}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Prop", "type": ["string", "Cow.Css.expr list"]}, {"name": "Decl", "type": ["Cow.Css.expr list", "Cow.Css.prop_decl list"]}]}}}, {"type": {"name": "Cow.Css.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33101"}, "info": {"description": "The type of CSS fragment"}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Props", "type": ["Cow.Css.prop_decl list"]}, {"name": "Exprs", "type": ["Cow.Css.expr list"]}]}}}, {"value": {"name": "Cow.Css.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33151"}, "info": "", "type": "Cow.Css.t -> string", "params": [{"name": "", "type": "Cow.Css.t"}]}}, {"comment": "<h2>Getters<\/h2>"}, {"value": {"name": "Cow.Css.expr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33200"}, "info": "", "type": "Cow.Css.t -> Cow.Css.expr", "params": [{"name": "", "type": "Cow.Css.t"}]}}, {"value": {"name": "Cow.Css.exprs", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33221"}, "info": "", "type": "Cow.Css.t -> Cow.Css.expr list", "params": [{"name": "", "type": "Cow.Css.t"}]}}, {"value": {"name": "Cow.Css.props", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33248"}, "info": "", "type": "Cow.Css.t -> Cow.Css.prop_decl list", "params": [{"name": "", "type": "Cow.Css.t"}]}}, {"value": {"name": "Cow.Css.string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33280"}, "info": "", "type": "Cow.Css.t -> string", "params": [{"name": "", "type": "Cow.Css.t"}]}}, {"comment": "<h3>Helpers<\/h3>"}, {"value": {"name": "Cow.Css.unroll", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33439"}, "info": {"description": "transform a fragment with nested declarations into\n    an equivalent fragment with only root declarations"}, "type": "Cow.Css.t -> Cow.Css.t", "params": [{"name": "", "type": "Cow.Css.t"}]}}, {"comment": "<h2>CSS library<\/h2>"}, {"value": {"name": "Cow.Css.gradient", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33484"}, "info": "", "type": "low:Cow.Css.t -> high:Cow.Css.t -> Cow.Css.t", "params": [{"name": "low", "type": "Cow.Css.t"}, {"name": "high", "type": "Cow.Css.t"}]}}, {"value": {"name": "Cow.Css.top_rounded", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33521"}, "info": "", "type": "Cow.Css.t", "params": []}}, {"value": {"name": "Cow.Css.bottom_rounded", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33541"}, "info": "", "type": "Cow.Css.t", "params": []}}, {"value": {"name": "Cow.Css.rounded", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33564"}, "info": "", "type": "Cow.Css.t", "params": []}}, {"value": {"name": "Cow.Css.box_shadow", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33581"}, "info": "", "type": "Cow.Css.t", "params": []}}, {"value": {"name": "Cow.Css.text_shadow", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33600"}, "info": "", "type": "Cow.Css.t", "params": []}}, {"value": {"name": "Cow.Css.no_padding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33621"}, "info": "", "type": "Cow.Css.t", "params": []}}, {"value": {"name": "Cow.Css.reset_padding", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33640"}, "info": "", "type": "Cow.Css.t", "params": []}}], "dependencies": {"uses": []}}}, {"module": {"name": "Cow.Code", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|33667"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "Cow.Code.ocaml", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|34613"}, "info": {"description": "Convert a string into an xHTML fragment, where keywords have been classified\n    in different classes"}, "type": "string -> Cow.Html.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Cow.Code.ocaml_css", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|34714"}, "info": {"description": "CSS fragment to colorize the keywords, depending on their class"}, "type": "Cow.Css.t", "params": []}}], "dependencies": {"uses": []}}}, {"module": {"name": "Cow.Atom", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|34740"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Atom.author", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|35588"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "name", "mutable": false, "type": "string"}, {"name": "uri", "mutable": false, "type": "string option"}, {"name": "email", "mutable": false, "type": "string option"}]}}}, {"type": {"name": "Cow.Atom.date", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|35673"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int * int * int * int * int"}}, {"value": {"name": "Cow.Atom.compare", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|35702"}, "info": "", "type": "Cow.Atom.date -> Cow.Atom.date -> int", "params": [{"name": "", "type": "Cow.Atom.date"}, {"name": "", "type": "Cow.Atom.date"}]}}, {"type": {"name": "Cow.Atom.meta", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|35749"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "id", "mutable": false, "type": "string"}, {"name": "title", "mutable": false, "type": "string"}, {"name": "subtitle", "mutable": false, "type": "string option"}, {"name": "author", "mutable": false, "type": "Cow.Atom.author option"}, {"name": "rights", "mutable": false, "type": "string option"}, {"name": "updated", "mutable": false, "type": "Cow.Atom.date"}]}}}, {"type": {"name": "Cow.Atom.summary", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|35938"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string option"}}, {"type": {"name": "Cow.Atom.entry", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|35966"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "entry", "mutable": false, "type": "Cow.Atom.meta"}, {"name": "summary", "mutable": false, "type": "Cow.Atom.summary"}, {"name": "content", "mutable": false, "type": "Cow.Xml.t"}]}}}, {"type": {"name": "Cow.Atom.feed", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|36041"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "feed", "mutable": false, "type": "Cow.Atom.meta"}, {"name": "entries", "mutable": false, "type": "Cow.Atom.entry list"}]}}}, {"value": {"name": "Cow.Atom.xml_of_feed", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|36088"}, "info": "", "type": "?self:string -> Cow.Atom.feed -> Cow.Xml.t", "params": [{"name": "self", "type": "string option"}, {"name": "", "type": "Cow.Atom.feed"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Cow.Markdown", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|36141"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Markdown.ref", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|37443"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "src", "mutable": false, "type": "string"}, {"name": "desc", "mutable": false, "type": "string"}]}}}, {"type": {"name": "Cow.Markdown.paragraph", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|37497"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Normal", "type": ["Cow.Markdown.par_text"]}, {"name": "Html", "type": ["Cow.Html.t"]}, {"name": "Pre", "type": ["string", "string option"]}, {"name": "Heading", "type": ["int", "Cow.Markdown.par_text"]}, {"name": "Quote", "type": ["Cow.Markdown.paragraph list"]}, {"name": "Ulist", "type": ["Cow.Markdown.paragraph list", "Cow.Markdown.paragraph list list"]}, {"name": "Olist", "type": ["Cow.Markdown.paragraph list", "Cow.Markdown.paragraph list list"]}]}}}, {"type": {"name": "Cow.Markdown.par_text", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|37743"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Markdown.text list"}}, {"type": {"name": "Cow.Markdown.text", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|37769"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Text", "type": ["string"]}, {"name": "Emph", "type": ["string"]}, {"name": "Bold", "type": ["string"]}, {"name": "Struck", "type": ["Cow.Markdown.par_text"]}, {"name": "Code", "type": ["string"]}, {"name": "Link", "type": ["Cow.Markdown.href"]}, {"name": "Anchor", "type": ["string"]}, {"name": "Image", "type": ["Cow.Markdown.img_ref"]}]}}}, {"type": {"name": "Cow.Markdown.href", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|37935"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "href_target", "mutable": false, "type": "string"}, {"name": "href_desc", "mutable": false, "type": "string"}]}}}, {"type": {"name": "Cow.Markdown.img_ref", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|37996"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "img_src", "mutable": false, "type": "string"}, {"name": "img_alt", "mutable": false, "type": "string"}]}}}, {"type": {"name": "Cow.Markdown.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|38045"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Cow.Markdown.paragraph list"}}, {"value": {"name": "Cow.Markdown.to_html", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|38062"}, "info": "", "type": "Cow.Markdown.t -> Cow.Html.t", "params": [{"name": "", "type": "Cow.Markdown.t"}]}}, {"value": {"name": "Cow.Markdown.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|38089"}, "info": "", "type": "string -> Cow.Markdown.t", "params": [{"name": "", "type": "string"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Cow.Json", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|38121"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Json.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|38816"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Int", "type": ["int64"]}, {"name": "Bool", "type": ["bool"]}, {"name": "Float", "type": ["float"]}, {"name": "String", "type": ["string"]}, {"name": "Array", "type": ["Cow.Json.t list"]}, {"name": "Object", "type": ["(string * Cow.Json.t) list"]}, {"name": "Null", "type": []}]}}}, {"value": {"name": "Cow.Json.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|38950"}, "info": "", "type": "Cow.Json.t -> string", "params": [{"name": "", "type": "Cow.Json.t"}]}}, {"value": {"name": "Cow.Json.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|38978"}, "info": "", "type": "string -> Cow.Json.t", "params": [{"name": "", "type": "string"}]}}, {"exception": {"name": "Cow.Json.Runtime_error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39007"}, "info": "", "exception_args": ["string", "Cow.Json.t"]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Cow.Twitter", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39049"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Cow.Twitter.User", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39692"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Twitter.User.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39724"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "id_str", "mutable": false, "type": "string"}, {"name": "screen_name", "mutable": false, "type": "string"}]}}}, {"value": {"name": "Cow.Twitter.User.json_of_t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39784"}, "info": "", "type": "Cow.Twitter.User.t -> Cow.Json.t", "params": [{"name": "", "type": "Cow.Twitter.User.t"}]}}, {"value": {"name": "Cow.Twitter.User.t_of_json", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39814"}, "info": "", "type": "Cow.Json.t -> Cow.Twitter.User.t", "params": [{"name": "", "type": "Cow.Json.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Cow.Twitter.Status", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39848"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Cow.Twitter.Status.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39880"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "id", "mutable": false, "type": "int"}, {"name": "user", "mutable": false, "type": "Cow.Twitter.User.t"}, {"name": "text", "mutable": false, "type": "string"}]}}}, {"value": {"name": "Cow.Twitter.Status.json_of_t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39943"}, "info": "", "type": "Cow.Twitter.Status.t -> Cow.Json.t", "params": [{"name": "", "type": "Cow.Twitter.Status.t"}]}}, {"value": {"name": "Cow.Twitter.Status.t_of_json", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|39973"}, "info": "", "type": "Cow.Json.t -> Cow.Twitter.Status.t", "params": [{"name": "", "type": "Cow.Json.t"}]}}, {"value": {"name": "Cow.Twitter.Status.json_of_t_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|40004"}, "info": "", "type": "Cow.Twitter.Status.t list -> Cow.Json.t", "params": [{"name": "", "type": "Cow.Twitter.Status.t list"}]}}, {"value": {"name": "Cow.Twitter.Status.t_list_of_json", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/cow.mli|40044"}, "info": "", "type": "Cow.Json.t -> Cow.Twitter.Status.t list", "params": [{"name": "", "type": "Cow.Json.t"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Buffer"], "used_by": []}}}, "Openflow": {"module": {"name": "Openflow", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Openflow.Ofpacket", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"exception": {"name": "Openflow.Ofpacket.Unparsable", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|49"}, "info": "", "exception_args": ["string", "Bitstring.bitstring"]}}, {"exception": {"name": "Openflow.Ofpacket.Unparsed", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|102"}, "info": "", "exception_args": ["string", "Bitstring.bitstring"]}}, {"value": {"name": "Openflow.Ofpacket.(|>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|153"}, "info": "", "type": "'a -> ('a -> 'b) -> 'b", "params": [{"name": "", "type": "'a"}, {"name": "", "type": "'a -> 'b"}]}}, {"value": {"name": "Openflow.Ofpacket.(>>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|189"}, "info": "", "type": "('a -> 'b) -> ('b -> 'c) -> 'a -> 'c", "params": [{"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "Openflow.Ofpacket.(||>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|239"}, "info": "", "type": "'a list -> ('a -> 'b) -> 'b list", "params": [{"name": "", "type": "'a list"}, {"name": "", "type": "'a -> 'b"}]}}, {"value": {"name": "Openflow.Ofpacket.(+++)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|286"}, "info": "", "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Openflow.Ofpacket.(&&&)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|324"}, "info": "", "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Openflow.Ofpacket.(|||)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|362"}, "info": "", "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Openflow.Ofpacket.(^^^)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|400"}, "info": "", "type": "int32 -> int32 -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int32"}]}}, {"value": {"name": "Openflow.Ofpacket.(<<<)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|438"}, "info": "", "type": "int32 -> int -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.(>>>)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|474"}, "info": "", "type": "int32 -> int -> int32", "params": [{"name": "", "type": "int32"}, {"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.join", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|510"}, "info": "", "type": "string -> string list -> string", "params": [{"name": "", "type": "string"}, {"name": "", "type": "string list"}]}}, {"value": {"name": "Openflow.Ofpacket.stop", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|553"}, "info": "", "type": "'a * 'b -> 'a", "params": [{"tuple": {"type": "'a * 'b", "contents": [{"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}]}}, {"type": {"name": "Openflow.Ofpacket.int16", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|591"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int"}}, {"type": {"name": "Openflow.Ofpacket.uint8", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|608"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "char"}}, {"type": {"name": "Openflow.Ofpacket.uint16", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|627"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int"}}, {"type": {"name": "Openflow.Ofpacket.uint32", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|645"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int32"}}, {"type": {"name": "Openflow.Ofpacket.uint64", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|665"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "int64"}}, {"value": {"name": "Openflow.Ofpacket.uint8_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|671"}, "info": "", "type": "int -> char", "params": [{"name": "", "type": "int"}]}}, {"type": {"name": "Openflow.Ofpacket.ipv4", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|714"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Openflow.Ofpacket.uint32"}}, {"value": {"name": "Openflow.Ofpacket.ipv4_to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|721"}, "info": "", "type": "int32 -> string", "params": [{"name": "", "type": "int32"}]}}, {"type": {"name": "Openflow.Ofpacket.byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|770"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Openflow.Ofpacket.uint8"}}, {"value": {"name": "Openflow.Ofpacket.byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|776"}, "info": "", "type": "int -> Openflow.Ofpacket.byte", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.int_of_byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|799"}, "info": "", "type": "char -> int", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Openflow.Ofpacket.int32_of_byte", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|829"}, "info": "", "type": "char -> int32", "params": [{"name": "", "type": "char"}]}}, {"value": {"name": "Openflow.Ofpacket.int32_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|863"}, "info": "", "type": "int -> int32", "params": [{"name": "", "type": "int"}]}}, {"type": {"name": "Openflow.Ofpacket.bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|908"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "string"}}, {"type": {"name": "Openflow.Ofpacket.eaddr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|928"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Openflow.Ofpacket.bytes"}}, {"value": {"name": "Openflow.Ofpacket.bytes_to_hex_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|934"}, "info": "", "type": "char array -> string array", "params": [{"name": "", "type": "char array"}]}}, {"value": {"name": "Openflow.Ofpacket.bytes_of_bitstring", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|987"}, "info": "", "type": "Bitstring.bitstring -> string", "params": [{"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Openflow.Ofpacket.ipv4_addr_of_bytes", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1042"}, "info": "", "type": "string -> int32", "params": [{"name": "", "type": "string"}]}}, {"type": {"name": "Openflow.Ofpacket.vendor", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1097"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Openflow.Ofpacket.uint32"}}, {"type": {"name": "Openflow.Ofpacket.queue_id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1120"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Openflow.Ofpacket.uint32"}}, {"type": {"name": "Openflow.Ofpacket.datapath_id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1146"}, "info": "", "params": [], "kind": {"type": "abstract"}, "manifest": "Openflow.Ofpacket.uint64"}}, {"type": {"name": "Openflow.Ofpacket.table_id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1169"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "All", "type": []}, {"name": "Emergency", "type": []}, {"name": "Table", "type": ["Openflow.Ofpacket.uint8"]}]}}}, {"value": {"name": "Openflow.Ofpacket.table_id_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1202"}, "info": "", "type": "int -> Openflow.Ofpacket.table_id", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.int_of_table_id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1240"}, "info": "", "type": "Openflow.Ofpacket.table_id -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.table_id"}]}}, {"value": {"name": "Openflow.Ofpacket.string_of_table_id", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1278"}, "info": "", "type": "Openflow.Ofpacket.table_id -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.table_id"}]}}, {"type": {"name": "Openflow.Ofpacket.action", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1340"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "OUTPUT", "type": []}, {"name": "SET_VLAN_VID", "type": []}, {"name": "SET_VLAN_PCP", "type": []}, {"name": "STRIP_VLAN", "type": []}, {"name": "SET_DL_SRC", "type": []}, {"name": "SET_DL_DST", "type": []}, {"name": "SET_NW_SRC", "type": []}, {"name": "SET_NW_DST", "type": []}, {"name": "SET_NW_TOS", "type": []}, {"name": "SET_TP_SRC", "type": []}, {"name": "SET_TP_DST", "type": []}, {"name": "ENQUEUE", "type": []}, {"name": "VENDOR", "type": []}]}}}, {"value": {"name": "Openflow.Ofpacket.action_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1524"}, "info": "", "type": "int -> Openflow.Ofpacket.action", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.int_of_action", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1558"}, "info": "", "type": "Openflow.Ofpacket.action -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.action"}]}}, {"value": {"name": "Openflow.Ofpacket.string_of_action", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1592"}, "info": "", "type": "Openflow.Ofpacket.action -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.action"}]}}, {"type": {"name": "Openflow.Ofpacket.port", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1648"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Max", "type": []}, {"name": "In_port", "type": []}, {"name": "Table", "type": []}, {"name": "Normal", "type": []}, {"name": "Flood", "type": []}, {"name": "All", "type": []}, {"name": "Controller", "type": []}, {"name": "Local", "type": []}, {"name": "No_port", "type": []}, {"name": "Port", "type": ["Openflow.Ofpacket.int16"]}]}}}, {"value": {"name": "Openflow.Ofpacket.port_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1758"}, "info": "", "type": "Openflow.Ofpacket.int16 -> Openflow.Ofpacket.port", "params": [{"name": "", "type": "Openflow.Ofpacket.int16"}]}}, {"value": {"name": "Openflow.Ofpacket.int_of_port", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1790"}, "info": "", "type": "Openflow.Ofpacket.port -> Openflow.Ofpacket.int16", "params": [{"name": "", "type": "Openflow.Ofpacket.port"}]}}, {"value": {"name": "Openflow.Ofpacket.string_of_port", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1822"}, "info": "", "type": "Openflow.Ofpacket.port -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.port"}]}}, {"module": {"name": "Openflow.Ofpacket.Queue", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1858"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Queue.h", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1892"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "queue_id", "mutable": false, "type": "Openflow.Ofpacket.queue_id"}]}}}, {"type": {"name": "Openflow.Ofpacket.Queue.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1930"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "NONE", "type": []}, {"name": "MIN_RATE", "type": ["Openflow.Ofpacket.uint16"]}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Port", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|1962"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Port.config", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|2000"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "port_down", "mutable": false, "type": "bool"}, {"name": "no_stp", "mutable": false, "type": "bool"}, {"name": "no_recv", "mutable": false, "type": "bool"}, {"name": "no_recv_stp", "mutable": false, "type": "bool"}, {"name": "no_flood", "mutable": false, "type": "bool"}, {"name": "no_fwd", "mutable": false, "type": "bool"}, {"name": "no_packet_in", "mutable": false, "type": "bool"}]}}}, {"value": {"name": "Openflow.Ofpacket.Port.parse_config", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|2176"}, "info": "", "type": "string * int * int -> Openflow.Ofpacket.Port.config", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"type": {"name": "Openflow.Ofpacket.Port.features", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|2244"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "pause_asym", "mutable": false, "type": "bool"}, {"name": "pause", "mutable": false, "type": "bool"}, {"name": "autoneg", "mutable": false, "type": "bool"}, {"name": "fiber", "mutable": false, "type": "bool"}, {"name": "copper", "mutable": false, "type": "bool"}, {"name": "f_10GB_FD", "mutable": false, "type": "bool"}, {"name": "f_1GB_FD", "mutable": false, "type": "bool"}, {"name": "f_1GB_HD", "mutable": false, "type": "bool"}, {"name": "f_100MB_FD", "mutable": false, "type": "bool"}, {"name": "f_100MB_HD", "mutable": false, "type": "bool"}, {"name": "f_10MB_FD", "mutable": false, "type": "bool"}, {"name": "f_10MB_HD", "mutable": false, "type": "bool"}]}}}, {"value": {"name": "Openflow.Ofpacket.Port.parse_features", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|2532"}, "info": "", "type": "string * int * int -> Openflow.Ofpacket.Port.features", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"type": {"name": "Openflow.Ofpacket.Port.state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|2601"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "link_down", "mutable": false, "type": "bool"}, {"name": "stp_listen", "mutable": false, "type": "bool"}, {"name": "stp_learn", "mutable": false, "type": "bool"}, {"name": "stp_forward", "mutable": false, "type": "bool"}, {"name": "stp_block", "mutable": false, "type": "bool"}, {"name": "stp_mask", "mutable": false, "type": "bool"}]}}}, {"value": {"name": "Openflow.Ofpacket.Port.parse_state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|2759"}, "info": "", "type": "string * int * int -> Openflow.Ofpacket.Port.state", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"type": {"name": "Openflow.Ofpacket.Port.phy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|2820"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "port_no", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "hw_addr", "mutable": false, "type": "Openflow.Ofpacket.eaddr"}, {"name": "name", "mutable": false, "type": "string"}, {"name": "config", "mutable": false, "type": "Openflow.Ofpacket.Port.config"}, {"name": "state", "mutable": false, "type": "Openflow.Ofpacket.Port.state"}, {"name": "curr", "mutable": false, "type": "Openflow.Ofpacket.Port.features"}, {"name": "advertised", "mutable": false, "type": "Openflow.Ofpacket.Port.features"}, {"name": "supported", "mutable": false, "type": "Openflow.Ofpacket.Port.features"}, {"name": "peer", "mutable": false, "type": "Openflow.Ofpacket.Port.features"}]}}}, {"value": {"name": "Openflow.Ofpacket.Port.max_name_len", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3047"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Openflow.Ofpacket.Port.phy_len", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3074"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Openflow.Ofpacket.Port.parse_phy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3096"}, "info": "", "type": "string * int * int -> Openflow.Ofpacket.Port.phy", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"type": {"name": "Openflow.Ofpacket.Port.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3155"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "port_no", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "rx_packets", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "tx_packets", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "rx_bytes", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "tx_bytes", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "rx_dropped", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "tx_dropped", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "rx_errors", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "tx_errors", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "rx_frame_err", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "rx_over_err", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "rx_crc_err", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "collisions", "mutable": false, "type": "Openflow.Ofpacket.uint64"}]}}}, {"type": {"name": "Openflow.Ofpacket.Port.reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3526"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "ADD", "type": []}, {"name": "DEL", "type": []}, {"name": "MOD", "type": []}]}}}, {"value": {"name": "Openflow.Ofpacket.Port.reason_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3546"}, "info": "", "type": "int -> Openflow.Ofpacket.Port.reason", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.Port.int_of_reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3584"}, "info": "", "type": "Openflow.Ofpacket.Port.reason -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.Port.reason"}]}}, {"value": {"name": "Openflow.Ofpacket.Port.string_of_reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3622"}, "info": "", "type": "Openflow.Ofpacket.Port.reason -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.Port.reason"}]}}, {"type": {"name": "Openflow.Ofpacket.Port.status", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3680"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "reason", "mutable": false, "type": "Openflow.Ofpacket.Port.reason"}, {"name": "desc", "mutable": false, "type": "Openflow.Ofpacket.Port.phy"}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Switch", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3719"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Switch.capabilities", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3765"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "flow_stats", "mutable": false, "type": "bool"}, {"name": "table_stats", "mutable": false, "type": "bool"}, {"name": "port_stats", "mutable": false, "type": "bool"}, {"name": "stp", "mutable": false, "type": "bool"}, {"name": "ip_reasm", "mutable": false, "type": "bool"}, {"name": "queue_stats", "mutable": false, "type": "bool"}, {"name": "arp_match_ip", "mutable": false, "type": "bool"}]}}}, {"value": {"name": "Openflow.Ofpacket.Switch.parse_capabilities", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|3947"}, "info": "", "type": "string * int * int -> Openflow.Ofpacket.Switch.capabilities", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"type": {"name": "Openflow.Ofpacket.Switch.actions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|4026"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "output", "mutable": false, "type": "bool"}, {"name": "set_vlan_id", "mutable": false, "type": "bool"}, {"name": "set_vlan_pcp", "mutable": false, "type": "bool"}, {"name": "strip_vlan", "mutable": false, "type": "bool"}, {"name": "set_dl_src", "mutable": false, "type": "bool"}, {"name": "set_dl_dst", "mutable": false, "type": "bool"}, {"name": "set_nw_src", "mutable": false, "type": "bool"}, {"name": "set_nw_dst", "mutable": false, "type": "bool"}, {"name": "set_nw_tos", "mutable": false, "type": "bool"}, {"name": "set_tp_src", "mutable": false, "type": "bool"}, {"name": "set_tp_dst", "mutable": false, "type": "bool"}, {"name": "enqueue", "mutable": false, "type": "bool"}, {"name": "vendor", "mutable": false, "type": "bool"}]}}}, {"value": {"name": "Openflow.Ofpacket.Switch.parse_actions", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|4355"}, "info": "", "type": "string * int * int -> Openflow.Ofpacket.Switch.actions", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"type": {"name": "Openflow.Ofpacket.Switch.features", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|4425"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "datapath_id", "mutable": false, "type": "Openflow.Ofpacket.datapath_id"}, {"name": "n_buffers", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "n_tables", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "capabilities", "mutable": false, "type": "Openflow.Ofpacket.Switch.capabilities"}, {"name": "actions", "mutable": false, "type": "Openflow.Ofpacket.Switch.actions"}, {"name": "ports", "mutable": false, "type": "Openflow.Ofpacket.Port.phy list"}]}}}, {"value": {"name": "Openflow.Ofpacket.Switch.parse_features", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|4608"}, "info": "", "type": "string * int * int -> Openflow.Ofpacket.Switch.features", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"type": {"name": "Openflow.Ofpacket.Switch.config", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|4678"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "drop", "mutable": false, "type": "bool"}, {"name": "reasm", "mutable": false, "type": "bool"}, {"name": "miss_send_len", "mutable": false, "type": "Openflow.Ofpacket.uint16"}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Wildcards", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|4739"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Wildcards.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|4777"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "in_port", "mutable": false, "type": "bool"}, {"name": "dl_vlan", "mutable": false, "type": "bool"}, {"name": "dl_src", "mutable": false, "type": "bool"}, {"name": "dl_dst", "mutable": false, "type": "bool"}, {"name": "dl_type", "mutable": false, "type": "bool"}, {"name": "nw_proto", "mutable": false, "type": "bool"}, {"name": "tp_src", "mutable": false, "type": "bool"}, {"name": "tp_dst", "mutable": false, "type": "bool"}, {"name": "nw_src", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "nw_dst", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "dl_vlan_pcp", "mutable": false, "type": "bool"}, {"name": "nw_tos", "mutable": false, "type": "bool"}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Match", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5053"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Match.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5087"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "wildcards", "mutable": false, "type": "Openflow.Ofpacket.Wildcards.t"}, {"name": "in_port", "mutable": false, "type": "Openflow.Ofpacket.port"}, {"name": "dl_src", "mutable": false, "type": "Openflow.Ofpacket.eaddr"}, {"name": "dl_dst", "mutable": false, "type": "Openflow.Ofpacket.eaddr"}, {"name": "dl_vlan", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "dl_vlan_pcp", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "dl_type", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "nw_src", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "nw_dst", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "nw_tos", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "nw_proto", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "tp_src", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "tp_dst", "mutable": false, "type": "Openflow.Ofpacket.uint16"}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Flow", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5408"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Flow.reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5446"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "IDLE_TIMEOUT", "type": []}, {"name": "HARD_TIMEOUT", "type": []}, {"name": "DELETE", "type": []}]}}}, {"value": {"name": "Openflow.Ofpacket.Flow.reason_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5487"}, "info": "", "type": "int -> Openflow.Ofpacket.Flow.reason", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.Flow.int_of_reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5525"}, "info": "", "type": "Openflow.Ofpacket.Flow.reason -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.Flow.reason"}]}}, {"value": {"name": "Openflow.Ofpacket.Flow.string_of_reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5563"}, "info": "", "type": "Openflow.Ofpacket.Flow.reason -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.Flow.reason"}]}}, {"type": {"name": "Openflow.Ofpacket.Flow.stats", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5617"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "entry_length", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "table_id", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "of_match", "mutable": false, "type": "Openflow.Ofpacket.Match.t"}, {"name": "duration_sec", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "duration_usec", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "priority", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "idle_timeout", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "hard_timeout", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "cookie", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "packet_count", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "byte_count", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "action", "mutable": false, "type": "Openflow.Ofpacket.action"}]}}}, {"type": {"name": "Openflow.Ofpacket.Flow.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|5960"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "cookie", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "priority", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "reason", "mutable": false, "type": "Openflow.Ofpacket.Flow.reason"}, {"name": "table_id", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "duration_sec", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "duration_usec", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "idle_timeout", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "packet_count", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "byte_count", "mutable": false, "type": "Openflow.Ofpacket.uint64"}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Packet_in", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6212"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Packet_in.reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6255"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "No_match", "type": []}, {"name": "Action", "type": []}]}}}, {"value": {"name": "Openflow.Ofpacket.Packet_in.reason_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6277"}, "info": "", "type": "int -> Openflow.Ofpacket.Packet_in.reason", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.Packet_in.int_of_reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6315"}, "info": "", "type": "Openflow.Ofpacket.Packet_in.reason -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.Packet_in.reason"}]}}, {"value": {"name": "Openflow.Ofpacket.Packet_in.string_of_reason", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6353"}, "info": "", "type": "Openflow.Ofpacket.Packet_in.reason -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.Packet_in.reason"}]}}, {"type": {"name": "Openflow.Ofpacket.Packet_in.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6406"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "buffer_id", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "in_port", "mutable": false, "type": "Openflow.Ofpacket.port"}, {"name": "reason", "mutable": false, "type": "Openflow.Ofpacket.Packet_in.reason"}, {"name": "data", "mutable": false, "type": "Bitstring.t"}]}}}, {"value": {"name": "Openflow.Ofpacket.Packet_in.parse_packet_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6515"}, "info": "", "type": "string * int * int -> Openflow.Ofpacket.Packet_in.t", "params": [{"tuple": {"type": "string * int * int", "contents": [{"name": "", "type": "string"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"value": {"name": "Openflow.Ofpacket.Packet_in.string_of_packet_in", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6565"}, "info": "", "type": "Openflow.Ofpacket.Packet_in.t -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.Packet_in.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Packet_out", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6609"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Packet_out.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6648"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "buffer_id", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "in_port", "mutable": false, "type": "Openflow.Ofpacket.port"}, {"name": "actions", "mutable": false, "type": "Openflow.Ofpacket.action array"}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Flow_mod", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6718"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Flow_mod.command", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6761"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "ADD", "type": []}, {"name": "MODIFY", "type": []}, {"name": "MODIFY_STRICT", "type": []}, {"name": "DELETE", "type": []}, {"name": "DELETE_STRICT", "type": []}]}}}, {"value": {"name": "Openflow.Ofpacket.Flow_mod.command_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6819"}, "info": "", "type": "int -> Openflow.Ofpacket.Flow_mod.command", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.Flow_mod.int_of_command", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6859"}, "info": "", "type": "Openflow.Ofpacket.Flow_mod.command -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.Flow_mod.command"}]}}, {"value": {"name": "Openflow.Ofpacket.Flow_mod.string_of_command", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6899"}, "info": "", "type": "Openflow.Ofpacket.Flow_mod.command -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.Flow_mod.command"}]}}, {"type": {"name": "Openflow.Ofpacket.Flow_mod.flags", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|6958"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "send_flow_rem", "mutable": false, "type": "bool"}, {"name": "emerg", "mutable": false, "type": "bool"}, {"name": "overlap", "mutable": false, "type": "bool"}]}}}, {"type": {"name": "Openflow.Ofpacket.Flow_mod.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|7027"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "cookie", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "cookie_mask", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "table_id", "mutable": false, "type": "Openflow.Ofpacket.byte"}, {"name": "command", "mutable": false, "type": "Openflow.Ofpacket.Flow_mod.command"}, {"name": "idle_timeout", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "hard_timeout", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "priority", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "buffer_id", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "out_port", "mutable": false, "type": "Openflow.Ofpacket.port"}, {"name": "out_group", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "flags", "mutable": false, "type": "Openflow.Ofpacket.Flow_mod.flags"}, {"name": "of_match", "mutable": false, "type": "Openflow.Ofpacket.Match.t"}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Port_mod", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|7345"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Port_mod.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|7382"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "port_no", "mutable": false, "type": "Openflow.Ofpacket.port"}, {"name": "hw_addr", "mutable": false, "type": "Openflow.Ofpacket.eaddr"}, {"name": "config", "mutable": false, "type": "Openflow.Ofpacket.Port.config"}, {"name": "mask", "mutable": false, "type": "Openflow.Ofpacket.Port.config"}, {"name": "advertise", "mutable": false, "type": "Openflow.Ofpacket.Port.features"}]}}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Ofpacket.Stats", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|7528"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Ofpacket.Stats.aggregate", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|7570"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "packet_count", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "byte_count", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "flow_count", "mutable": false, "type": "Openflow.Ofpacket.uint32"}]}}}, {"type": {"name": "Openflow.Ofpacket.Stats.table", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|7678"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "table_id", "mutable": false, "type": "Openflow.Ofpacket.table_id"}, {"name": "name", "mutable": false, "type": "string"}, {"name": "wildcards", "mutable": false, "type": "Openflow.Ofpacket.Wildcards.t"}, {"name": "max_entries", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "active_count", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "lookup_count", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "matched_count", "mutable": false, "type": "Openflow.Ofpacket.uint64"}]}}}, {"type": {"name": "Openflow.Ofpacket.Stats.queue", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|7898"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "port_no", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "queue_id", "mutable": false, "type": "Openflow.Ofpacket.uint32"}, {"name": "tx_bytes", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "tx_packets", "mutable": false, "type": "Openflow.Ofpacket.uint64"}, {"name": "tx_errors", "mutable": false, "type": "Openflow.Ofpacket.uint64"}]}}}, {"type": {"name": "Openflow.Ofpacket.Stats.desc", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|8049"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "mfr_desc", "mutable": false, "type": "Openflow.Ofpacket.bytes"}, {"name": "hw_desc", "mutable": false, "type": "Openflow.Ofpacket.bytes"}, {"name": "sw_desc", "mutable": false, "type": "Openflow.Ofpacket.bytes"}, {"name": "serial_num", "mutable": false, "type": "Openflow.Ofpacket.bytes"}, {"name": "dp_desc", "mutable": false, "type": "Openflow.Ofpacket.bytes"}]}}}, {"type": {"name": "Openflow.Ofpacket.Stats.req_hdr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|8195"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "ty", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "flags", "mutable": false, "type": "Openflow.Ofpacket.uint16"}]}}}, {"type": {"name": "Openflow.Ofpacket.Stats.req", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|8251"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Desc", "type": ["Openflow.Ofpacket.Stats.req_hdr"]}, {"name": "Flow", "type": ["Openflow.Ofpacket.Stats.req_hdr", "Openflow.Ofpacket.Match.t", "Openflow.Ofpacket.table_id", "Openflow.Ofpacket.port"]}, {"name": "Aggregate", "type": ["Openflow.Ofpacket.Stats.req_hdr", "Openflow.Ofpacket.Match.t", "Openflow.Ofpacket.table_id", "Openflow.Ofpacket.port"]}, {"name": "Table", "type": ["Openflow.Ofpacket.Stats.req_hdr"]}, {"name": "Port", "type": ["Openflow.Ofpacket.Stats.req_hdr", "Openflow.Ofpacket.port"]}, {"name": "Queue", "type": ["Openflow.Ofpacket.Stats.req_hdr", "Openflow.Ofpacket.port", "Openflow.Ofpacket.queue_id"]}, {"name": "Vendor", "type": ["Openflow.Ofpacket.Stats.req_hdr"]}]}}}, {"type": {"name": "Openflow.Ofpacket.Stats.resp_hdr", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|8521"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "st_ty", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "more_to_follow", "mutable": false, "type": "bool"}]}}}, {"type": {"name": "Openflow.Ofpacket.Stats.resp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|8588"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Desc", "type": ["Openflow.Ofpacket.Stats.resp_hdr", "Openflow.Ofpacket.Stats.desc"]}, {"name": "Flow", "type": ["Openflow.Ofpacket.Stats.resp_hdr", "Openflow.Ofpacket.Flow.stats"]}, {"name": "Aggregate", "type": ["Openflow.Ofpacket.Stats.resp_hdr", "Openflow.Ofpacket.Stats.aggregate"]}, {"name": "Table", "type": ["Openflow.Ofpacket.Stats.resp_hdr", "Openflow.Ofpacket.Stats.table"]}, {"name": "Port", "type": ["Openflow.Ofpacket.Stats.resp_hdr", "Openflow.Ofpacket.Port.stats"]}, {"name": "Queue", "type": ["Openflow.Ofpacket.Stats.resp_hdr", "Openflow.Ofpacket.Stats.queue"]}, {"name": "Vendor", "type": ["Openflow.Ofpacket.Stats.resp_hdr"]}]}}}], "dependencies": {"uses": []}}}, {"type": {"name": "Openflow.Ofpacket.error_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|8853"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "HELLO_INCOMPATIBLE", "type": []}, {"name": "HELLO_EPERM", "type": []}, {"name": "REQUEST_BAD_VERSION", "type": []}, {"name": "REQUEST_BAD_TYPE", "type": []}, {"name": "REQUEST_BAD_STAT", "type": []}, {"name": "REQUEST_BAD_VENDOR", "type": []}, {"name": "REQUEST_BAD_SUBTYPE", "type": []}, {"name": "REQUEST_REQUEST_EPERM", "type": []}, {"name": "REQUEST_BAD_LEN", "type": []}, {"name": "REQUEST_BUFFER_EMPTY", "type": []}, {"name": "REQUEST_BUFFER_UNKNOWN", "type": []}, {"name": "ACTION_BAD_TYPE", "type": []}, {"name": "ACTION_BAD_LEN", "type": []}, {"name": "ACTION_BAD_VENDOR", "type": []}, {"name": "ACTION_BAD_VENDOR_TYPE", "type": []}, {"name": "ACTION_BAD_OUT_PORT", "type": []}, {"name": "ACTION_BAD_ARGUMENT", "type": []}, {"name": "ACTION_EPERM", "type": []}, {"name": "ACTION_TOO_MANY", "type": []}, {"name": "ACTION_BAD_QUEUE", "type": []}, {"name": "FLOW_MOD_ALL_TABLES_FULL", "type": []}, {"name": "FLOW_MOD_OVERLAP", "type": []}, {"name": "FLOW_MOD_EPERM", "type": []}, {"name": "FLOW_MOD_EMERG_TIMEOUT", "type": []}, {"name": "FLOW_MOD_BAD_COMMAND", "type": []}, {"name": "FLOW_MOD_UNSUPPORTED", "type": []}, {"name": "PORT_MOD_BAD_PORT", "type": []}, {"name": "PORT_MOD_BAD_HW_ADDR", "type": []}, {"name": "QUEUE_OP_BAD_PORT", "type": []}, {"name": "QUEUE_OP_BAD_QUEUE", "type": []}, {"name": "QUEUE_OP_EPERM", "type": []}]}}}, {"value": {"name": "Openflow.Ofpacket.error_code_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|9550"}, "info": "", "type": "int -> Openflow.Ofpacket.error_code", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.int_of_error_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|9592"}, "info": "", "type": "Openflow.Ofpacket.error_code -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.error_code"}]}}, {"value": {"name": "Openflow.Ofpacket.string_of_error_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|9634"}, "info": "", "type": "Openflow.Ofpacket.error_code -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.error_code"}]}}, {"type": {"name": "Openflow.Ofpacket.msg_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|9702"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "HELLO", "type": []}, {"name": "ERROR", "type": []}, {"name": "ECHO_REQ", "type": []}, {"name": "ECHO_RESP", "type": []}, {"name": "VENDOR", "type": []}, {"name": "FEATURES_REQ", "type": []}, {"name": "FEATURES_RESP", "type": []}, {"name": "GET_CONFIG_REQ", "type": []}, {"name": "GET_CONFIG_RESP", "type": []}, {"name": "SET_CONFIG", "type": []}, {"name": "PACKET_IN", "type": []}, {"name": "FLOW_REMOVED", "type": []}, {"name": "PORT_STATUS", "type": []}, {"name": "PACKET_OUT", "type": []}, {"name": "FLOW_MOD", "type": []}, {"name": "PORT_MOD", "type": []}, {"name": "STATS_REQ", "type": []}, {"name": "STATS_RESP", "type": []}, {"name": "BARRIER_REQ", "type": []}, {"name": "BARRIER_RESP", "type": []}, {"name": "QUEUE_GET_CONFIG_REQ", "type": []}, {"name": "QUEUE_GET_CONFIG_RESP", "type": []}]}}}, {"value": {"name": "Openflow.Ofpacket.msg_code_of_int", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10046"}, "info": "", "type": "int -> Openflow.Ofpacket.msg_code", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Openflow.Ofpacket.int_of_msg_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10084"}, "info": "", "type": "Openflow.Ofpacket.msg_code -> int", "params": [{"name": "", "type": "Openflow.Ofpacket.msg_code"}]}}, {"value": {"name": "Openflow.Ofpacket.string_of_msg_code", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10122"}, "info": "", "type": "Openflow.Ofpacket.msg_code -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.msg_code"}]}}, {"type": {"name": "Openflow.Ofpacket.h", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10175"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "ver", "mutable": false, "type": "Openflow.Ofpacket.uint8"}, {"name": "ty", "mutable": false, "type": "Openflow.Ofpacket.msg_code"}, {"name": "len", "mutable": false, "type": "Openflow.Ofpacket.uint16"}, {"name": "xid", "mutable": false, "type": "Openflow.Ofpacket.uint32"}]}}}, {"value": {"name": "Openflow.Ofpacket.h_len", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10235"}, "info": "", "type": "int", "params": []}}, {"value": {"name": "Openflow.Ofpacket.parse_h", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10251"}, "info": "", "type": "Bitstring.bitstring -> Openflow.Ofpacket.h", "params": [{"name": "", "type": "Bitstring.bitstring"}]}}, {"value": {"name": "Openflow.Ofpacket.string_of_h", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10290"}, "info": "", "type": "Openflow.Ofpacket.h -> string", "params": [{"name": "", "type": "Openflow.Ofpacket.h"}]}}, {"value": {"name": "Openflow.Ofpacket.build_h", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10320"}, "info": "", "type": "Openflow.Ofpacket.h -> Bitstring.bitstring", "params": [{"name": "", "type": "Openflow.Ofpacket.h"}]}}, {"value": {"name": "Openflow.Ofpacket.build_features_req", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10359"}, "info": "", "type": "Openflow.Ofpacket.uint32 -> Bitstring.bitstring", "params": [{"name": "", "type": "Openflow.Ofpacket.uint32"}]}}, {"value": {"name": "Openflow.Ofpacket.build_echo_resp", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10414"}, "info": "", "type": "Openflow.Ofpacket.h -> Bitstring.bitstring -> Bitstring.bitstring", "params": [{"name": "", "type": "Openflow.Ofpacket.h"}, {"name": "", "type": "Bitstring.bitstring"}]}}, {"type": {"name": "Openflow.Ofpacket.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|10497"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Hello", "type": ["Openflow.Ofpacket.h", "Bitstring.t"]}, {"name": "Error", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.error_code"]}, {"name": "Echo_req", "type": ["Openflow.Ofpacket.h", "Bitstring.t"]}, {"name": "Echo_resp", "type": ["Openflow.Ofpacket.h", "Bitstring.t"]}, {"name": "Vendor", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.vendor", "Bitstring.t"]}, {"name": "Features_req", "type": ["Openflow.Ofpacket.h"]}, {"name": "Features_resp", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Switch.features"]}, {"name": "Get_config_req", "type": ["Openflow.Ofpacket.h"]}, {"name": "Get_config_resp", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Switch.config"]}, {"name": "Set_config", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Switch.config"]}, {"name": "Packet_in", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Packet_in.t"]}, {"name": "Flow_removed", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Flow.t"]}, {"name": "Port_status", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Port.status"]}, {"name": "Packet_out", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Packet_out.t", "Bitstring.t"]}, {"name": "Flow_mod", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Flow_mod.t"]}, {"name": "Port_mod", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Port_mod.t"]}, {"name": "Stats_req", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Stats.req"]}, {"name": "Stats_resp", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.Stats.resp"]}, {"name": "Barrier_req", "type": ["Openflow.Ofpacket.h"]}, {"name": "Barrier_resp", "type": ["Openflow.Ofpacket.h"]}, {"name": "Queue_get_config_req", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.port"]}, {"name": "Queue_get_config_resp", "type": ["Openflow.Ofpacket.h", "Openflow.Ofpacket.port", "Openflow.Ofpacket.Queue.t array"]}]}}}, {"value": {"name": "Openflow.Ofpacket.parse", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|11226"}, "info": "", "type": "Openflow.Ofpacket.h -> Bitstring.t -> Openflow.Ofpacket.t", "params": [{"name": "", "type": "Openflow.Ofpacket.h"}, {"name": "", "type": "Bitstring.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Openflow.Controller", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|11264"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Openflow.Controller.Event", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|11317"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Openflow.Controller.Event.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|11351"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "DATAPATH_JOIN", "type": []}, {"name": "DATAPATH_LEAVE", "type": []}, {"name": "PACKET_IN", "type": []}]}}}, {"type": {"name": "Openflow.Controller.Event.e", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|11415"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Datapath_join", "type": ["Openflow.Ofpacket.datapath_id"]}, {"name": "Datapath_leave", "type": ["Openflow.Ofpacket.datapath_id"]}, {"name": "Packet_in", "type": ["Openflow.Ofpacket.port", "Bitstring.t", "Openflow.Ofpacket.datapath_id"]}]}}}, {"value": {"name": "Openflow.Controller.Event.string_of_event", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|11576"}, "info": "", "type": "Openflow.Controller.Event.e -> string", "params": [{"name": "", "type": "Openflow.Controller.Event.e"}]}}], "dependencies": {"uses": []}}}, {"type": {"name": "Openflow.Controller.endhost", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|11631"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "ip", "mutable": false, "type": "Net.Nettypes.ipv4_addr"}, {"name": "port", "mutable": false, "type": "int"}]}}}, {"type": {"name": "Openflow.Controller.state", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|11689"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "dp_db", "mutable": true, "type": "(Openflow.Ofpacket.datapath_id, Net.Channel.t) Hashtbl.t"}, {"name": "channel_dp", "mutable": true, "type": "(Openflow.Controller.endhost, Openflow.Ofpacket.datapath_id) Hashtbl.t"}, {"name": "datapath_join_cb", "mutable": true, "type": "(Openflow.Controller.state ->\n   Openflow.Ofpacket.datapath_id -> Openflow.Controller.Event.e -> unit)\n  list"}, {"name": "datapath_leave_cb", "mutable": true, "type": "(Openflow.Controller.state ->\n   Openflow.Ofpacket.datapath_id -> Openflow.Controller.Event.e -> unit)\n  list"}, {"name": "packet_in_cb", "mutable": true, "type": "(Openflow.Controller.state ->\n   Openflow.Ofpacket.datapath_id -> Openflow.Controller.Event.e -> unit)\n  list"}]}}}, {"value": {"name": "Openflow.Controller.register_cb", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|12089"}, "info": "", "type": "Openflow.Controller.state ->\n  Openflow.Controller.Event.t ->\n  (Openflow.Controller.state ->\n   Openflow.Ofpacket.datapath_id -> Openflow.Controller.Event.e -> unit) ->\n  unit", "params": [{"name": "", "type": "Openflow.Controller.state"}, {"name": "", "type": "Openflow.Controller.Event.t"}, {"name": "", "type": "Openflow.Controller.state ->\n  Openflow.Ofpacket.datapath_id -> Openflow.Controller.Event.e -> unit"}]}}, {"value": {"name": "Openflow.Controller.process_of_packet", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|12188"}, "info": "", "type": "Openflow.Controller.state ->\n  Net.Nettypes.ipv4_addr * int ->\n  Openflow.Ofpacket.t -> Net.Channel.t -> unit Lwt.t", "params": [{"name": "", "type": "Openflow.Controller.state"}, {"tuple": {"type": "Net.Nettypes.ipv4_addr * int", "contents": [{"name": "", "type": "Net.Nettypes.ipv4_addr"}, {"name": "", "type": "int"}]}}, {"name": "", "type": "Openflow.Ofpacket.t"}, {"name": "", "type": "Net.Channel.t"}]}}, {"value": {"name": "Openflow.Controller.send_of_data", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|12299"}, "info": "", "type": "Openflow.Controller.state ->\n  Openflow.Ofpacket.datapath_id -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "Openflow.Controller.state"}, {"name": "", "type": "Openflow.Ofpacket.datapath_id"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Openflow.Controller.rd_data", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|12377"}, "info": "", "type": "int -> Net.Channel.t -> Bitstring.bitstring Lwt.t", "params": [{"name": "", "type": "int"}, {"name": "", "type": "Net.Channel.t"}]}}, {"value": {"name": "Openflow.Controller.listen", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/openflow.mli|12441"}, "info": "", "type": "Net.Manager.t ->\n  Net.Nettypes.ipv4_addr option ->\n  int -> (Openflow.Controller.state -> 'a) -> unit Lwt.t", "params": [{"name": "", "type": "Net.Manager.t"}, {"name": "", "type": "Net.Nettypes.ipv4_addr option"}, {"name": "", "type": "int"}, {"name": "", "type": "Openflow.Controller.state -> 'a"}]}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Net", "Lwt", "Hashtbl", "Bitstring"], "used_by": []}}}, "OUnit": {"module": {"name": "OUnit", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|0"}, "info": {"description": "Unit test building blocks", "authors": ["Maas-Maarten Zeeman", "Sylvain Le Gall"]}, "type": "sig  end", "module_structure": [{"comment": "<h2>Assertions<\/h2> <br><\/br>\n    Assertions are the basic building blocks of unittests."}, {"value": {"name": "OUnit.assert_failure", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|899"}, "info": {"description": "Signals a failure. This will raise an exception with the specified\n    string.", "raised_exceptions": [{"raised_exception": "Failure", "text": "signal a failure"}]}, "type": "string -> 'a Lwt.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "OUnit.assert_bool", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|1066"}, "info": {"description": "Signals a failure when bool is false. The string identifies the \n    failure.", "raised_exceptions": [{"raised_exception": "Failure", "text": "signal a failure"}]}, "type": "string -> bool -> unit Lwt.t", "params": [{"name": "", "type": "string"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "OUnit.(@?)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|1188"}, "info": {"description": "Shorthand for assert_bool", "raised_exceptions": [{"raised_exception": "Failure", "text": "to signal a failure"}]}, "type": "string -> bool -> unit Lwt.t", "params": [{"name": "", "type": "string"}, {"name": "", "type": "bool"}]}}, {"value": {"name": "OUnit.assert_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|1368"}, "info": {"description": "Signals a failure when the string is non-empty. The string identifies the\n    failure.", "raised_exceptions": [{"raised_exception": "Failure", "text": "signal a failure"}]}, "type": "string -> unit Lwt.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "OUnit.assert_equal", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|1910"}, "info": {"description": "<span class=\"code\" >assert_equal expected real<\/span> Compares two values, when they are not equal a\n    failure is signaled.", "version": "1.1.0", "raised_exceptions": [{"raised_exception": "Failure", "text": "signal a failure"}]}, "type": "?cmp:('a -> 'a -> bool) ->\n  ?printer:('a -> string) ->\n  ?pp_diff:(Format.formatter -> 'a * 'a -> unit) ->\n  ?msg:string -> 'a -> 'a -> unit Lwt.t", "params": [{"name": "cmp", "type": "('a -> 'a -> bool) option", "comment": "customize function to compare, default is <span class=\"code\" >=<\/span>"}, {"name": "printer", "type": "('a -> string) option", "comment": "value printer, don't print value otherwise"}, {"name": "pp_diff", "type": "(Format.formatter -> 'a * 'a -> unit) option", "comment": "if not equal, ask a custom display of the difference\n                using <span class=\"code\" >diff fmt exp real<\/span> where <span class=\"code\" >fmt<\/span> is the formatter to use"}, {"name": "msg", "type": "string option", "comment": "custom message to identify the failure"}, {"name": "", "type": "'a"}, {"name": "", "type": "'a"}]}}, {"value": {"name": "OUnit.assert_raises", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|2210"}, "info": {"description": "Asserts if the expected exception was raised.", "raised_exceptions": [{"raised_exception": "Failure", "text": "description"}]}, "type": "?msg:string -> exn -> (unit -> 'a Lwt.t) -> unit Lwt.t", "params": [{"name": "msg", "type": "string option", "comment": "identify the failure"}, {"name": "", "type": "exn"}, {"name": "", "type": "unit -> 'a Lwt.t"}]}}, {"comment": "<h2>Skipping tests <\/h2> <br><\/br>\n   In certain condition test can be written but there is no point running it, because they\n   are not significant (missing OS features for example). In this case this is not a failure\n   nor a success. Following functions allow you to escape test, just as assertion but without\n   the same error status.<br><\/br>\n   A test skipped is counted as success. A test todo is counted as failure."}, {"value": {"name": "OUnit.skip_if", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|2899"}, "info": {"description": "<span class=\"code\" >skip cond msg<\/span> If <span class=\"code\" >cond<\/span> is true, skip the test for the reason explain in <span class=\"code\" >msg<\/span>.\n    For example <span class=\"code\" >skip_if (Sys.os_type = \"Win32\") \"Test a doesn't run on windows\"<\/span>.", "since": "1.0.3"}, "type": "bool -> string -> unit", "params": [{"name": "", "type": "bool"}, {"name": "", "type": "string"}]}}, {"value": {"name": "OUnit.todo", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|3031"}, "info": {"description": "The associated test is still to be done, for the reason given.", "since": "1.0.3"}, "type": "string -> unit", "params": [{"name": "", "type": "string"}]}}, {"comment": "<h2>Compare Functions<\/h2>"}, {"value": {"name": "OUnit.cmp_float", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|3223"}, "info": {"description": "Compare floats up to a given relative error."}, "type": "?epsilon:float -> float -> float -> bool", "params": [{"name": "epsilon", "type": "float option", "comment": "if the difference is smaller <span class=\"code\" >epsilon<\/span> values are equal"}, {"name": "", "type": "float"}, {"name": "", "type": "float"}]}}, {"comment": "<h2>Bracket<\/h2><br><\/br>\n    A bracket is a functional implementation of the commonly used\n    setUp and tearDown feature in unittests. It can be used like this:<br><\/br>\n    <span class=\"code\" >\"MyTestCase\" &gt;:: (bracket test_set_up test_fun test_tear_down)<\/span>"}, {"value": {"name": "OUnit.bracket", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|3759"}, "info": {"description": "<span class=\"code\" >bracket set_up test tear_down<\/span> The <span class=\"code\" >set_up<\/span> function runs first, then\n    the <span class=\"code\" >test<\/span> function runs and at the end <span class=\"code\" >tear_down<\/span> runs. The \n    <span class=\"code\" >tear_down<\/span> function runs even if the <span class=\"code\" >test<\/span> failed and help to clean\n    the environment."}, "type": "(unit -> 'a) -> ('a -> 'b) -> ('a -> 'c) -> unit -> 'c", "params": [{"name": "", "type": "unit -> 'a"}, {"name": "", "type": "'a -> 'b"}, {"name": "", "type": "'a -> 'b"}, {"name": "", "type": "unit"}]}}, {"comment": "<h2>Constructing Tests<\/h2>"}, {"type": {"name": "OUnit.test_fun", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|3908"}, "info": {"description": "The type of test function"}, "params": [], "kind": {"type": "abstract"}, "manifest": "unit -> unit Lwt.t"}}, {"type": {"name": "OUnit.test", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|3969"}, "info": {"description": "The type of tests"}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "TestCase", "type": ["OUnit.test_fun"]}, {"name": "TestList", "type": ["OUnit.test list"]}, {"name": "TestLabel", "type": ["string", "OUnit.test"]}]}}}, {"value": {"name": "OUnit.(>:)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|4085"}, "info": {"description": "Create a TestLabel for a test"}, "type": "string -> OUnit.test -> OUnit.test", "params": [{"name": "", "type": "string"}, {"name": "", "type": "OUnit.test"}]}}, {"value": {"name": "OUnit.(>::)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|4161"}, "info": {"description": "Create a TestLabel for a TestCase"}, "type": "string -> OUnit.test_fun -> OUnit.test", "params": [{"name": "", "type": "string"}, {"name": "", "type": "OUnit.test_fun"}]}}, {"value": {"name": "OUnit.(>:::)", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|4242"}, "info": {"description": "Create a TestLabel for a TestList"}, "type": "string -> OUnit.test list -> OUnit.test", "params": [{"name": "", "type": "string"}, {"name": "", "type": "OUnit.test list"}]}}, {"comment": "Some shorthands which allows easy test construction.<br><\/br>\n   Examples:<br><\/br><ul><li><span class=\"code\" >\"test1\" &gt;: TestCase((fun _ -&gt; ()))<\/span> =&gt;  \n   <span class=\"code\" >TestLabel(\"test2\", TestCase((fun _ -&gt; ())))<\/span><\/li><li><span class=\"code\" >\"test2\" &gt;:: (fun _ -&gt; ())<\/span> =&gt; \n   <span class=\"code\" >TestLabel(\"test2\", TestCase((fun _ -&gt; ())))<\/span><\/li><li><span class=\"code\" >\"test-suite\" &gt;::: [\"test2\" &gt;:: (fun _ -&gt; ());]<\/span> =&gt;\n   <span class=\"code\" >TestLabel(\"test-suite\", TestSuite([TestLabel(\"test2\", TestCase((fun _ -&gt; ())))]))<\/span><\/li><\/ul>"}, {"value": {"name": "OUnit.test_decorate", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|4790"}, "info": {"description": "<span class=\"code\" >test_decorate g tst<\/span> Apply <span class=\"code\" >g<\/span> to test function contains in <span class=\"code\" >tst<\/span> tree.", "since": "1.0.3"}, "type": "(OUnit.test_fun -> OUnit.test_fun) -> OUnit.test -> OUnit.test", "params": [{"name": "", "type": "OUnit.test_fun -> OUnit.test_fun"}, {"name": "", "type": "OUnit.test"}]}}, {"value": {"name": "OUnit.test_filter", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5029"}, "info": {"description": "<span class=\"code\" >test_filter paths tst<\/span> Filter test based on their path string representation.", "since": "1.0.3"}, "type": "?skip:bool -> string list -> OUnit.test -> OUnit.test option", "params": [{"name": "skip", "type": "bool option"}, {"name": "", "type": "string list"}, {"name": "", "type": "OUnit.test"}]}}, {"comment": "<h2>Retrieve Information from Tests<\/h2>"}, {"value": {"name": "OUnit.test_case_count", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5191"}, "info": {"description": "Returns the number of available test cases"}, "type": "OUnit.test -> int", "params": [{"name": "", "type": "OUnit.test"}]}}, {"type": {"name": "OUnit.node", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5286"}, "info": {"description": "Types which represent the path of a test"}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "ListItem", "type": ["int"]}, {"name": "Label", "type": ["string"]}]}}}, {"type": {"name": "OUnit.path", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5332"}, "info": {"description": "The path to the test (in reverse order)."}, "params": [], "kind": {"type": "abstract"}, "manifest": "OUnit.node list"}}, {"value": {"name": "OUnit.string_of_node", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5424"}, "info": {"description": "Make a string from a node"}, "type": "OUnit.node -> string", "params": [{"name": "", "type": "OUnit.node"}]}}, {"value": {"name": "OUnit.string_of_path", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5563"}, "info": {"description": "Make a string from a path. The path will be reversed before it is \n    tranlated into a string"}, "type": "OUnit.path -> string", "params": [{"name": "", "type": "OUnit.path"}]}}, {"value": {"name": "OUnit.test_case_paths", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5645"}, "info": {"description": "Returns a list with paths of the test"}, "type": "OUnit.test -> OUnit.path list", "params": [{"name": "", "type": "OUnit.test"}]}}, {"comment": "<h2>Performing Tests<\/h2>"}, {"type": {"name": "OUnit.test_result", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5776"}, "info": {"description": "The possible results of a test"}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "RSuccess", "type": ["OUnit.path"]}, {"name": "RFailure", "type": ["OUnit.path", "string"]}, {"name": "RError", "type": ["OUnit.path", "string"]}, {"name": "RSkip", "type": ["OUnit.path", "string"]}, {"name": "RTodo", "type": ["OUnit.path", "string"]}]}}}, {"type": {"name": "OUnit.test_event", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|5975"}, "info": {"description": "Events which occur during a test run"}, "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "EStart", "type": ["OUnit.path"]}, {"name": "EEnd", "type": ["OUnit.path"]}, {"name": "EResult", "type": ["OUnit.test_result"]}]}}}, {"value": {"name": "OUnit.perform_test", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|6102"}, "info": {"description": "Perform the test, allows you to build your own test runner"}, "type": "(OUnit.test_event -> 'a) -> OUnit.test -> OUnit.test_result list Lwt.t", "params": [{"name": "", "type": "OUnit.test_event -> 'a"}, {"name": "", "type": "OUnit.test"}]}}, {"value": {"name": "OUnit.run_test_tt", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/oUnit.mli|6307"}, "info": {"description": "A simple text based test runner. It prints out information\n    during the test."}, "type": "?verbose:bool -> OUnit.test -> OUnit.test_result list Lwt.t", "params": [{"name": "verbose", "type": "bool option", "comment": "print verbose message"}, {"name": "", "type": "OUnit.test"}]}}], "dependencies": {"uses": ["Lwt", "Format"], "used_by": []}}}, "Fs": {"module": {"name": "Fs", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|0"}, "info": {"description": "the directory itself and its immediate children"}, "type": "sig  end", "module_structure": [{"module": {"name": "Fs.Fat", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|0"}, "info": "", "type": "sig  end", "module_structure": [{"module": {"name": "Fs.Fat.Path", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|807"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Fs.Fat.Path.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|836"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Fs.Fat.Path.of_string_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|836"}, "info": "", "type": "string list -> Fs.Fat.Path.t", "params": [{"name": "", "type": "string list"}]}}, {"value": {"name": "Fs.Fat.Path.to_string_list", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|875"}, "info": "", "type": "Fs.Fat.Path.t -> string list", "params": [{"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.Path.directory", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|914"}, "info": "", "type": "Fs.Fat.Path.t -> Fs.Fat.Path.t", "params": [{"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.Path.filename", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|938"}, "info": "", "type": "Fs.Fat.Path.t -> string", "params": [{"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.Path.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|966"}, "info": "", "type": "Fs.Fat.Path.t -> string", "params": [{"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.Path.of_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|995"}, "info": "", "type": "string -> Fs.Fat.Path.t", "params": [{"name": "", "type": "string"}]}}, {"value": {"name": "Fs.Fat.Path.cd", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1024"}, "info": "", "type": "Fs.Fat.Path.t -> string -> Fs.Fat.Path.t", "params": [{"name": "", "type": "Fs.Fat.Path.t"}, {"name": "", "type": "string"}]}}, {"value": {"name": "Fs.Fat.Path.is_root", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1051"}, "info": "", "type": "Fs.Fat.Path.t -> bool", "params": [{"name": "", "type": "Fs.Fat.Path.t"}]}}], "dependencies": {"uses": []}}}, {"module": {"name": "Fs.Fat.Dir_entry", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1079"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Fs.Fat.Dir_entry.datetime", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1121"}, "info": "", "params": [], "kind": {"type": "record", "private": "false", "fields": [{"name": "year", "mutable": false, "type": "int"}, {"name": "month", "mutable": false, "type": "int"}, {"name": "day", "mutable": false, "type": "int"}, {"name": "hours", "mutable": false, "type": "int"}, {"name": "mins", "mutable": false, "type": "int"}, {"name": "secs", "mutable": false, "type": "int"}, {"name": "ms", "mutable": false, "type": "int"}]}}}, {"type": {"name": "Fs.Fat.Dir_entry.r", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1244"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Fs.Fat.Dir_entry.to_string", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1244"}, "info": "", "type": "Fs.Fat.Dir_entry.r -> string", "params": [{"name": "", "type": "Fs.Fat.Dir_entry.r"}]}}], "dependencies": {"uses": []}}}, {"type": {"name": "Fs.Fat.error", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1291"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Not_a_directory", "type": ["Fs.Fat.Path.t"]}, {"name": "Is_a_directory", "type": ["Fs.Fat.Path.t"]}, {"name": "Directory_not_empty", "type": ["Fs.Fat.Path.t"]}, {"name": "No_directory_entry", "type": ["Fs.Fat.Path.t", "string"]}, {"name": "File_already_exists", "type": ["string"]}, {"name": "No_space", "type": []}]}}}, {"type": {"name": "Fs.Fat.result", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1490"}, "info": "", "params": [{"covariant": true, "contravariant": false, "type": "'a"}], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "Error", "type": ["Fs.Fat.error"]}, {"name": "Success", "type": ["'a"]}]}}}, {"module": {"name": "Fs.Fat.Stat", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1526"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Fs.Fat.Stat.t", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1560"}, "info": "", "params": [], "kind": {"type": "variant", "private": "false", "constructors": [{"name": "File", "type": ["Fs.Fat.Dir_entry.r"]}, {"name": "Dir", "description": "the directory itself and its immediate children", "type": ["Fs.Fat.Dir_entry.r", "Fs.Fat.Dir_entry.r list"]}]}}}], "dependencies": {"uses": []}}}, {"module_type": {"name": "Fs.Fat.FS", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1688"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Fs.Fat.FS.fs", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1721"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Fs.Fat.FS.make", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1721"}, "info": "", "type": "unit -> Fs.Fat.FS.fs Lwt.t", "params": [{"name": "", "type": "unit"}]}}, {"type": {"name": "Fs.Fat.FS.file", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1764"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Fs.Fat.FS.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1764"}, "info": "", "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> unit Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.mkdir", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1813"}, "info": "", "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> unit Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.destroy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1924"}, "info": {"description": "<span class=\"code\" >destroy fs path<\/span> removes a <span class=\"code\" >path<\/span> on filesystem <span class=\"code\" >fs<\/span>"}, "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> unit Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.file_of_path", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2072"}, "info": {"description": "<span class=\"code\" >file_of_path fs path<\/span> returns a <span class=\"code\" >file<\/span> corresponding to <span class=\"code\" >path<\/span> on\n      filesystem <span class=\"code\" >fs<\/span>"}, "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> Fs.Fat.FS.file", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.stat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2189"}, "info": {"description": "<span class=\"code\" >stat fs f<\/span> returns information about file <span class=\"code\" >f<\/span> on filesystem <span class=\"code\" >fs<\/span>"}, "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> Fs.Fat.Stat.t Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2341"}, "info": {"description": "<span class=\"code\" >write fs f offset bs<\/span> writes bitstring <span class=\"code\" >bs<\/span> at <span class=\"code\" >offset<\/span> in file <span class=\"code\" >f<\/span> on\n      filesystem <span class=\"code\" >fs<\/span>"}, "type": "Fs.Fat.FS.fs ->\n  Fs.Fat.FS.file -> int -> Bitstring.t -> unit Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.FS.file"}, {"name": "", "type": "int"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Fs.Fat.FS.read", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2586"}, "info": {"description": "<span class=\"code\" >read fs f offset length<\/span> reads up to <span class=\"code\" >length<\/span> bytes from file <span class=\"code\" >f<\/span> on\n      filesystem <span class=\"code\" >fs<\/span>. If less data is returned than requested, this indicates\n      end-of-file."}, "type": "Fs.Fat.FS.fs ->\n  Fs.Fat.FS.file -> int -> int -> Bitstring.t Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.FS.file"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, {"module_type": {"name": "Fs.Fat.BLOCK", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2654"}, "info": "", "type": "sig  end", "module_structure": [{"value": {"name": "Fs.Fat.BLOCK.read_sector", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2680"}, "info": "", "type": "int -> Bitstring.t Lwt.t", "params": [{"name": "", "type": "int"}]}}, {"value": {"name": "Fs.Fat.BLOCK.write_sector", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2724"}, "info": "", "type": "int -> Bitstring.t -> unit Lwt.t", "params": [{"name": "", "type": "int"}, {"name": "", "type": "Bitstring.t"}]}}]}}, {"module": {"name": "Fs.Fat.FATFilesystem", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2780"}, "info": "", "type": "functor (B : BLOCK) -> FS", "module_functor": {"parameter": {"name": "B", "module_alias": {"name": "Fs.Fat.BLOCK"}}, "module_with": {"module_alias": {"name": "Fs.Fat.FS", "module_type": {"name": "Fs.Fat.FS", "file": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1688"}, "info": "", "type": "sig  end", "module_structure": [{"type": {"name": "Fs.Fat.FS.fs", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1721"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Fs.Fat.FS.make", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1721"}, "info": "", "type": "unit -> Fs.Fat.FS.fs Lwt.t", "params": [{"name": "", "type": "unit"}]}}, {"type": {"name": "Fs.Fat.FS.file", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1764"}, "info": "", "params": [], "kind": {"type": "abstract"}}}, {"value": {"name": "Fs.Fat.FS.create", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1764"}, "info": "", "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> unit Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.mkdir", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1813"}, "info": "", "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> unit Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.destroy", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|1924"}, "info": {"description": "<span class=\"code\" >destroy fs path<\/span> removes a <span class=\"code\" >path<\/span> on filesystem <span class=\"code\" >fs<\/span>"}, "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> unit Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.file_of_path", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2072"}, "info": {"description": "<span class=\"code\" >file_of_path fs path<\/span> returns a <span class=\"code\" >file<\/span> corresponding to <span class=\"code\" >path<\/span> on\n      filesystem <span class=\"code\" >fs<\/span>"}, "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> Fs.Fat.FS.file", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.stat", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2189"}, "info": {"description": "<span class=\"code\" >stat fs f<\/span> returns information about file <span class=\"code\" >f<\/span> on filesystem <span class=\"code\" >fs<\/span>"}, "type": "Fs.Fat.FS.fs -> Fs.Fat.Path.t -> Fs.Fat.Stat.t Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.Path.t"}]}}, {"value": {"name": "Fs.Fat.FS.write", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2341"}, "info": {"description": "<span class=\"code\" >write fs f offset bs<\/span> writes bitstring <span class=\"code\" >bs<\/span> at <span class=\"code\" >offset<\/span> in file <span class=\"code\" >f<\/span> on\n      filesystem <span class=\"code\" >fs<\/span>"}, "type": "Fs.Fat.FS.fs ->\n  Fs.Fat.FS.file -> int -> Bitstring.t -> unit Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.FS.file"}, {"name": "", "type": "int"}, {"name": "", "type": "Bitstring.t"}]}}, {"value": {"name": "Fs.Fat.FS.read", "location": {"implementation": "unknown", "interface": "\/Users\/tgazagna\/git\/mirage\/lib\/_build\/unix-direct\/std\/fs.mli|2586"}, "info": {"description": "<span class=\"code\" >read fs f offset length<\/span> reads up to <span class=\"code\" >length<\/span> bytes from file <span class=\"code\" >f<\/span> on\n      filesystem <span class=\"code\" >fs<\/span>. If less data is returned than requested, this indicates\n      end-of-file."}, "type": "Fs.Fat.FS.fs ->\n  Fs.Fat.FS.file -> int -> int -> Bitstring.t Fs.Fat.result Lwt.t", "params": [{"name": "", "type": "Fs.Fat.FS.fs"}, {"name": "", "type": "Fs.Fat.FS.file"}, {"name": "", "type": "int"}, {"name": "", "type": "int"}]}}]}}, "with": ""}}, "dependencies": {"uses": []}}}], "dependencies": {"uses": []}}}], "dependencies": {"uses": ["Lwt", "Bitstring"], "used_by": []}}}}}
